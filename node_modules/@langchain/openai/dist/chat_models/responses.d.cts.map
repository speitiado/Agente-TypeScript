{"version":3,"file":"responses.d.cts","names":["OpenAI","OpenAIClient","CallbackManagerForLLMRun","BaseMessage","ChatGenerationChunk","ChatResult","ChatOpenAIReasoningSummary","OpenAIVerbosityParam","ChatOpenAIToolType","ResponsesTool","BaseChatOpenAI","BaseChatOpenAICallOptions","ChatOpenAIResponsesCallOptions","Responses","ResponseCreateParams","ChatResponsesInvocationParams","Omit","ExcludeController","T","ResponsesCreate","ResponsesParse","ResponsesCreateInvoke","ReturnType","Awaited","ResponsesParseInvoke","ChatOpenAIResponses","CallOptions","Promise","AsyncGenerator","ResponseCreateParamsStreaming","RequestOptions","ResponseStreamEvent","AsyncIterable","ResponseCreateParamsNonStreaming","Response","ResponseInputItem","ComputerCallOutput","EasyInputMessage","FunctionCallOutput","ImageGenerationCall","ItemReference","LocalShellCall","LocalShellCallOutput","McpApprovalRequest","McpApprovalResponse","McpCall","McpListTools","Message","ResponseCodeInterpreterToolCall","ResponseComputerToolCall","ResponseCustomToolCall","ResponseCustomToolCallOutput","ResponseFileSearchToolCall","ResponseFunctionToolCall","ResponseFunctionWebSearch","ResponseOutputMessage","ResponseReasoningItem"],"sources":["../../src/chat_models/responses.d.ts"],"sourcesContent":["import { OpenAI as OpenAIClient } from \"openai\";\nimport { CallbackManagerForLLMRun } from \"@langchain/core/callbacks/manager\";\nimport { type BaseMessage } from \"@langchain/core/messages\";\nimport { ChatGenerationChunk, type ChatResult } from \"@langchain/core/outputs\";\nimport { ChatOpenAIReasoningSummary, OpenAIVerbosityParam } from \"../types.js\";\nimport { ChatOpenAIToolType, ResponsesTool } from \"../utils/tools.js\";\nimport { BaseChatOpenAI, BaseChatOpenAICallOptions } from \"./base.js\";\nexport interface ChatOpenAIResponsesCallOptions extends BaseChatOpenAICallOptions {\n    /**\n     * Configuration options for a text response from the model. Can be plain text or\n     * structured JSON data.\n     */\n    text?: OpenAIClient.Responses.ResponseCreateParams[\"text\"];\n    /**\n     * The truncation strategy to use for the model response.\n     */\n    truncation?: OpenAIClient.Responses.ResponseCreateParams[\"truncation\"];\n    /**\n     * Specify additional output data to include in the model response.\n     */\n    include?: OpenAIClient.Responses.ResponseCreateParams[\"include\"];\n    /**\n     * The unique ID of the previous response to the model. Use this to create multi-turn\n     * conversations.\n     */\n    previous_response_id?: OpenAIClient.Responses.ResponseCreateParams[\"previous_response_id\"];\n    /**\n     * The verbosity of the model's response.\n     */\n    verbosity?: OpenAIVerbosityParam;\n}\ntype ChatResponsesInvocationParams = Omit<OpenAIClient.Responses.ResponseCreateParams, \"input\">;\ntype ExcludeController<T> = T extends {\n    controller: unknown;\n} ? never : T;\ntype ResponsesCreate = OpenAIClient.Responses[\"create\"];\ntype ResponsesParse = OpenAIClient.Responses[\"parse\"];\ntype ResponsesCreateInvoke = ExcludeController<Awaited<ReturnType<ResponsesCreate>>>;\ntype ResponsesParseInvoke = ExcludeController<Awaited<ReturnType<ResponsesParse>>>;\n/**\n * OpenAI Responses API implementation.\n *\n * Will be exported in a later version of @langchain/openai.\n *\n * @internal\n */\nexport declare class ChatOpenAIResponses<CallOptions extends ChatOpenAIResponsesCallOptions = ChatOpenAIResponsesCallOptions> extends BaseChatOpenAI<CallOptions> {\n    invocationParams(options?: this[\"ParsedCallOptions\"]): ChatResponsesInvocationParams;\n    _generate(messages: BaseMessage[], options: this[\"ParsedCallOptions\"]): Promise<ChatResult>;\n    _streamResponseChunks(messages: BaseMessage[], options: this[\"ParsedCallOptions\"], runManager?: CallbackManagerForLLMRun): AsyncGenerator<ChatGenerationChunk>;\n    /**\n     * Calls the Responses API with retry logic in case of failures.\n     * @param request The request to send to the OpenAI API.\n     * @param options Optional configuration for the API call.\n     * @returns The response from the OpenAI API.\n     */\n    completionWithRetry(request: OpenAIClient.Responses.ResponseCreateParamsStreaming, requestOptions?: OpenAIClient.RequestOptions): Promise<AsyncIterable<OpenAIClient.Responses.ResponseStreamEvent>>;\n    completionWithRetry(request: OpenAIClient.Responses.ResponseCreateParamsNonStreaming, requestOptions?: OpenAIClient.RequestOptions): Promise<OpenAIClient.Responses.Response>;\n    /** @internal */\n    protected _convertResponsesMessageToBaseMessage(response: ResponsesCreateInvoke | ResponsesParseInvoke): BaseMessage;\n    /** @internal */\n    protected _convertResponsesDeltaToBaseMessageChunk(chunk: OpenAIClient.Responses.ResponseStreamEvent): ChatGenerationChunk | null;\n    /** @internal */\n    protected _convertMessagesToResponsesParams(messages: BaseMessage[]): (OpenAIClient.Responses.ResponseInputItem.ComputerCallOutput | OpenAIClient.Responses.EasyInputMessage | OpenAIClient.Responses.ResponseInputItem.FunctionCallOutput | OpenAIClient.Responses.ResponseInputItem.ImageGenerationCall | OpenAIClient.Responses.ResponseInputItem.ItemReference | OpenAIClient.Responses.ResponseInputItem.LocalShellCall | OpenAIClient.Responses.ResponseInputItem.LocalShellCallOutput | OpenAIClient.Responses.ResponseInputItem.McpApprovalRequest | OpenAIClient.Responses.ResponseInputItem.McpApprovalResponse | OpenAIClient.Responses.ResponseInputItem.McpCall | OpenAIClient.Responses.ResponseInputItem.McpListTools | OpenAIClient.Responses.ResponseInputItem.Message | OpenAIClient.Responses.ResponseCodeInterpreterToolCall | OpenAIClient.Responses.ResponseComputerToolCall | OpenAIClient.Responses.ResponseCustomToolCall | OpenAIClient.Responses.ResponseCustomToolCallOutput | OpenAIClient.Responses.ResponseFileSearchToolCall | OpenAIClient.Responses.ResponseFunctionToolCall | OpenAIClient.Responses.ResponseFunctionWebSearch | OpenAIClient.Responses.ResponseOutputMessage | OpenAIClient.Responses.ResponseReasoningItem)[];\n    /** @internal */\n    protected _convertReasoningSummary(reasoning: ChatOpenAIReasoningSummary): OpenAIClient.Responses.ResponseReasoningItem;\n    /** @internal */\n    protected _reduceChatOpenAITools(tools: ChatOpenAIToolType[], fields: {\n        stream?: boolean;\n        strict?: boolean;\n    }): ResponsesTool[];\n}\nexport {};\n"],"mappings":"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"}