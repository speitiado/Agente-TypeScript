{"version":3,"file":"common.cjs","names":["fields?: AzureChatOpenAIFields","options: OpenAICoreRequestOptions | undefined","openAIEndpointConfig: OpenAIEndpointConfig","getEndpoint","normalizeHeaders","AzureOpenAIClient","input: Serialized","obj: unknown"],"sources":["../../../src/azure/chat_models/common.ts"],"sourcesContent":["import { AzureOpenAI as AzureOpenAIClient } from \"openai\";\nimport { getEnv, getEnvironmentVariable } from \"@langchain/core/utils/env\";\nimport type { Serialized } from \"@langchain/core/load/serializable\";\nimport { ChatOpenAICallOptions } from \"../../chat_models/index.js\";\nimport {\n  OpenAIEndpointConfig,\n  getEndpoint,\n  normalizeHeaders,\n} from \"../../utils/azure.js\";\nimport { AzureOpenAIChatInput, OpenAICoreRequestOptions } from \"../../types.js\";\nimport {\n  BaseChatOpenAI,\n  BaseChatOpenAIFields,\n} from \"../../chat_models/base.js\";\n\nexport const AZURE_ALIASES = {\n  openAIApiKey: \"openai_api_key\",\n  openAIApiVersion: \"openai_api_version\",\n  openAIBasePath: \"openai_api_base\",\n  deploymentName: \"deployment_name\",\n  azureOpenAIEndpoint: \"azure_endpoint\",\n  azureOpenAIApiVersion: \"openai_api_version\",\n  azureOpenAIBasePath: \"openai_api_base\",\n  azureOpenAIApiDeploymentName: \"deployment_name\",\n};\n\nexport const AZURE_SECRETS = {\n  azureOpenAIApiKey: \"AZURE_OPENAI_API_KEY\",\n};\n\nexport const AZURE_SERIALIZABLE_KEYS = [\n  \"azureOpenAIApiKey\",\n  \"azureOpenAIApiVersion\",\n  \"azureOpenAIBasePath\",\n  \"azureOpenAIEndpoint\",\n  \"azureOpenAIApiInstanceName\",\n  \"azureOpenAIApiDeploymentName\",\n  \"deploymentName\",\n  \"openAIApiKey\",\n  \"openAIApiVersion\",\n];\n\nexport interface AzureChatOpenAIFields\n  extends BaseChatOpenAIFields,\n    Partial<AzureOpenAIChatInput> {\n  /**\n   * Whether to use the responses API for all requests. If `false` the responses API will be used\n   * only when required in order to fulfill the request.\n   */\n  useResponsesApi?: boolean;\n}\n\nexport function _constructAzureFields(\n  this: Partial<AzureOpenAIChatInput>,\n  fields?: AzureChatOpenAIFields\n) {\n  this.azureOpenAIApiKey =\n    fields?.azureOpenAIApiKey ??\n    fields?.openAIApiKey ??\n    fields?.apiKey ??\n    getEnvironmentVariable(\"AZURE_OPENAI_API_KEY\");\n\n  this.azureOpenAIApiInstanceName =\n    fields?.azureOpenAIApiInstanceName ??\n    getEnvironmentVariable(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n\n  this.azureOpenAIApiDeploymentName =\n    fields?.azureOpenAIApiDeploymentName ??\n    fields?.deploymentName ??\n    getEnvironmentVariable(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\");\n\n  this.azureOpenAIApiVersion =\n    fields?.azureOpenAIApiVersion ??\n    fields?.openAIApiVersion ??\n    getEnvironmentVariable(\"AZURE_OPENAI_API_VERSION\");\n\n  this.azureOpenAIBasePath =\n    fields?.azureOpenAIBasePath ??\n    getEnvironmentVariable(\"AZURE_OPENAI_BASE_PATH\");\n\n  this.azureOpenAIEndpoint =\n    fields?.azureOpenAIEndpoint ??\n    getEnvironmentVariable(\"AZURE_OPENAI_ENDPOINT\");\n\n  this.azureADTokenProvider = fields?.azureADTokenProvider;\n\n  if (!this.azureOpenAIApiKey && !this.apiKey && !this.azureADTokenProvider) {\n    throw new Error(\"Azure OpenAI API key or Token Provider not found\");\n  }\n}\n\nexport function _getAzureClientOptions(\n  this: BaseChatOpenAI<ChatOpenAICallOptions> & Partial<AzureOpenAIChatInput>,\n  options: OpenAICoreRequestOptions | undefined\n): OpenAICoreRequestOptions {\n  if (!this.client) {\n    const openAIEndpointConfig: OpenAIEndpointConfig = {\n      azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n      azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n      azureOpenAIApiKey: this.azureOpenAIApiKey,\n      azureOpenAIBasePath: this.azureOpenAIBasePath,\n      azureADTokenProvider: this.azureADTokenProvider,\n      baseURL: this.clientConfig.baseURL,\n      azureOpenAIEndpoint: this.azureOpenAIEndpoint,\n    };\n\n    const endpoint = getEndpoint(openAIEndpointConfig);\n\n    const params = {\n      ...this.clientConfig,\n      baseURL: endpoint,\n      timeout: this.timeout,\n      maxRetries: 0,\n    };\n\n    if (!this.azureADTokenProvider) {\n      params.apiKey = openAIEndpointConfig.azureOpenAIApiKey;\n    }\n\n    if (!params.baseURL) {\n      delete params.baseURL;\n    }\n\n    let env = getEnv();\n    if (env === \"node\" || env === \"deno\") {\n      env = `(${env}/${process.version}; ${process.platform}; ${process.arch})`;\n    }\n\n    const defaultHeaders = normalizeHeaders(params.defaultHeaders);\n    params.defaultHeaders = {\n      ...params.defaultHeaders,\n      \"User-Agent\": defaultHeaders[\"User-Agent\"]\n        ? `langchainjs-azure-openai/2.0.0 (${env})${defaultHeaders[\"User-Agent\"]}`\n        : `langchainjs-azure-openai/2.0.0 (${env})`,\n    };\n\n    this.client = new AzureOpenAIClient({\n      apiVersion: this.azureOpenAIApiVersion,\n      azureADTokenProvider: this.azureADTokenProvider,\n      deployment: this.azureOpenAIApiDeploymentName,\n      ...params,\n    });\n  }\n  const requestOptions = {\n    ...this.clientConfig,\n    ...options,\n  } as OpenAICoreRequestOptions;\n  if (this.azureOpenAIApiKey) {\n    requestOptions.headers = {\n      \"api-key\": this.azureOpenAIApiKey,\n      ...requestOptions.headers,\n    };\n    requestOptions.query = {\n      \"api-version\": this.azureOpenAIApiVersion,\n      ...requestOptions.query,\n    };\n  }\n  return requestOptions;\n}\n\nexport function _serializeAzureChat(\n  this: BaseChatOpenAI<ChatOpenAICallOptions> & Partial<AzureOpenAIChatInput>,\n  input: Serialized\n) {\n  const json = input;\n\n  function isRecord(obj: unknown): obj is Record<string, unknown> {\n    return typeof obj === \"object\" && obj != null;\n  }\n\n  if (isRecord(json) && isRecord(json.kwargs)) {\n    delete json.kwargs.azure_openai_base_path;\n    delete json.kwargs.azure_openai_api_deployment_name;\n    delete json.kwargs.azure_openai_api_key;\n    delete json.kwargs.azure_openai_api_version;\n    delete json.kwargs.azure_open_ai_base_path;\n\n    if (!json.kwargs.azure_endpoint && this.azureOpenAIEndpoint) {\n      json.kwargs.azure_endpoint = this.azureOpenAIEndpoint;\n    }\n    if (!json.kwargs.azure_endpoint && this.azureOpenAIBasePath) {\n      const parts = this.azureOpenAIBasePath.split(\"/openai/deployments/\");\n      if (parts.length === 2 && parts[0].startsWith(\"http\")) {\n        const [endpoint] = parts;\n        json.kwargs.azure_endpoint = endpoint;\n      }\n    }\n    if (!json.kwargs.azure_endpoint && this.azureOpenAIApiInstanceName) {\n      json.kwargs.azure_endpoint = `https://${this.azureOpenAIApiInstanceName}.openai.azure.com/`;\n    }\n    if (!json.kwargs.deployment_name && this.azureOpenAIApiDeploymentName) {\n      json.kwargs.deployment_name = this.azureOpenAIApiDeploymentName;\n    }\n    if (!json.kwargs.deployment_name && this.azureOpenAIBasePath) {\n      const parts = this.azureOpenAIBasePath.split(\"/openai/deployments/\");\n      if (parts.length === 2) {\n        const [, deployment] = parts;\n        json.kwargs.deployment_name = deployment;\n      }\n    }\n\n    if (\n      json.kwargs.azure_endpoint &&\n      json.kwargs.deployment_name &&\n      json.kwargs.openai_api_base\n    ) {\n      delete json.kwargs.openai_api_base;\n    }\n    if (\n      json.kwargs.azure_openai_api_instance_name &&\n      json.kwargs.azure_endpoint\n    ) {\n      delete json.kwargs.azure_openai_api_instance_name;\n    }\n  }\n\n  return json;\n}\n"],"mappings":"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"}