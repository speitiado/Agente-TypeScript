{"version":3,"file":"llms.cjs","names":["OpenAI","fields?: Partial<OpenAIInput> & {\n      openAIApiKey?: string;\n      openAIApiVersion?: string;\n      openAIBasePath?: string;\n      deploymentName?: string;\n    } & Partial<AzureOpenAIInput> &\n      BaseLLMParams & {\n        configuration?: ClientOptions;\n      }","options: OpenAICoreRequestOptions | undefined","openAIEndpointConfig: OpenAIEndpointConfig","getEndpoint","normalizeHeaders","AzureOpenAIClient","obj: unknown"],"sources":["../../src/azure/llms.ts"],"sourcesContent":["import { type ClientOptions, AzureOpenAI as AzureOpenAIClient } from \"openai\";\nimport { type BaseLLMParams } from \"@langchain/core/language_models/llms\";\nimport { getEnvironmentVariable } from \"@langchain/core/utils/env\";\nimport { OpenAI } from \"../llms.js\";\nimport {\n  OpenAIEndpointConfig,\n  getEndpoint,\n  normalizeHeaders,\n} from \"../utils/azure.js\";\nimport type {\n  OpenAIInput,\n  AzureOpenAIInput,\n  OpenAICoreRequestOptions,\n} from \"../types.js\";\n\nexport class AzureOpenAI extends OpenAI {\n  azureOpenAIApiVersion?: string;\n\n  azureOpenAIApiKey?: string;\n\n  azureADTokenProvider?: () => Promise<string>;\n\n  azureOpenAIApiInstanceName?: string;\n\n  azureOpenAIApiDeploymentName?: string;\n\n  azureOpenAIBasePath?: string;\n\n  azureOpenAIEndpoint?: string;\n\n  get lc_aliases(): Record<string, string> {\n    return {\n      ...super.lc_aliases,\n      openAIApiKey: \"openai_api_key\",\n      openAIApiVersion: \"openai_api_version\",\n      openAIBasePath: \"openai_api_base\",\n      deploymentName: \"deployment_name\",\n      azureOpenAIEndpoint: \"azure_endpoint\",\n      azureOpenAIApiVersion: \"openai_api_version\",\n      azureOpenAIBasePath: \"openai_api_base\",\n      azureOpenAIApiDeploymentName: \"deployment_name\",\n    };\n  }\n\n  get lc_secrets(): { [key: string]: string } | undefined {\n    return {\n      ...super.lc_secrets,\n      azureOpenAIApiKey: \"AZURE_OPENAI_API_KEY\",\n    };\n  }\n\n  constructor(\n    fields?: Partial<OpenAIInput> & {\n      openAIApiKey?: string;\n      openAIApiVersion?: string;\n      openAIBasePath?: string;\n      deploymentName?: string;\n    } & Partial<AzureOpenAIInput> &\n      BaseLLMParams & {\n        configuration?: ClientOptions;\n      }\n  ) {\n    super(fields);\n\n    this.azureOpenAIApiDeploymentName =\n      (fields?.azureOpenAIApiCompletionsDeploymentName ||\n        fields?.azureOpenAIApiDeploymentName) ??\n      (getEnvironmentVariable(\"AZURE_OPENAI_API_COMPLETIONS_DEPLOYMENT_NAME\") ||\n        getEnvironmentVariable(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\"));\n\n    this.azureOpenAIApiKey =\n      fields?.azureOpenAIApiKey ??\n      fields?.openAIApiKey ??\n      fields?.apiKey ??\n      getEnvironmentVariable(\"AZURE_OPENAI_API_KEY\");\n\n    this.azureOpenAIApiInstanceName =\n      fields?.azureOpenAIApiInstanceName ??\n      getEnvironmentVariable(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n\n    this.azureOpenAIApiVersion =\n      fields?.azureOpenAIApiVersion ??\n      fields?.openAIApiVersion ??\n      getEnvironmentVariable(\"AZURE_OPENAI_API_VERSION\");\n\n    this.azureOpenAIBasePath =\n      fields?.azureOpenAIBasePath ??\n      getEnvironmentVariable(\"AZURE_OPENAI_BASE_PATH\");\n\n    this.azureOpenAIEndpoint =\n      fields?.azureOpenAIEndpoint ??\n      getEnvironmentVariable(\"AZURE_OPENAI_ENDPOINT\");\n\n    this.azureADTokenProvider = fields?.azureADTokenProvider;\n\n    if (!this.azureOpenAIApiKey && !this.apiKey && !this.azureADTokenProvider) {\n      throw new Error(\"Azure OpenAI API key or Token Provider not found\");\n    }\n  }\n\n  protected _getClientOptions(\n    options: OpenAICoreRequestOptions | undefined\n  ): OpenAICoreRequestOptions {\n    if (!this.client) {\n      const openAIEndpointConfig: OpenAIEndpointConfig = {\n        azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n        azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n        azureOpenAIApiKey: this.azureOpenAIApiKey,\n        azureOpenAIBasePath: this.azureOpenAIBasePath,\n        azureADTokenProvider: this.azureADTokenProvider,\n        baseURL: this.clientConfig.baseURL,\n      };\n\n      const endpoint = getEndpoint(openAIEndpointConfig);\n\n      const params = {\n        ...this.clientConfig,\n        baseURL: endpoint,\n        timeout: this.timeout,\n        maxRetries: 0,\n      };\n\n      if (!this.azureADTokenProvider) {\n        params.apiKey = openAIEndpointConfig.azureOpenAIApiKey;\n      }\n\n      if (!params.baseURL) {\n        delete params.baseURL;\n      }\n\n      const defaultHeaders = normalizeHeaders(params.defaultHeaders);\n      params.defaultHeaders = {\n        ...params.defaultHeaders,\n        \"User-Agent\": defaultHeaders[\"User-Agent\"]\n          ? `${defaultHeaders[\"User-Agent\"]}: langchainjs-azure-openai-v2`\n          : `langchainjs-azure-openai-v2`,\n      };\n\n      this.client = new AzureOpenAIClient({\n        apiVersion: this.azureOpenAIApiVersion,\n        azureADTokenProvider: this.azureADTokenProvider,\n        ...params,\n      });\n    }\n\n    const requestOptions = {\n      ...this.clientConfig,\n      ...options,\n    } as OpenAICoreRequestOptions;\n    if (this.azureOpenAIApiKey) {\n      requestOptions.headers = {\n        \"api-key\": this.azureOpenAIApiKey,\n        ...requestOptions.headers,\n      };\n      requestOptions.query = {\n        \"api-version\": this.azureOpenAIApiVersion,\n        ...requestOptions.query,\n      };\n    }\n    return requestOptions;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  toJSON(): any {\n    const json = super.toJSON() as unknown;\n\n    function isRecord(obj: unknown): obj is Record<string, unknown> {\n      return typeof obj === \"object\" && obj != null;\n    }\n\n    if (isRecord(json) && isRecord(json.kwargs)) {\n      delete json.kwargs.azure_openai_base_path;\n      delete json.kwargs.azure_openai_api_deployment_name;\n      delete json.kwargs.azure_openai_api_key;\n      delete json.kwargs.azure_openai_api_version;\n      delete json.kwargs.azure_open_ai_base_path;\n    }\n\n    return json;\n  }\n}\n"],"mappings":";;;;;;;AAeA,IAAa,cAAb,cAAiCA,oBAAO;CACtC;CAEA;CAEA;CAEA;CAEA;CAEA;CAEA;CAEA,IAAI,aAAqC;AACvC,SAAO;GACL,GAAG,MAAM;GACT,cAAc;GACd,kBAAkB;GAClB,gBAAgB;GAChB,gBAAgB;GAChB,qBAAqB;GACrB,uBAAuB;GACvB,qBAAqB;GACrB,8BAA8B;EAC/B;CACF;CAED,IAAI,aAAoD;AACtD,SAAO;GACL,GAAG,MAAM;GACT,mBAAmB;EACpB;CACF;CAED,YACEC,QASA;EACA,MAAM,OAAO;EAEb,KAAK,gCACF,QAAQ,2CACP,QAAQ,yFACc,+CAA+C,2DAC9C,mCAAmC;EAE9D,KAAK,oBACH,QAAQ,qBACR,QAAQ,gBACR,QAAQ,iEACe,uBAAuB;EAEhD,KAAK,6BACH,QAAQ,qFACe,iCAAiC;EAE1D,KAAK,wBACH,QAAQ,yBACR,QAAQ,2EACe,2BAA2B;EAEpD,KAAK,sBACH,QAAQ,8EACe,yBAAyB;EAElD,KAAK,sBACH,QAAQ,8EACe,wBAAwB;EAEjD,KAAK,uBAAuB,QAAQ;AAEpC,MAAI,CAAC,KAAK,qBAAqB,CAAC,KAAK,UAAU,CAAC,KAAK,qBACnD,OAAM,IAAI,MAAM;CAEnB;CAED,AAAU,kBACRC,SAC0B;AAC1B,MAAI,CAAC,KAAK,QAAQ;GAChB,MAAMC,uBAA6C;IACjD,8BAA8B,KAAK;IACnC,4BAA4B,KAAK;IACjC,mBAAmB,KAAK;IACxB,qBAAqB,KAAK;IAC1B,sBAAsB,KAAK;IAC3B,SAAS,KAAK,aAAa;GAC5B;GAED,MAAM,WAAWC,0BAAY,qBAAqB;GAElD,MAAM,SAAS;IACb,GAAG,KAAK;IACR,SAAS;IACT,SAAS,KAAK;IACd,YAAY;GACb;AAED,OAAI,CAAC,KAAK,sBACR,OAAO,SAAS,qBAAqB;AAGvC,OAAI,CAAC,OAAO,SACV,OAAO,OAAO;GAGhB,MAAM,iBAAiBC,+BAAiB,OAAO,eAAe;GAC9D,OAAO,iBAAiB;IACtB,GAAG,OAAO;IACV,cAAc,eAAe,gBACzB,GAAG,eAAe,cAAc,6BAA6B,CAAC,GAC9D,CAAC,2BAA2B,CAAC;GAClC;GAED,KAAK,SAAS,IAAIC,mBAAkB;IAClC,YAAY,KAAK;IACjB,sBAAsB,KAAK;IAC3B,GAAG;GACJ;EACF;EAED,MAAM,iBAAiB;GACrB,GAAG,KAAK;GACR,GAAG;EACJ;AACD,MAAI,KAAK,mBAAmB;GAC1B,eAAe,UAAU;IACvB,WAAW,KAAK;IAChB,GAAG,eAAe;GACnB;GACD,eAAe,QAAQ;IACrB,eAAe,KAAK;IACpB,GAAG,eAAe;GACnB;EACF;AACD,SAAO;CACR;CAGD,SAAc;EACZ,MAAM,OAAO,MAAM,QAAQ;EAE3B,SAAS,SAASC,KAA8C;AAC9D,UAAO,OAAO,QAAQ,YAAY,OAAO;EAC1C;AAED,MAAI,SAAS,KAAK,IAAI,SAAS,KAAK,OAAO,EAAE;GAC3C,OAAO,KAAK,OAAO;GACnB,OAAO,KAAK,OAAO;GACnB,OAAO,KAAK,OAAO;GACnB,OAAO,KAAK,OAAO;GACnB,OAAO,KAAK,OAAO;EACpB;AAED,SAAO;CACR;AACF"}