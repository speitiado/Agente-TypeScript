{"version":3,"file":"react_agent_executor.d.ts","names":["_langchain_core_messages23","_langchain_core_language_models_chat_models0","___web_js2","BaseChatModel","LanguageModelLike","BaseMessage","BaseMessageLike","SystemMessage","Runnable","RunnableToolLike","RunnableSequence","RunnableBinding","RunnableLike","DynamicTool","StructuredToolInterface","InteropZodObject","InteropZodType","All","BaseCheckpointSaver","BaseStore","CompiledStateGraph","AnnotationRoot","MessagesAnnotation","ToolNode","LangGraphRunnableConfig","Runtime","Messages","START","InteropZodToStateDefinition","AgentState","Record","StructuredResponseType","N","StructuredResponseSchemaOptions","ServerTool","ClientTool","ConfigurableModelInterface","Promise","_shouldBindTools","_bindTools","_langchain_core_language_models_base0","BaseLanguageModelInput","MessageStructure","AIMessageChunk","BaseChatModelCallOptions","_getModel","Prompt","State","StateModifier","MessageModifier","createReactAgentAnnotation","MessageType","BinaryOperatorAggregate","T","LastValue","SingleReducer","StateDefinition","S","PreHookAnnotation","AnyAnnotationRoot","ToAnnotationRoot","A","CreateReactAgentParams","C","createReactAgent","StructuredResponseFormat","spec","ReturnType"],"sources":["../../src/prebuilt/react_agent_executor.d.ts"],"sourcesContent":["import { BaseChatModel } from \"@langchain/core/language_models/chat_models\";\nimport { LanguageModelLike } from \"@langchain/core/language_models/base\";\nimport { BaseMessage, BaseMessageLike, SystemMessage } from \"@langchain/core/messages\";\nimport { Runnable, RunnableToolLike, RunnableSequence, RunnableBinding, type RunnableLike } from \"@langchain/core/runnables\";\nimport { DynamicTool, StructuredToolInterface } from \"@langchain/core/tools\";\nimport type { InteropZodObject, InteropZodType } from \"@langchain/core/utils/types\";\nimport { All, BaseCheckpointSaver, BaseStore } from \"@langchain/langgraph-checkpoint\";\nimport { type CompiledStateGraph, AnnotationRoot } from \"../graph/index.js\";\nimport { MessagesAnnotation } from \"../graph/messages_annotation.js\";\nimport { ToolNode } from \"./tool_node.js\";\nimport { LangGraphRunnableConfig, Runtime } from \"../pregel/runnable_types.js\";\nimport { Messages } from \"../graph/message.js\";\nimport { START } from \"../constants.js\";\nimport type { InteropZodToStateDefinition } from \"../graph/zod/meta.js\";\n/**\n * @deprecated `AgentState` has been moved to {@link https://www.npmjs.com/package/langchain langchain} package.\n * Update your import to `import { AgentState } from \"langchain\";`\n */\nexport interface AgentState<\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nStructuredResponseType extends Record<string, any> = Record<string, any>> {\n    messages: BaseMessage[];\n    // TODO: This won't be set until we\n    // implement managed values in LangGraphJS\n    // Will be useful for inserting a message on\n    // graph recursion end\n    // is_last_step: boolean;\n    structuredResponse: StructuredResponseType;\n}\nexport type N = typeof START | \"agent\" | \"tools\";\ntype StructuredResponseSchemaOptions<StructuredResponseType> = {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    schema: InteropZodType<StructuredResponseType> | Record<string, any>;\n    prompt?: string;\n    strict?: boolean;\n    [key: string]: unknown;\n};\ntype ServerTool = Record<string, unknown>;\ntype ClientTool = StructuredToolInterface | DynamicTool | RunnableToolLike;\ninterface ConfigurableModelInterface {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _queuedMethodOperations: Record<string, any>;\n    _model: () => Promise<BaseChatModel>;\n}\nexport declare function _shouldBindTools(llm: LanguageModelLike, tools: (ClientTool | ServerTool)[]): Promise<boolean>;\nexport declare function _bindTools(llm: LanguageModelLike, toolClasses: (ClientTool | ServerTool)[]): Promise<Runnable<import(\"@langchain/core/language_models/base\").BaseLanguageModelInput, import(\"@langchain/core/messages\").AIMessageChunk<import(\"@langchain/core/messages\").MessageStructure>, import(\"@langchain/core/language_models/chat_models\").BaseChatModelCallOptions> | RunnableBinding<any, any, any> | RunnableSequence<any, any>>;\nexport declare function _getModel(llm: LanguageModelLike | ConfigurableModelInterface): Promise<LanguageModelLike>;\nexport type Prompt = SystemMessage | string | ((state: typeof MessagesAnnotation.State, config: LangGraphRunnableConfig) => BaseMessageLike[]) | ((state: typeof MessagesAnnotation.State, config: LangGraphRunnableConfig) => Promise<BaseMessageLike[]>) | Runnable;\n/** @deprecated Use Prompt instead. */\nexport type StateModifier = Prompt;\n/** @deprecated Use Prompt instead. */\nexport type MessageModifier = SystemMessage | string | ((messages: BaseMessage[]) => BaseMessage[]) | ((messages: BaseMessage[]) => Promise<BaseMessage[]>) | Runnable;\nexport declare const createReactAgentAnnotation: <\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nT extends Record<string, any> = Record<string, any>>() => AnnotationRoot<{\n    messages: import(\"../web.js\").BinaryOperatorAggregate<BaseMessage<import(\"@langchain/core/messages\").MessageStructure, import(\"@langchain/core/messages\").MessageType>[], Messages>;\n    structuredResponse: {\n        (): import(\"../web.js\").LastValue<T>;\n        (annotation: import(\"../web.js\").SingleReducer<T, T>): import(\"../web.js\").BinaryOperatorAggregate<T, T>;\n        Root: <S extends import(\"../web.js\").StateDefinition>(sd: S) => AnnotationRoot<S>;\n    };\n}>;\ndeclare const PreHookAnnotation: AnnotationRoot<{\n    llmInputMessages: import(\"../web.js\").BinaryOperatorAggregate<BaseMessage<import(\"@langchain/core/messages\").MessageStructure, import(\"@langchain/core/messages\").MessageType>[], Messages>;\n}>;\ntype PreHookAnnotation = typeof PreHookAnnotation;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype AnyAnnotationRoot = AnnotationRoot<any>;\ntype ToAnnotationRoot<A extends AnyAnnotationRoot | InteropZodObject> = A extends AnyAnnotationRoot ? A : A extends InteropZodObject ? AnnotationRoot<InteropZodToStateDefinition<A>> : never;\n/**\n * @deprecated `CreateReactAgentParams` has been moved to {@link https://www.npmjs.com/package/langchain langchain} package.\n * Update your import to `import { CreateAgentParams } from \"langchain\";`\n */\nexport type CreateReactAgentParams<A extends AnyAnnotationRoot | InteropZodObject = AnyAnnotationRoot, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nStructuredResponseType extends Record<string, any> = Record<string, any>, C extends AnyAnnotationRoot | InteropZodObject = AnyAnnotationRoot> = {\n    /** The chat model that can utilize OpenAI-style tool calling. */\n    llm: LanguageModelLike | ((state: ToAnnotationRoot<A>[\"State\"] & PreHookAnnotation[\"State\"], runtime: Runtime<ToAnnotationRoot<C>[\"State\"]>) => Promise<LanguageModelLike> | LanguageModelLike);\n    /** A list of tools or a ToolNode. */\n    tools: ToolNode | (ServerTool | ClientTool)[];\n    /**\n     * @deprecated Use prompt instead.\n     */\n    messageModifier?: MessageModifier;\n    /**\n     * @deprecated Use prompt instead.\n     */\n    stateModifier?: StateModifier;\n    /**\n     * An optional prompt for the LLM. This takes full graph state BEFORE the LLM is called and prepares the input to LLM.\n     *\n     * Can take a few different forms:\n     *\n     * - str: This is converted to a SystemMessage and added to the beginning of the list of messages in state[\"messages\"].\n     * - SystemMessage: this is added to the beginning of the list of messages in state[\"messages\"].\n     * - Function: This function should take in full graph state and the output is then passed to the language model.\n     * - Runnable: This runnable should take in full graph state and the output is then passed to the language model.\n     *\n     * Note:\n     * Prior to `v0.2.46`, the prompt was set using `stateModifier` / `messagesModifier` parameters.\n     * This is now deprecated and will be removed in a future release.\n     */\n    prompt?: Prompt;\n    /**\n     * Additional state schema for the agent.\n     */\n    stateSchema?: A;\n    /**\n     * An optional schema for the context.\n     */\n    contextSchema?: C;\n    /** An optional checkpoint saver to persist the agent's state. */\n    checkpointSaver?: BaseCheckpointSaver | boolean;\n    /** An optional checkpoint saver to persist the agent's state. Alias of \"checkpointSaver\". */\n    checkpointer?: BaseCheckpointSaver | boolean;\n    /** An optional list of node names to interrupt before running. */\n    interruptBefore?: N[] | All;\n    /** An optional list of node names to interrupt after running. */\n    interruptAfter?: N[] | All;\n    store?: BaseStore;\n    /**\n     * An optional schema for the final agent output.\n     *\n     * If provided, output will be formatted to match the given schema and returned in the 'structuredResponse' state key.\n     * If not provided, `structuredResponse` will not be present in the output state.\n     *\n     * Can be passed in as:\n     *   - Zod schema\n     *   - JSON schema\n     *   - { prompt, schema }, where schema is one of the above.\n     *        The prompt will be used together with the model that is being used to generate the structured response.\n     *\n     * @remarks\n     * **Important**: `responseFormat` requires the model to support `.withStructuredOutput()`.\n     *\n     * **Note**: The graph will make a separate call to the LLM to generate the structured response after the agent loop is finished.\n     * This is not the only strategy to get structured responses, see more options in [this guide](https://langchain-ai.github.io/langgraph/how-tos/react-agent-structured-output/).\n     */\n    responseFormat?: InteropZodType<StructuredResponseType> | StructuredResponseSchemaOptions<StructuredResponseType>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n     | Record<string, any>;\n    /**\n     * An optional name for the agent.\n     */\n    name?: string;\n    /**\n     * An optional description for the agent.\n     * This can be used to describe the agent to the underlying supervisor LLM.\n     */\n    description?: string | undefined;\n    /**\n     * Use to specify how to expose the agent name to the underlying supervisor LLM.\n  \n        - undefined: Relies on the LLM provider {@link AIMessage#name}. Currently, only OpenAI supports this.\n        - `\"inline\"`: Add the agent name directly into the content field of the {@link AIMessage} using XML-style tags.\n            Example: `\"How can I help you\"` -> `\"<name>agent_name</name><content>How can I help you?</content>\"`\n     */\n    includeAgentName?: \"inline\" | undefined;\n    /**\n     * An optional node to add before the `agent` node (i.e., the node that calls the LLM).\n     * Useful for managing long message histories (e.g., message trimming, summarization, etc.).\n     */\n    preModelHook?: RunnableLike<ToAnnotationRoot<A>[\"State\"] & PreHookAnnotation[\"State\"], ToAnnotationRoot<A>[\"Update\"] & PreHookAnnotation[\"Update\"], LangGraphRunnableConfig>;\n    /**\n     * An optional node to add after the `agent` node (i.e., the node that calls the LLM).\n     * Useful for implementing human-in-the-loop, guardrails, validation, or other post-processing.\n     */\n    postModelHook?: RunnableLike<ToAnnotationRoot<A>[\"State\"], ToAnnotationRoot<A>[\"Update\"], LangGraphRunnableConfig>;\n    /**\n     * Determines the version of the graph to create.\n     *\n     * Can be one of\n     * - `\"v1\"`: The tool node processes a single message. All tool calls in the message are\n     *           executed in parallel within the tool node.\n     * - `\"v2\"`: The tool node processes a single tool call. Tool calls are distributed across\n     *           multiple instances of the tool node using the Send API.\n     *\n     * @default `\"v1\"`\n     */\n    version?: \"v1\" | \"v2\";\n};\n/**\n * @deprecated `createReactAgent` has been moved to {@link https://www.npmjs.com/package/langchain langchain} package.\n * Update your import to `import { createAgent } from \"langchain\";`\n *\n * Creates a StateGraph agent that relies on a chat model utilizing tool calling.\n *\n * @example\n * ```ts\n * import { ChatOpenAI } from \"@langchain/openai\";\n * import { tool } from \"@langchain/core/tools\";\n * import { z } from \"zod\";\n * import { createReactAgent } from \"@langchain/langgraph/prebuilt\";\n *\n * const model = new ChatOpenAI({\n *   model: \"gpt-4o\",\n * });\n *\n * const getWeather = tool((input) => {\n *   if ([\"sf\", \"san francisco\"].includes(input.location.toLowerCase())) {\n *     return \"It's 60 degrees and foggy.\";\n *   } else {\n *     return \"It's 90 degrees and sunny.\";\n *   }\n * }, {\n *   name: \"get_weather\",\n *   description: \"Call to get the current weather.\",\n *   schema: z.object({\n *     location: z.string().describe(\"Location to get the weather for.\"),\n *   })\n * })\n *\n * const agent = createReactAgent({ llm: model, tools: [getWeather] });\n *\n * const inputs = {\n *   messages: [{ role: \"user\", content: \"what is the weather in SF?\" }],\n * };\n *\n * const stream = await agent.stream(inputs, { streamMode: \"values\" });\n *\n * for await (const { messages } of stream) {\n *   console.log(messages);\n * }\n * // Returns the messages in the state at each step of execution\n * ```\n */\nexport declare function createReactAgent<A extends AnyAnnotationRoot | InteropZodObject = typeof MessagesAnnotation, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nStructuredResponseFormat extends Record<string, any> = Record<string, any>, C extends AnyAnnotationRoot | InteropZodObject = AnyAnnotationRoot>(params: CreateReactAgentParams<A, StructuredResponseFormat, C>): CompiledStateGraph<ToAnnotationRoot<A>[\"State\"], ToAnnotationRoot<A>[\"Update\"], \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nany, typeof MessagesAnnotation.spec & ToAnnotationRoot<A>[\"spec\"], ReturnType<typeof createReactAgentAnnotation<StructuredResponseFormat>>[\"spec\"] & ToAnnotationRoot<A>[\"spec\"]>;\nexport {};\n"],"mappings":"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"}