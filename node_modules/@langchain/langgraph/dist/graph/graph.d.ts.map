{"version":3,"file":"graph.d.ts","names":["Runnable","RunnableConfig","Graph","DrawableGraph","All","BaseCheckpointSaver","RunnableLike","LangGraphRunnableConfig","PregelNode","Pregel","PregelParams","BaseChannel","END","Send","START","RunnableCallable","StateDefinition","StateType","BranchOptions","N","IO","BranchPathReturnValue","CallOptions","Record","Promise","NodeAction","S","U","C","Branch","Omit","NodeSpec","RunInput","RunOutput","AddNodeOptions","Nodes","NodeSpecType","Set","K","NodeInput","NodeOutput","checkpointer","interruptBefore","interruptAfter","name","CompiledGraph","State","Update","ContextType","InputType","OutputType","NodeReturnType","CommandType","StreamCustomType","builder"],"sources":["../../src/graph/graph.d.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { Runnable, RunnableConfig } from \"@langchain/core/runnables\";\nimport { Graph as DrawableGraph } from \"@langchain/core/runnables/graph\";\nimport { All, BaseCheckpointSaver } from \"@langchain/langgraph-checkpoint\";\nimport type { RunnableLike, LangGraphRunnableConfig } from \"../pregel/runnable_types.js\";\nimport { PregelNode } from \"../pregel/read.js\";\nimport { Pregel } from \"../pregel/index.js\";\nimport type { PregelParams } from \"../pregel/types.js\";\nimport { BaseChannel } from \"../channels/base.js\";\nimport { END, Send, START } from \"../constants.js\";\nimport { RunnableCallable } from \"../utils.js\";\nimport { StateDefinition, StateType } from \"./annotation.js\";\nexport interface BranchOptions<IO, N extends string, CallOptions extends LangGraphRunnableConfig = LangGraphRunnableConfig> {\n    source: N;\n    path: RunnableLike<IO, BranchPathReturnValue, CallOptions>;\n    pathMap?: Record<string, N | typeof END> | (N | typeof END)[];\n}\nexport type BranchPathReturnValue = string | Send | (string | Send)[] | Promise<string | Send | (string | Send)[]>;\ntype NodeAction<S, U, C extends StateDefinition> = RunnableLike<S, U extends object ? U & Record<string, any> : U, // eslint-disable-line @typescript-eslint/no-explicit-any\nLangGraphRunnableConfig<StateType<C>>>;\nexport declare class Branch<IO, N extends string, CallOptions extends LangGraphRunnableConfig = LangGraphRunnableConfig> {\n    path: Runnable<IO, BranchPathReturnValue, CallOptions>;\n    ends?: Record<string, N | typeof END>;\n    constructor(options: Omit<BranchOptions<IO, N, CallOptions>, \"source\">);\n    run(writer: (dests: (string | Send)[], config: LangGraphRunnableConfig) => Runnable | void | Promise<void>, reader?: (config: CallOptions) => IO): RunnableCallable<unknown, unknown>;\n    _route(input: IO, config: CallOptions, writer: (dests: (string | Send)[], config: LangGraphRunnableConfig) => Runnable | void | Promise<void>, reader?: (config: CallOptions) => IO\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ): Promise<Runnable | any>;\n}\nexport type NodeSpec<RunInput, RunOutput> = {\n    runnable: Runnable<RunInput, RunOutput>;\n    metadata?: Record<string, unknown>;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    subgraphs?: Pregel<any, any>[];\n    ends?: string[];\n    defer?: boolean;\n};\nexport type AddNodeOptions<Nodes extends string = string> = {\n    metadata?: Record<string, unknown>;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    subgraphs?: Pregel<any, any>[];\n    ends?: Nodes[];\n    defer?: boolean;\n};\nexport declare class Graph<N extends string = typeof START | typeof END, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRunInput = any, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRunOutput = any, NodeSpecType extends NodeSpec<RunInput, RunOutput> = NodeSpec<RunInput, RunOutput>, C extends StateDefinition = StateDefinition> {\n    nodes: Record<N, NodeSpecType>;\n    edges: Set<[N | typeof START, N | typeof END]>;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    branches: Record<string, Record<string, Branch<RunInput, N, any>>>;\n    entryPoint?: string;\n    compiled: boolean;\n    constructor();\n    protected warnIfCompiled(message: string): void;\n    get allEdges(): Set<[string, string]>;\n    addNode<K extends string, NodeInput = RunInput, NodeOutput = RunOutput>(nodes: Record<K, NodeAction<NodeInput, NodeOutput, C>> | [\n        key: K,\n        action: NodeAction<NodeInput, NodeOutput, C>,\n        options?: AddNodeOptions\n    ][]): Graph<N | K, RunInput, RunOutput>;\n    addNode<K extends string, NodeInput = RunInput, NodeOutput = RunOutput>(key: K, action: NodeAction<NodeInput, NodeOutput, C>, options?: AddNodeOptions): Graph<N | K, RunInput, RunOutput>;\n    addEdge(startKey: N | typeof START, endKey: N | typeof END): this;\n    addConditionalEdges(source: BranchOptions<RunInput, N, LangGraphRunnableConfig<StateType<C>>>): this;\n    addConditionalEdges(source: N, path: RunnableLike<RunInput, BranchPathReturnValue, LangGraphRunnableConfig<StateType<C>>>, pathMap?: BranchOptions<RunInput, N, LangGraphRunnableConfig<StateType<C>>>[\"pathMap\"]): this;\n    /**\n     * @deprecated use `addEdge(START, key)` instead\n     */\n    setEntryPoint(key: N): this;\n    /**\n     * @deprecated use `addEdge(key, END)` instead\n     */\n    setFinishPoint(key: N): this;\n    compile({ checkpointer, interruptBefore, interruptAfter, name }?: {\n        checkpointer?: BaseCheckpointSaver | false;\n        interruptBefore?: N[] | All;\n        interruptAfter?: N[] | All;\n        name?: string;\n    }): CompiledGraph<N>;\n    validate(interrupt?: string[]): void;\n}\nexport declare class CompiledGraph<N extends string, State = any, // eslint-disable-line @typescript-eslint/no-explicit-any\nUpdate = any, // eslint-disable-line @typescript-eslint/no-explicit-any\nContextType extends Record<string, any> = Record<string, any>, // eslint-disable-line @typescript-eslint/no-explicit-any\nInputType = any, // eslint-disable-line @typescript-eslint/no-explicit-any\nOutputType = any, // eslint-disable-line @typescript-eslint/no-explicit-any\nNodeReturnType = unknown, CommandType = unknown, StreamCustomType = any // eslint-disable-line @typescript-eslint/no-explicit-any\n> extends Pregel<Record<N | typeof START, PregelNode<State, Update>>, Record<N | typeof START | typeof END | string, BaseChannel>, ContextType & Record<string, any>, // eslint-disable-line @typescript-eslint/no-explicit-any\nInputType, OutputType, InputType, OutputType, NodeReturnType, CommandType, StreamCustomType> {\n    \"~NodeType\": N;\n    \"~NodeReturnType\": NodeReturnType;\n    \"~RunInput\": Update;\n    \"~RunOutput\": State;\n    builder: Graph<N, State, Update>;\n    constructor({ builder, ...rest }: {\n        builder: Graph<N, State, Update>;\n    } & PregelParams<Record<N | typeof START, PregelNode<State, Update>>, Record<N | typeof START | typeof END | string, BaseChannel>>);\n    attachNode(key: N, node: NodeSpec<State, Update>): void;\n    attachEdge(start: N | typeof START, end: N | typeof END): void;\n    attachBranch(start: N | typeof START, name: string, branch: Branch<State, N>): void;\n    /**\n     * Returns a drawable representation of the computation graph.\n     */\n    getGraphAsync(config?: RunnableConfig & {\n        xray?: boolean | number;\n    }): Promise<DrawableGraph>;\n    /**\n     * Returns a drawable representation of the computation graph.\n     *\n     * @deprecated Use getGraphAsync instead. The async method will be the default in the next minor core release.\n     */\n    getGraph(config?: RunnableConfig & {\n        xray?: boolean | number;\n    }): DrawableGraph;\n}\nexport {};\n"],"mappings":"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"}