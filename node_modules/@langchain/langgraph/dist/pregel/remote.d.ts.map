{"version":3,"file":"remote.d.ts","names":["Client","Checkpoint","ThreadState","Graph","DrawableGraph","Node","DrawableNode","Runnable","RunnableConfig","All","CheckpointListOptions","StreamEvent","IterableReadableStream","BaseChannel","LangGraphRunnableConfig","StrRecord","PregelInputType","PregelOptions","PregelOutputType","PregelNode","PregelParams","PregelInterface","StateSnapshot","RemoteGraphParams","Omit","Record","RemoteGraph","Nn","Cc","ContextType","Array","Partial","Promise","AsyncGenerator","AsyncIterableIterator","Generator"],"sources":["../../src/pregel/remote.d.ts"],"sourcesContent":["import { Client, type Checkpoint, type ThreadState } from \"@langchain/langgraph-sdk\";\nimport { Graph as DrawableGraph, Node as DrawableNode } from \"@langchain/core/runnables/graph\";\nimport { Runnable, RunnableConfig } from \"@langchain/core/runnables\";\nimport { All, CheckpointListOptions } from \"@langchain/langgraph-checkpoint\";\nimport { StreamEvent } from \"@langchain/core/tracers/log_stream\";\nimport { IterableReadableStream } from \"@langchain/core/utils/stream\";\nimport { BaseChannel, LangGraphRunnableConfig } from \"../web.js\";\nimport { StrRecord } from \"./algo.js\";\nimport { PregelInputType, PregelOptions, PregelOutputType } from \"./index.js\";\nimport { PregelNode } from \"./read.js\";\nimport { PregelParams, PregelInterface, StateSnapshot } from \"./types.js\";\nexport type RemoteGraphParams = Omit<PregelParams<StrRecord<string, PregelNode>, StrRecord<string, BaseChannel>>, \"channels\" | \"nodes\" | \"inputChannels\" | \"outputChannels\"> & {\n    graphId: string;\n    client?: Client;\n    url?: string;\n    apiKey?: string;\n    headers?: Record<string, string>;\n};\n/**\n * The `RemoteGraph` class is a client implementation for calling remote\n * APIs that implement the LangGraph Server API specification.\n *\n * For example, the `RemoteGraph` class can be used to call APIs from deployments\n * on LangGraph Cloud.\n *\n * `RemoteGraph` behaves the same way as a `StateGraph` and can be used directly as\n * a node in another `StateGraph`.\n *\n * @example\n * ```ts\n * import { RemoteGraph } from \"@langchain/langgraph/remote\";\n *\n * // Can also pass a LangGraph SDK client instance directly\n * const remoteGraph = new RemoteGraph({\n *   graphId: process.env.LANGGRAPH_REMOTE_GRAPH_ID!,\n *   apiKey: process.env.LANGGRAPH_REMOTE_GRAPH_API_KEY,\n *   url: process.env.LANGGRAPH_REMOTE_GRAPH_API_URL,\n * });\n *\n * const input = {\n *   messages: [\n *     {\n *       role: \"human\",\n *       content: \"Hello world!\",\n *     },\n *   ],\n * };\n *\n * const config = {\n *   configurable: { thread_id: \"threadId1\" },\n * };\n *\n * await remoteGraph.invoke(input, config);\n * ```\n */\nexport declare class RemoteGraph<Nn extends StrRecord<string, PregelNode> = StrRecord<string, PregelNode>, Cc extends StrRecord<string, BaseChannel> = StrRecord<string, BaseChannel>, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nContextType extends Record<string, any> = StrRecord<string, any>> extends Runnable<PregelInputType, PregelOutputType, PregelOptions<Nn, Cc, ContextType>> implements PregelInterface<Nn, Cc, ContextType> {\n    static lc_name(): string;\n    lc_namespace: string[];\n    lg_is_pregel: boolean;\n    config?: RunnableConfig;\n    graphId: string;\n    protected client: Client;\n    protected interruptBefore?: Array<keyof Nn> | All;\n    protected interruptAfter?: Array<keyof Nn> | All;\n    constructor(params: RemoteGraphParams);\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore Remove ignore when we remove support for 0.2 versions of core\n    withConfig(config: RunnableConfig): typeof this;\n    protected _sanitizeConfig(config: RunnableConfig): {\n        tags: string[];\n        metadata: Record<string, unknown>;\n        configurable: {\n            [k: string]: any;\n        };\n        recursion_limit: number | undefined;\n    };\n    protected _getConfig(checkpoint: Record<string, unknown>): RunnableConfig;\n    protected _getCheckpoint(config?: RunnableConfig): Checkpoint | undefined;\n    protected _createStateSnapshot(state: ThreadState): StateSnapshot;\n    invoke(input: PregelInputType, options?: Partial<PregelOptions<Nn, Cc, ContextType>>): Promise<PregelOutputType>;\n    streamEvents(input: PregelInputType, options: Partial<PregelOptions<Nn, Cc, ContextType>> & {\n        version: \"v1\" | \"v2\";\n    }): IterableReadableStream<StreamEvent>;\n    streamEvents(input: PregelInputType, options: Partial<PregelOptions<Nn, Cc, ContextType>> & {\n        version: \"v1\" | \"v2\";\n        encoding: never;\n    }): IterableReadableStream<never>;\n    _streamIterator(input: PregelInputType, options?: Partial<PregelOptions<Nn, Cc, ContextType>>): AsyncGenerator<PregelOutputType>;\n    updateState(inputConfig: LangGraphRunnableConfig, values: Record<string, unknown>, asNode?: string): Promise<RunnableConfig>;\n    getStateHistory(config: RunnableConfig, options?: CheckpointListOptions): AsyncIterableIterator<StateSnapshot>;\n    protected _getDrawableNodes(nodes: Array<{\n        id: string | number;\n        name?: string;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        data?: Record<string, any> | string;\n        metadata?: unknown;\n    }>): Record<string, DrawableNode>;\n    getState(config: RunnableConfig, options?: {\n        subgraphs?: boolean;\n    }): Promise<StateSnapshot>;\n    /** @deprecated Use getGraphAsync instead. The async method will become the default in the next minor release. */\n    getGraph(_?: RunnableConfig & {\n        xray?: boolean | number;\n    }): DrawableGraph;\n    /**\n     * Returns a drawable representation of the computation graph.\n     */\n    getGraphAsync(config?: RunnableConfig & {\n        xray?: boolean | number;\n    }): Promise<DrawableGraph>;\n    /** @deprecated Use getSubgraphsAsync instead. The async method will become the default in the next minor release. */\n    getSubgraphs(): Generator<[string, PregelInterface<Nn, Cc, ContextType>]>;\n    getSubgraphsAsync(namespace?: string, recurse?: boolean): AsyncGenerator<[string, PregelInterface<Nn, Cc, ContextType>]>;\n}\n"],"mappings":";;;;;;;;;;;;;KAWYuB,iBAAAA,GAAoBC,KAAKJ,aAAaL,kBAAkBI,aAAaJ,kBAAkBF;;EAAvFU,MAAAA,CAAAA,EAECvB,MAFDuB;EAAiB,GAAA,CAAA,EAAA,MAAA;QAAuCJ,CAAAA,EAAAA,MAAAA;SAAlBJ,CAAAA,EAKpCU,MALoCV,CAAAA,MAAAA,EAAAA,MAAAA,CAAAA;;;;;;;;AA4ClD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAesCP,cAfjBkB,WAeiBlB,CAAAA,WAfMO,SAeNP,CAAAA,MAAAA,EAfwBW,UAexBX,CAAAA,GAfsCO,SAetCP,CAAAA,MAAAA,EAfwDW,UAexDX,CAAAA,EAAAA,WAfgFO,SAehFP,CAAAA,MAAAA,EAfkGK,WAelGL,CAAAA,GAfiHO,SAejHP,CAAAA,MAAAA,EAfmIK,WAenIL,CAAAA;;oBAblBiB,MAqBiBA,CAAAA,MAAAA,EAAAA,GAAAA,CAAAA,GArBKV,SAqBLU,CAAAA,MAAAA,EAAAA,GAAAA,CAAAA,CAAAA,SArBqClB,QAqBrCkB,CArB8CT,eAqB9CS,EArB+DP,gBAqB/DO,EArBiFR,aAqBjFQ,CArB+FE,EAqB/FF,EArBmGG,EAqBnGH,EArBuGI,WAqBvGJ,CAAAA,CAAAA,YArBgIJ,eAqBhII,CArBgJE,EAqBhJF,EArBoJG,EAqBpJH,EArBwJI,WAqBxJJ,CAAAA,CAAAA;SAA0BjB,OAAAA,CAAAA,CAAAA,EAAAA,MAAAA;cACzBA,EAAAA,MAAAA,EAAAA;cAAiBP,EAAAA,OAAAA;QACbC,CAAAA,EAnB7BM,cAmB6BN;SAAcoB,EAAAA,MAAAA;YACtCN,MAAAA,EAlBIhB,MAkBJgB;YAAiDW,eAAAA,CAAAA,EAjBnCG,KAiBmCH,CAAAA,MAjBvBA,EAiBuBA,CAAAA,GAjBjBlB,GAiBiBkB;YAAIC,cAAAA,CAAAA,EAhBxCE,KAgBwCF,CAAAA,MAhB5BD,EAgB4BC,CAAAA,GAhBtBnB,GAgBsBmB;aAAIC,CAAAA,MAAAA,EAfnDN,iBAemDM;;;YAAwBX,CAAAA,MAAAA,EAZ5EV,cAY4EU,CAAAA,EAAAA,OAAAA,IAAAA;YAARc,eAAAA,CAAAA,MAAAA,EAXrDxB,cAWqDwB,CAAAA,EAAAA;IACnEhB,IAAAA,EAAAA,MAAAA,EAAAA;IAAgDW,QAAAA,EAVtDF,MAUsDE,CAAAA,MAAAA,EAAAA,OAAAA,CAAAA;IAAIC,YAAAA,EAAAA;MAAIC,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,EAAAA,GAAAA;IAAtBZ,CAAAA;IAARc,eAAAA,EAAAA,MAAAA,GAAAA,SAAAA;;YAE1CnB,UAAAA,CAAAA,UAAAA,EAN6Ba,MAM7Bb,CAAAA,MAAAA,EAAAA,OAAAA,CAAAA,CAAAA,EANuDJ,cAMvDI;YACgBI,cAAAA,CAAAA,MAAAA,CAAAA,EANcR,cAMdQ,CAAAA,EAN+Bf,YAM/Be,GAAAA,SAAAA;YAAgDW,oBAAAA,CAAAA,KAAAA,EAL9BzB,WAK8ByB,CAAAA,EALhBL,aAKgBK;QAAIC,CAAAA,KAAAA,EAJ1DZ,eAI0DY,EAAAA,OAAAA,CAAAA,EAJ/BG,OAI+BH,CAJvBX,aAIuBW,CAJTD,EAISC,EAJLA,EAIKA,EAJDC,WAICD,CAAAA,CAAAA,CAAAA,EAJeI,OAIfJ,CAJuBV,gBAIvBU,CAAAA;cAAIC,CAAAA,KAAAA,EAHxDb,eAGwDa,EAAAA,OAAAA,EAH9BE,OAG8BF,CAHtBZ,aAGsBY,CAHRF,EAGQE,EAHJD,EAGIC,EAHAA,WAGAA,CAAAA,CAAAA,GAAAA;IAAtBZ,OAAAA,EAAAA,IAAAA,GAAAA,IAAAA;MADlDL,sBAC0CmB,CADnBpB,WACmBoB,CAAAA;cAG1CnB,CAAAA,KAAAA,EAHgBI,eAGhBJ,EAAAA,OAAAA,EAH0CmB,OAG1CnB,CAHkDK,aAGlDL,CAHgEe,EAGhEf,EAHoEgB,EAGpEhB,EAHwEiB,WAGxEjB,CAAAA,CAAAA,GAAAA;IACmBI,OAAAA,EAAAA,IAAAA,GAAAA,IAAAA;IAAiDW,QAAAA,EAAAA,KAAAA;MADpEf,sBACwEgB,CAAAA,KAAAA,CAAAA;iBAAIC,CAAAA,KAAAA,EAAzDb,eAAyDa,EAAAA,OAAAA,CAAAA,EAA9BE,OAA8BF,CAAtBZ,aAAsBY,CAARF,EAAQE,EAAJD,EAAIC,EAAAA,WAAAA,CAAAA,CAAAA,CAAAA,EAAgBI,cAAhBJ,CAA+BX,gBAA/BW,CAAAA;aAAtBZ,CAAAA,WAAAA,EACjCH,uBADiCG,EAAAA,MAAAA,EACAQ,MADAR,CAAAA,MAAAA,EAAAA,OAAAA,CAAAA,EAAAA,MAAAA,CAAAA,EAAAA,MAAAA,CAAAA,EAC2Ce,OAD3Cf,CACmDT,cADnDS,CAAAA;iBAARc,CAAAA,MAAAA,EAE1BvB,cAF0BuB,EAAAA,OAAAA,CAAAA,EAEArB,qBAFAqB,CAAAA,EAEwBG,qBAFxBH,CAE8CT,aAF9CS,CAAAA;YAA6Db,iBAAAA,CAAAA,KAAAA,EAG5EY,KAH4EZ,CAAAA;IAAfe,EAAAA,EAAAA,MAAAA,GAAAA,MAAAA;IACvEnB,IAAAA,CAAAA,EAAAA,MAAAA;IAAiCW;IAAmDjB,IAAAA,CAAAA,EAMlGiB,MANkGjB,CAAAA,MAAAA,EAAAA,GAAAA,CAAAA,GAAAA,MAAAA;IAARwB,QAAAA,CAAAA,EAAAA,OAAAA;KAC7ExB,EAOnBiB,MAPmBjB,CAAAA,MAAAA,EAOJF,IAPIE,CAAAA;UAA0BE,CAAAA,MAAAA,EAQjCF,cARiCE,EAAAA,QAAAA,EAAAA;IAA8CY,SAAAA,CAAAA,EAAAA,OAAAA;MAU5FU,OAVsEE,CAU9DZ,aAV8DY,CAAAA;;UACvCJ,CAAAA,EAAAA,EAWtBtB,cAXsBsB,GAAAA;IAMfxB,IAAAA,CAAAA,EAAAA,OAAAA,GAAAA,MAAAA;MAOhBF,KAPCqB;;;;eAKQjB,CAAAA,OAAAA,EAMUA,cANVA,GAAAA;IAETJ,IAAAA,CAAAA,EAAAA,OAAAA,GAAAA,MAAAA;MAMA4B,OAFmBxB,CAEXJ,KAFWI,CAAAA;;cAEnBwB,CAAAA,CAAAA,EAEYG,SAFZH,CAAAA,CAAAA,MAAAA,EAE+BX,eAF/BW,CAE+CL,EAF/CK,EAEmDJ,EAFnDI,EAEuDH,WAFvDG,CAAAA,CAAAA,CAAAA;mBAE+CL,CAAAA,SAAAA,CAAAA,EAAAA,MAAAA,EAAAA,OAAAA,CAAAA,EAAAA,OAAAA,CAAAA,EACOM,cADPN,CAAAA,CAAAA,MAAAA,EAC+BN,eAD/BM,CAC+CA,EAD/CA,EACmDC,EADnDD,EACuDE,WADvDF,CAAAA,CAAAA,CAAAA"}