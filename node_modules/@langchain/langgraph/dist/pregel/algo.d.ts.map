{"version":3,"file":"algo.d.ts","names":["RunnableConfig","CallbackManagerForChainRun","All","BaseCheckpointSaver","Checkpoint","ReadonlyCheckpoint","PendingWrite","BaseStore","CheckpointPendingWrite","BaseChannel","PregelNode","PregelExecutableTask","PregelTaskDescription","SimpleTaskPath","TaskPath","IterableReadableWritableStream","StrRecord","K","T","WritesProtocol","C","increment","shouldInterrupt","PropertyKey","N","_localRead","Record","Cc","Array","_localWrite","_applyWrites","Set","NextTaskExtraFields","NextTaskExtraFieldsWithStore","NextTaskExtraFieldsWithoutStore","_prepareNextTasks","Nn","_prepareSingleTask"],"sources":["../../src/pregel/algo.d.ts"],"sourcesContent":["/* eslint-disable no-param-reassign */\nimport { RunnableConfig } from \"@langchain/core/runnables\";\nimport { CallbackManagerForChainRun } from \"@langchain/core/callbacks/manager\";\nimport { All, BaseCheckpointSaver, Checkpoint, ReadonlyCheckpoint, type PendingWrite, BaseStore, CheckpointPendingWrite } from \"@langchain/langgraph-checkpoint\";\nimport { BaseChannel } from \"../channels/base.js\";\nimport { PregelNode } from \"./read.js\";\nimport { PregelExecutableTask, PregelTaskDescription, SimpleTaskPath, TaskPath } from \"./types.js\";\nimport { IterableReadableWritableStream } from \"./stream.js\";\n/**\n * Construct a type with a set of properties K of type T\n */\nexport type StrRecord<K extends string, T> = {\n    [P in K]: T;\n};\nexport type WritesProtocol<C = string> = {\n    name: string;\n    writes: PendingWrite<C>[];\n    triggers: string[];\n    path?: TaskPath;\n};\nexport declare const increment: (current?: number | undefined) => number;\nexport declare function shouldInterrupt<N extends PropertyKey, C extends PropertyKey>(checkpoint: Checkpoint, interruptNodes: All | N[], tasks: PregelExecutableTask<N, C>[]): boolean;\nexport declare function _localRead<Cc extends Record<string, BaseChannel>>(checkpoint: ReadonlyCheckpoint, channels: Cc, task: WritesProtocol<keyof Cc>, select: Array<keyof Cc> | keyof Cc, fresh?: boolean): Record<string, unknown> | unknown;\nexport declare function _localWrite(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ncommit: (writes: [string, any][]) => any, processes: Record<string, PregelNode>, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nwrites: [string, any][]): void;\nexport declare function _applyWrites<Cc extends Record<string, BaseChannel>>(checkpoint: Checkpoint, channels: Cc, tasks: WritesProtocol<keyof Cc>[], \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ngetNextVersion: ((version: any) => any) | undefined, triggerToNodes: Record<string, string[]> | undefined): Set<string>;\nexport type NextTaskExtraFields = {\n    step: number;\n    isResuming?: boolean;\n    checkpointer?: BaseCheckpointSaver;\n    manager?: CallbackManagerForChainRun;\n    store?: BaseStore;\n    stream?: IterableReadableWritableStream;\n    triggerToNodes?: Record<string, string[]>;\n    updatedChannels?: Set<string>;\n};\nexport type NextTaskExtraFieldsWithStore = NextTaskExtraFields & {\n    store?: BaseStore;\n};\nexport type NextTaskExtraFieldsWithoutStore = NextTaskExtraFields & {\n    store?: never;\n};\nexport declare function _prepareNextTasks<Nn extends StrRecord<string, PregelNode>, Cc extends StrRecord<string, BaseChannel>>(checkpoint: ReadonlyCheckpoint, pendingWrites: [string, string, unknown][] | undefined, processes: Nn, channels: Cc, config: RunnableConfig, forExecution: false, extra: NextTaskExtraFieldsWithoutStore): Record<string, PregelTaskDescription>;\nexport declare function _prepareNextTasks<Nn extends StrRecord<string, PregelNode>, Cc extends StrRecord<string, BaseChannel>>(checkpoint: ReadonlyCheckpoint, pendingWrites: [string, string, unknown][] | undefined, processes: Nn, channels: Cc, config: RunnableConfig, forExecution: true, extra: NextTaskExtraFieldsWithStore): Record<string, PregelExecutableTask<keyof Nn, keyof Cc>>;\nexport declare function _prepareSingleTask<Nn extends StrRecord<string, PregelNode>, Cc extends StrRecord<string, BaseChannel>>(taskPath: SimpleTaskPath, checkpoint: ReadonlyCheckpoint, pendingWrites: CheckpointPendingWrite[] | undefined, processes: Nn, channels: Cc, config: RunnableConfig, forExecution: false, extra: NextTaskExtraFields): PregelTaskDescription | undefined;\nexport declare function _prepareSingleTask<Nn extends StrRecord<string, PregelNode>, Cc extends StrRecord<string, BaseChannel>>(taskPath: TaskPath, checkpoint: ReadonlyCheckpoint, pendingWrites: CheckpointPendingWrite[] | undefined, processes: Nn, channels: Cc, config: RunnableConfig, forExecution: true, extra: NextTaskExtraFields): PregelExecutableTask<keyof Nn, keyof Cc> | undefined;\nexport declare function _prepareSingleTask<Nn extends StrRecord<string, PregelNode>, Cc extends StrRecord<string, BaseChannel>>(taskPath: TaskPath, checkpoint: ReadonlyCheckpoint, pendingWrites: CheckpointPendingWrite[] | undefined, processes: Nn, channels: Cc, config: RunnableConfig, forExecution: boolean, extra: NextTaskExtraFieldsWithStore): PregelTaskDescription | PregelExecutableTask<keyof Nn, keyof Cc> | undefined;\n"],"mappings":";;;;;;;;;KAWYgB,yCACFC,IAAIC"}