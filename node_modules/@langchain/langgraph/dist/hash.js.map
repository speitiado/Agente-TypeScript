{"version":3,"file":"hash.js","names":["n","data"],"sources":["../src/hash.ts"],"sourcesContent":["/* Converted from https://github.com/i404788/xxh3-ts\n\nBSD 2-Clause License\n\nCopyright (c) 2019, i404788\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\nconst n = (n: number | string) => BigInt(n);\nconst view = (data: Uint8Array | DataView, offset: number = 0) =>\n  new DataView(data.buffer, data.byteOffset + offset, data.byteLength - offset);\n\nconst PRIME32_1 = n(\"0x9E3779B1\"); // 0b10011110001101110111100110110001\nconst PRIME32_2 = n(\"0x85EBCA77\"); // 0b10000101111010111100101001110111\nconst PRIME32_3 = n(\"0xC2B2AE3D\"); // 0b11000010101100101010111000111101\nconst PRIME64_1 = n(\"0x9E3779B185EBCA87\"); // 0b1001111000110111011110011011000110000101111010111100101010000111\nconst PRIME64_2 = n(\"0xC2B2AE3D27D4EB4F\"); // 0b1100001010110010101011100011110100100111110101001110101101001111\nconst PRIME64_3 = n(\"0x165667B19E3779F9\"); // 0b0001011001010110011001111011000110011110001101110111100111111001\nconst PRIME64_4 = n(\"0x85EBCA77C2B2AE63\"); // 0b1000010111101011110010100111011111000010101100101010111001100011\nconst PRIME64_5 = n(\"0x27D4EB2F165667C5\"); // 0b0010011111010100111010110010111100010110010101100110011111000101\nconst PRIME_MX1 = n(\"0x165667919E3779F9\"); // 0b0001011001010110011001111001000110011110001101110111100111111001\nconst PRIME_MX2 = n(\"0x9FB21C651E98DF25\"); // 0b1001111110110010000111000110010100011110100110001101111100100101\n\nconst hexToUint8Array = (hex: string) => {\n  const strLen = hex.length;\n  if (strLen % 2 !== 0) {\n    throw new Error(\"String should have an even number of characters\");\n  }\n\n  const maxLength = strLen / 2;\n  const bytes = new Uint8Array(maxLength);\n\n  let read = 0;\n  let write = 0;\n  while (write < maxLength) {\n    const slice = hex.slice(read, (read += 2));\n    bytes[write] = Number.parseInt(slice, 16);\n    write += 1;\n  }\n\n  return view(bytes);\n};\n\nconst kkey = hexToUint8Array(\n  \"b8fe6c3923a44bbe7c01812cf721ad1cded46de9839097db7240a4a4b7b3671fcb79e64eccc0e578825ad07dccff7221b8084674f743248ee03590e6813a264c3c2852bb91c300cb88d0658b1b532ea371644897a20df94e3819ef46a9deacd8a8fa763fe39c343ff9dcbbc7c70b4f1d8a51e04bcdb45931c89f7ec9d9787364eac5ac8334d3ebc3c581a0fffa1363eb170ddd51b7f0da49d316552629d4689e2b16be587d47a1fc8ff8b8d17ad031ce45cb3a8f95160428afd7fbcabb4b407e\"\n);\n\nconst mask128 = (n(1) << n(128)) - n(1);\nconst mask64 = (n(1) << n(64)) - n(1);\nconst mask32 = (n(1) << n(32)) - n(1);\nconst STRIPE_LEN = 64;\nconst ACC_NB = STRIPE_LEN / 8;\nconst _U64 = 8;\nconst _U32 = 4;\n\nfunction assert(a: boolean) {\n  if (!a) throw new Error(\"Assert failed\");\n}\n\nfunction bswap64(a: bigint) {\n  const scratchbuf = new DataView(new ArrayBuffer(8));\n  scratchbuf.setBigUint64(0, a, true);\n  return scratchbuf.getBigUint64(0, false);\n}\n\nfunction bswap32(input: bigint) {\n  let a = input;\n  a = ((a & n(0x0000ffff)) << n(16)) | ((a & n(0xffff0000)) >> n(16));\n  a = ((a & n(0x00ff00ff)) << n(8)) | ((a & n(0xff00ff00)) >> n(8));\n  return a; // 32-bit\n}\n\nfunction XXH_mult32to64(a: bigint, b: bigint) {\n  return ((a & mask32) * (b & mask32)) & mask64;\n}\n\nfunction rotl32(a: bigint, b: bigint) {\n  return ((a << b) | (a >> (n(32) - b))) & mask32;\n}\n\nfunction XXH3_accumulate_512(\n  acc: BigUint64Array,\n  dataView: DataView,\n  keyView: DataView\n) {\n  for (let i = 0; i < ACC_NB; i += 1) {\n    const data_val = dataView.getBigUint64(i * 8, true);\n    const data_key = data_val ^ keyView.getBigUint64(i * 8, true);\n    acc[i ^ 1] += data_val;\n    acc[i] += XXH_mult32to64(data_key, data_key >> n(32));\n  }\n  return acc;\n}\n\nfunction XXH3_accumulate(\n  acc: BigUint64Array,\n  dataView: DataView,\n  keyView: DataView,\n  nbStripes: number\n) {\n  for (let n = 0; n < nbStripes; n += 1) {\n    XXH3_accumulate_512(\n      acc,\n      view(dataView, n * STRIPE_LEN),\n      view(keyView, n * 8)\n    );\n  }\n  return acc;\n}\n\nfunction XXH3_scrambleAcc(acc: BigUint64Array, key: DataView) {\n  for (let i = 0; i < ACC_NB; i += 1) {\n    const key64 = key.getBigUint64(i * 8, true);\n    let acc64 = acc[i];\n    acc64 = xorshift64(acc64, n(47));\n    acc64 ^= key64;\n    acc64 *= PRIME32_1;\n    acc[i] = acc64 & mask64;\n  }\n  return acc;\n}\n\nfunction XXH3_mix2Accs(acc: BigUint64Array, key: DataView) {\n  return XXH3_mul128_fold64(\n    acc[0] ^ key.getBigUint64(0, true),\n    acc[1] ^ key.getBigUint64(_U64, true)\n  );\n}\n\nfunction XXH3_mergeAccs(acc: BigUint64Array, key: DataView, start: bigint) {\n  let result64 = start;\n\n  result64 += XXH3_mix2Accs(acc.slice(0), view(key, 0 * _U32));\n  result64 += XXH3_mix2Accs(acc.slice(2), view(key, 4 * _U32));\n  result64 += XXH3_mix2Accs(acc.slice(4), view(key, 8 * _U32));\n  result64 += XXH3_mix2Accs(acc.slice(6), view(key, 12 * _U32));\n\n  return XXH3_avalanche(result64 & mask64);\n}\n\nfunction XXH3_hashLong(\n  input: BigUint64Array,\n  data: DataView,\n  secret: DataView,\n  f_acc: (acc: BigUint64Array, data: DataView, key: DataView) => BigUint64Array,\n  f_scramble: (acc: BigUint64Array, key: DataView) => BigUint64Array\n) {\n  let acc = input;\n  const nbStripesPerBlock = Math.floor((secret.byteLength - STRIPE_LEN) / 8);\n  const block_len = STRIPE_LEN * nbStripesPerBlock;\n  const nb_blocks = Math.floor((data.byteLength - 1) / block_len);\n\n  for (let n = 0; n < nb_blocks; n += 1) {\n    acc = XXH3_accumulate(\n      acc,\n      view(data, n * block_len),\n      secret,\n      nbStripesPerBlock\n    );\n    acc = f_scramble(acc, view(secret, secret.byteLength - STRIPE_LEN));\n  }\n\n  {\n    // Partial block\n    const nbStripes = Math.floor(\n      (data.byteLength - 1 - block_len * nb_blocks) / STRIPE_LEN\n    );\n    acc = XXH3_accumulate(\n      acc,\n      view(data, nb_blocks * block_len),\n      secret,\n      nbStripes\n    );\n\n    // Last Stripe\n    acc = f_acc(\n      acc,\n      view(data, data.byteLength - STRIPE_LEN),\n      view(secret, secret.byteLength - STRIPE_LEN - 7)\n    );\n  }\n  return acc;\n}\n\nfunction XXH3_hashLong_128b(data: DataView, secret: DataView) {\n  let acc = new BigUint64Array([\n    PRIME32_3,\n    PRIME64_1,\n    PRIME64_2,\n    PRIME64_3,\n    PRIME64_4,\n    PRIME32_2,\n    PRIME64_5,\n    PRIME32_1,\n  ]);\n  assert(data.byteLength > 128);\n\n  acc = XXH3_hashLong(\n    acc,\n    data,\n    secret,\n    XXH3_accumulate_512,\n    XXH3_scrambleAcc\n  ) as BigUint64Array<ArrayBuffer>;\n\n  /* converge into final hash */\n  assert(acc.length * 8 === 64);\n  {\n    const low64 = XXH3_mergeAccs(\n      acc,\n      view(secret, 11),\n      (n(data.byteLength) * PRIME64_1) & mask64\n    );\n    const high64 = XXH3_mergeAccs(\n      acc,\n      view(secret, secret.byteLength - STRIPE_LEN - 11),\n      ~(n(data.byteLength) * PRIME64_2) & mask64\n    );\n    return (high64 << n(64)) | low64;\n  }\n}\n\nfunction XXH3_mul128_fold64(a: bigint, b: bigint) {\n  const lll = (a * b) & mask128;\n  return (lll & mask64) ^ (lll >> n(64));\n}\n\nfunction XXH3_mix16B(dataView: DataView, keyView: DataView, seed: bigint) {\n  return XXH3_mul128_fold64(\n    (dataView.getBigUint64(0, true) ^ (keyView.getBigUint64(0, true) + seed)) &\n      mask64,\n    (dataView.getBigUint64(8, true) ^ (keyView.getBigUint64(8, true) - seed)) &\n      mask64\n  );\n}\n\nfunction XXH3_mix32B(\n  acc: bigint,\n  data1: DataView,\n  data2: DataView,\n  key: DataView,\n  seed: bigint\n) {\n  let accl = acc & mask64;\n  let acch = (acc >> n(64)) & mask64;\n\n  accl += XXH3_mix16B(data1, key, seed);\n  accl ^= data2.getBigUint64(0, true) + data2.getBigUint64(8, true);\n  accl &= mask64;\n  acch += XXH3_mix16B(data2, view(key, 16), seed);\n  acch ^= data1.getBigUint64(0, true) + data1.getBigUint64(8, true);\n  acch &= mask64;\n\n  return (acch << n(64)) | accl;\n}\n\nfunction XXH3_avalanche(input: bigint) {\n  let h64 = input;\n  h64 ^= h64 >> n(37);\n  h64 *= PRIME_MX1;\n  h64 &= mask64;\n  h64 ^= h64 >> n(32);\n  return h64;\n}\n\nfunction XXH3_avalanche64(input: bigint) {\n  let h64 = input;\n  h64 ^= h64 >> n(33);\n  h64 *= PRIME64_2;\n  h64 &= mask64; // 64-bit\n  h64 ^= h64 >> n(29);\n  h64 *= PRIME64_3;\n  h64 &= mask64;\n  h64 ^= h64 >> n(32);\n  return h64;\n}\n\nfunction XXH3_len_1to3_128b(data: DataView, key32: DataView, seed: bigint) {\n  const len = data.byteLength;\n  assert(len > 0 && len <= 3);\n\n  const combined =\n    n(data.getUint8(len - 1)) |\n    n(len << 8) |\n    n(data.getUint8(0) << 16) |\n    n(data.getUint8(len >> 1) << 24);\n\n  const blow =\n    (n(key32.getUint32(0, true)) ^ n(key32.getUint32(4, true))) + seed;\n  const low = (combined ^ blow) & mask64;\n  const bhigh =\n    (n(key32.getUint32(8, true)) ^ n(key32.getUint32(12, true))) - seed;\n  const high = (rotl32(bswap32(combined), n(13)) ^ bhigh) & mask64;\n\n  return ((XXH3_avalanche64(high) & mask64) << n(64)) | XXH3_avalanche64(low);\n}\n\nfunction xorshift64(b: bigint, shift: bigint) {\n  return b ^ (b >> shift);\n}\n\nfunction XXH3_len_4to8_128b(data: DataView, key32: DataView, seed: bigint) {\n  const len = data.byteLength;\n  assert(len >= 4 && len <= 8);\n\n  {\n    const l1 = data.getUint32(0, true);\n    const l2 = data.getUint32(len - 4, true);\n    const l64 = n(l1) | (n(l2) << n(32));\n    const bitflip =\n      ((key32.getBigUint64(16, true) ^ key32.getBigUint64(24, true)) + seed) &\n      mask64;\n    const keyed = l64 ^ bitflip;\n    let m128 = (keyed * (PRIME64_1 + (n(len) << n(2)))) & mask128;\n    m128 += (m128 & mask64) << n(65);\n    m128 &= mask128;\n    m128 ^= m128 >> n(67);\n\n    return (\n      xorshift64(\n        (xorshift64(m128 & mask64, n(35)) * PRIME_MX2) & mask64,\n        n(28)\n      ) |\n      (XXH3_avalanche(m128 >> n(64)) << n(64))\n    );\n  }\n}\n\nfunction XXH3_len_9to16_128b(data: DataView, key64: DataView, seed: bigint) {\n  const len = data.byteLength;\n  assert(len >= 9 && len <= 16);\n\n  {\n    const bitflipl =\n      ((key64.getBigUint64(32, true) ^ key64.getBigUint64(40, true)) + seed) &\n      mask64;\n    const bitfliph =\n      ((key64.getBigUint64(48, true) ^ key64.getBigUint64(56, true)) - seed) &\n      mask64;\n    const ll1 = data.getBigUint64(0, true);\n    let ll2 = data.getBigUint64(len - 8, true);\n\n    let m128 = (ll1 ^ ll2 ^ bitflipl) * PRIME64_1;\n\n    const m128_l = (m128 & mask64) + (n(len - 1) << n(54));\n    m128 = (m128 & (mask128 ^ mask64)) | m128_l; // eqv. to adding only to lower 64b\n    ll2 ^= bitfliph;\n\n    m128 += (ll2 + (ll2 & mask32) * (PRIME32_2 - n(1))) << n(64);\n    m128 &= mask128;\n    m128 ^= bswap64(m128 >> n(64));\n    let h128 = (m128 & mask64) * PRIME64_2;\n    h128 += ((m128 >> n(64)) * PRIME64_2) << n(64);\n    h128 &= mask128;\n\n    return (\n      XXH3_avalanche(h128 & mask64) | (XXH3_avalanche(h128 >> n(64)) << n(64))\n    );\n  }\n}\n\nfunction XXH3_len_0to16_128b(data: DataView, seed: bigint) {\n  const len = data.byteLength;\n  assert(len <= 16);\n\n  if (len > 8) return XXH3_len_9to16_128b(data, kkey, seed);\n  if (len >= 4) return XXH3_len_4to8_128b(data, kkey, seed);\n  if (len > 0) return XXH3_len_1to3_128b(data, kkey, seed);\n\n  return (\n    XXH3_avalanche64(\n      seed ^ kkey.getBigUint64(64, true) ^ kkey.getBigUint64(72, true)\n    ) |\n    (XXH3_avalanche64(\n      seed ^ kkey.getBigUint64(80, true) ^ kkey.getBigUint64(88, true)\n    ) <<\n      n(64))\n  );\n}\n\nfunction inv64(x: bigint) {\n  // NOTE: `AND` fixes signedness (but because of 2's complement we need to re-add 1)\n  return (~x + n(1)) & mask64;\n}\n\nfunction XXH3_len_17to128_128b(data: DataView, secret: DataView, seed: bigint) {\n  let acc = (n(data.byteLength) * PRIME64_1) & mask64;\n  let i = n(data.byteLength - 1) / n(32);\n  while (i >= 0) {\n    const ni = Number(i);\n    acc = XXH3_mix32B(\n      acc,\n      view(data, 16 * ni),\n      view(data, data.byteLength - 16 * (ni + 1)),\n      view(secret, 32 * ni),\n      seed\n    );\n    i -= n(1);\n  }\n\n  let h128l = (acc + (acc >> n(64))) & mask64;\n  h128l = XXH3_avalanche(h128l);\n  let h128h =\n    (acc & mask64) * PRIME64_1 +\n    (acc >> n(64)) * PRIME64_4 +\n    ((n(data.byteLength) - seed) & mask64) * PRIME64_2;\n  h128h &= mask64;\n\n  h128h = inv64(XXH3_avalanche(h128h));\n  return h128l | (h128h << n(64));\n}\n\nfunction XXH3_len_129to240_128b(\n  data: DataView,\n  secret: DataView,\n  seed: bigint\n) {\n  let acc = (n(data.byteLength) * PRIME64_1) & mask64;\n  for (let i = 32; i < 160; i += 32) {\n    acc = XXH3_mix32B(\n      acc,\n      view(data, i - 32),\n      view(data, i - 16),\n      view(secret, i - 32),\n      seed\n    );\n  }\n  acc = XXH3_avalanche(acc & mask64) | (XXH3_avalanche(acc >> n(64)) << n(64));\n  for (let i = 160; i <= data.byteLength; i += 32) {\n    acc = XXH3_mix32B(\n      acc,\n      view(data, i - 32),\n      view(data, i - 16),\n      view(secret, 3 + i - 160),\n      seed\n    );\n  }\n  acc = XXH3_mix32B(\n    acc,\n    view(data, data.byteLength - 16),\n    view(data, data.byteLength - 32),\n    view(secret, 136 - 17 - 16),\n    inv64(seed)\n  );\n\n  let h128l = (acc + (acc >> n(64))) & mask64;\n  h128l = XXH3_avalanche(h128l);\n  let h128h =\n    (acc & mask64) * PRIME64_1 +\n    (acc >> n(64)) * PRIME64_4 +\n    ((n(data.byteLength) - seed) & mask64) * PRIME64_2;\n  h128h &= mask64;\n\n  h128h = inv64(XXH3_avalanche(h128h));\n  return h128l | (h128h << n(64));\n}\n\n// 16 byte min input\nexport function XXH3(input: Uint8Array | string, seed: bigint = n(0)) {\n  const encoder = new TextEncoder();\n  const data = view(typeof input === \"string\" ? encoder.encode(input) : input);\n  const len = data.byteLength;\n\n  const hexDigest = (data: bigint) => data.toString(16).padStart(32, \"0\");\n  if (len <= 16) return hexDigest(XXH3_len_0to16_128b(data, seed));\n  if (len <= 128) return hexDigest(XXH3_len_17to128_128b(data, kkey, seed));\n  if (len <= 240) return hexDigest(XXH3_len_129to240_128b(data, kkey, seed));\n  return hexDigest(XXH3_hashLong_128b(data, kkey));\n}\n\nexport function isXXH3(value: string): boolean {\n  // Check if the given string matches the format of XXH3 (128 bit hex digest).\n  return /^[0-9a-f]{32}$/.test(value);\n}\n"],"mappings":"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"}