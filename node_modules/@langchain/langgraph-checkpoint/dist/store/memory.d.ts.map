{"version":3,"file":"memory.d.ts","names":["BaseStore","OperationResults","Operation","IndexConfig","InMemoryStore","Op","Promise","MemoryStore"],"sources":["../../src/store/memory.d.ts"],"sourcesContent":["import { BaseStore, type OperationResults, type Operation, type IndexConfig } from \"./base.js\";\n/**\n * In-memory key-value store with optional vector search.\n *\n * A lightweight store implementation using JavaScript Maps. Supports basic\n * key-value operations and vector search when configured with embeddings.\n *\n * @example\n * ```typescript\n * // Basic key-value storage\n * const store = new InMemoryStore();\n * await store.put([\"users\", \"123\"], \"prefs\", { theme: \"dark\" });\n * const item = await store.get([\"users\", \"123\"], \"prefs\");\n *\n * // Vector search with embeddings\n * import { OpenAIEmbeddings } from \"@langchain/openai\";\n * const store = new InMemoryStore({\n *   index: {\n *     dims: 1536,\n *     embeddings: new OpenAIEmbeddings({ modelName: \"text-embedding-3-small\" }),\n *   }\n * });\n *\n * // Store documents\n * await store.put([\"docs\"], \"doc1\", { text: \"Python tutorial\" });\n * await store.put([\"docs\"], \"doc2\", { text: \"TypeScript guide\" });\n *\n * // Search by similarity\n * const results = await store.search([\"docs\"], { query: \"python programming\" });\n * ```\n *\n * **Warning**: This store keeps all data in memory. Data is lost when the process exits.\n * For persistence, use a database-backed store.\n */\nexport declare class InMemoryStore extends BaseStore {\n    private data;\n    // Namespace -> Key -> Path/field -> Vector\n    private vectors;\n    private _indexConfig?;\n    constructor(options?: {\n        index?: IndexConfig;\n    });\n    batch<Op extends readonly Operation[]>(operations: Op): Promise<OperationResults<Op>>;\n    private getOperation;\n    private putOperation;\n    private listNamespacesOperation;\n    private doesMatch;\n    private filterItems;\n    private scoreResults;\n    private paginateResults;\n    private extractTexts;\n    private insertVectors;\n    private getVectors;\n    private cosineSimilarity;\n    get indexConfig(): IndexConfig | undefined;\n}\n/** @deprecated Alias for InMemoryStore */\nexport declare class MemoryStore extends InMemoryStore {\n}\n"],"mappings":";;;;;;AAkCA;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;;;;;;;cAvBqBI,aAAAA,SAAsBJ,SAAAA;;;;;;YAM3BG;;4BAEcD,yBAAyBG,KAAKC,QAAQL,iBAAiBI;;;;;;;;;;;;qBAY9DF;;;cAGFI,WAAAA,SAAoBH,aAAAA"}