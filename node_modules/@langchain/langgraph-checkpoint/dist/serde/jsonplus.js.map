{"version":3,"file":"jsonplus.js","names":["revivedObj: any","constructor: any"],"sources":["../../src/serde/jsonplus.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-instanceof/no-instanceof */\nimport { load } from \"@langchain/core/load\";\nimport { SerializerProtocol } from \"./base.js\";\nimport { stringify } from \"./utils/fast-safe-stringify/index.js\";\n\nfunction isLangChainSerializedObject(value: Record<string, unknown>) {\n  return (\n    value !== null &&\n    value.lc === 1 &&\n    value.type === \"constructor\" &&\n    Array.isArray(value.id)\n  );\n}\n\n/**\n * The replacer in stringify does not allow delegation to built-in LangChain\n * serialization methods, and instead immediately calls `.toJSON()` and\n * continues to stringify subfields.\n *\n * We therefore must start from the most nested elements in the input and\n * deserialize upwards rather than top-down.\n */\nasync function _reviver(value: any): Promise<any> {\n  if (value && typeof value === \"object\") {\n    if (Array.isArray(value)) {\n      const revivedArray = await Promise.all(\n        value.map((item) => _reviver(item))\n      );\n      return revivedArray;\n    } else {\n      const revivedObj: any = {};\n      for (const [k, v] of Object.entries(value)) {\n        revivedObj[k] = await _reviver(v);\n      }\n\n      if (revivedObj.lc === 2 && revivedObj.type === \"undefined\") {\n        return undefined;\n      } else if (\n        revivedObj.lc === 2 &&\n        revivedObj.type === \"constructor\" &&\n        Array.isArray(revivedObj.id)\n      ) {\n        try {\n          const constructorName = revivedObj.id[revivedObj.id.length - 1];\n          let constructor: any;\n\n          switch (constructorName) {\n            case \"Set\":\n              constructor = Set;\n              break;\n            case \"Map\":\n              constructor = Map;\n              break;\n            case \"RegExp\":\n              constructor = RegExp;\n              break;\n            case \"Error\":\n              constructor = Error;\n              break;\n            default:\n              return revivedObj;\n          }\n          if (revivedObj.method) {\n            return (constructor as any)[revivedObj.method](\n              ...(revivedObj.args || [])\n            );\n          } else {\n            return new (constructor as any)(...(revivedObj.args || []));\n          }\n        } catch (error) {\n          return revivedObj;\n        }\n      } else if (isLangChainSerializedObject(revivedObj)) {\n        return load(JSON.stringify(revivedObj));\n      }\n\n      return revivedObj;\n    }\n  }\n  return value;\n}\n\nfunction _encodeConstructorArgs(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  constructor: Function,\n  method?: string,\n  args?: any[],\n  kwargs?: Record<string, any>\n): object {\n  return {\n    lc: 2,\n    type: \"constructor\",\n    id: [constructor.name],\n    method: method ?? null,\n    args: args ?? [],\n    kwargs: kwargs ?? {},\n  };\n}\n\nfunction _default(obj: any): any {\n  if (obj === undefined) {\n    return {\n      lc: 2,\n      type: \"undefined\",\n    };\n  } else if (obj instanceof Set || obj instanceof Map) {\n    return _encodeConstructorArgs(obj.constructor, undefined, [\n      Array.from(obj),\n    ]);\n  } else if (obj instanceof RegExp) {\n    return _encodeConstructorArgs(RegExp, undefined, [obj.source, obj.flags]);\n  } else if (obj instanceof Error) {\n    return _encodeConstructorArgs(obj.constructor, undefined, [obj.message]);\n    // TODO: Remove special case\n  } else if (obj?.lg_name === \"Send\") {\n    return {\n      node: obj.node,\n      args: obj.args,\n    };\n  } else {\n    return obj;\n  }\n}\n\nexport class JsonPlusSerializer implements SerializerProtocol {\n  protected _dumps(obj: any): Uint8Array {\n    const encoder = new TextEncoder();\n    return encoder.encode(\n      stringify(obj, (_: string, value: any) => {\n        return _default(value);\n      })\n    );\n  }\n\n  async dumpsTyped(obj: any): Promise<[string, Uint8Array]> {\n    if (obj instanceof Uint8Array) {\n      return [\"bytes\", obj];\n    } else {\n      return [\"json\", this._dumps(obj)];\n    }\n  }\n\n  protected async _loads(data: string): Promise<any> {\n    const parsed = JSON.parse(data);\n    return _reviver(parsed);\n  }\n\n  async loadsTyped(type: string, data: Uint8Array | string): Promise<any> {\n    if (type === \"bytes\") {\n      return typeof data === \"string\" ? new TextEncoder().encode(data) : data;\n    } else if (type === \"json\") {\n      return this._loads(\n        typeof data === \"string\" ? data : new TextDecoder().decode(data)\n      );\n    } else {\n      throw new Error(`Unknown serialization type: ${type}`);\n    }\n  }\n}\n"],"mappings":";;;;AAMA,SAAS,4BAA4B,OAAgC;AACnE,QACE,UAAU,QACV,MAAM,OAAO,KACb,MAAM,SAAS,iBACf,MAAM,QAAQ,MAAM;;;;;;;;;;AAYxB,eAAe,SAAS,OAA0B;AAChD,KAAI,SAAS,OAAO,UAAU,SAC5B,KAAI,MAAM,QAAQ,QAAQ;EACxB,MAAM,eAAe,MAAM,QAAQ,IACjC,MAAM,KAAK,SAAS,SAAS;AAE/B,SAAO;QACF;EACL,MAAMA,aAAkB;AACxB,OAAK,MAAM,CAAC,GAAG,MAAM,OAAO,QAAQ,OAClC,YAAW,KAAK,MAAM,SAAS;AAGjC,MAAI,WAAW,OAAO,KAAK,WAAW,SAAS,YAC7C,QAAO;WAEP,WAAW,OAAO,KAClB,WAAW,SAAS,iBACpB,MAAM,QAAQ,WAAW,IAEzB,KAAI;GACF,MAAM,kBAAkB,WAAW,GAAG,WAAW,GAAG,SAAS;GAC7D,IAAIC;AAEJ,WAAQ,iBAAR;IACE,KAAK;AACH,mBAAc;AACd;IACF,KAAK;AACH,mBAAc;AACd;IACF,KAAK;AACH,mBAAc;AACd;IACF,KAAK;AACH,mBAAc;AACd;IACF,QACE,QAAO;;AAEX,OAAI,WAAW,OACb,QAAQ,YAAoB,WAAW,QACrC,GAAI,WAAW,QAAQ;OAGzB,QAAO,IAAK,YAAoB,GAAI,WAAW,QAAQ;WAElD,OAAO;AACd,UAAO;;WAEA,4BAA4B,YACrC,QAAO,KAAK,KAAK,UAAU;AAG7B,SAAO;;AAGX,QAAO;;AAGT,SAAS,uBAEP,aACA,QACA,MACA,QACQ;AACR,QAAO;EACL,IAAI;EACJ,MAAM;EACN,IAAI,CAAC,YAAY;EACjB,QAAQ,UAAU;EAClB,MAAM,QAAQ;EACd,QAAQ,UAAU;;;AAItB,SAAS,SAAS,KAAe;AAC/B,KAAI,QAAQ,OACV,QAAO;EACL,IAAI;EACJ,MAAM;;UAEC,eAAe,OAAO,eAAe,IAC9C,QAAO,uBAAuB,IAAI,aAAa,QAAW,CACxD,MAAM,KAAK;UAEJ,eAAe,OACxB,QAAO,uBAAuB,QAAQ,QAAW,CAAC,IAAI,QAAQ,IAAI;UACzD,eAAe,MACxB,QAAO,uBAAuB,IAAI,aAAa,QAAW,CAAC,IAAI;UAEtD,KAAK,YAAY,OAC1B,QAAO;EACL,MAAM,IAAI;EACV,MAAM,IAAI;;KAGZ,QAAO;;AAIX,IAAa,qBAAb,MAA8D;CAC5D,AAAU,OAAO,KAAsB;EACrC,MAAM,UAAU,IAAI;AACpB,SAAO,QAAQ,OACb,UAAU,MAAM,GAAW,UAAe;AACxC,UAAO,SAAS;;;CAKtB,MAAM,WAAW,KAAyC;AACxD,MAAI,eAAe,WACjB,QAAO,CAAC,SAAS;MAEjB,QAAO,CAAC,QAAQ,KAAK,OAAO;;CAIhC,MAAgB,OAAO,MAA4B;EACjD,MAAM,SAAS,KAAK,MAAM;AAC1B,SAAO,SAAS;;CAGlB,MAAM,WAAW,MAAc,MAAyC;AACtE,MAAI,SAAS,QACX,QAAO,OAAO,SAAS,WAAW,IAAI,cAAc,OAAO,QAAQ;WAC1D,SAAS,OAClB,QAAO,KAAK,OACV,OAAO,SAAS,WAAW,OAAO,IAAI,cAAc,OAAO;MAG7D,OAAM,IAAI,MAAM,+BAA+B"}