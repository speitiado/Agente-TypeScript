{"version":3,"file":"base.d.ts","names":["RunnableConfig","SerializerProtocol","PendingWrite","CheckpointPendingWrite","CheckpointMetadata","ChannelVersion","ChannelVersions","Record","Checkpoint","C","N","ReadonlyCheckpoint","Readonly","deepCopy","T","emptyCheckpoint","copyCheckpoint","CheckpointTuple","CheckpointListOptions","BaseCheckpointSaver","Promise","AsyncGenerator","V","compareChannelVersions","maxChannelVersion","WRITES_IDX_MAP","getCheckpointId"],"sources":["../src/base.d.ts"],"sourcesContent":["import type { RunnableConfig } from \"@langchain/core/runnables\";\nimport { SerializerProtocol } from \"./serde/base.js\";\nimport type { PendingWrite, CheckpointPendingWrite, CheckpointMetadata } from \"./types.js\";\n/** @inline */\ntype ChannelVersion = number | string;\nexport type ChannelVersions = Record<string, ChannelVersion>;\nexport interface Checkpoint<N extends string = string, C extends string = string> {\n    /**\n     * The version of the checkpoint format. Currently 4\n     */\n    v: number;\n    /**\n     * Checkpoint ID {uuid6}\n     */\n    id: string;\n    /**\n     * Timestamp {new Date().toISOString()}\n     */\n    ts: string;\n    /**\n     * @default {}\n     */\n    channel_values: Record<C, unknown>;\n    /**\n     * @default {}\n     */\n    channel_versions: Record<C, ChannelVersion>;\n    /**\n     * @default {}\n     */\n    versions_seen: Record<N, Record<C, ChannelVersion>>;\n}\nexport interface ReadonlyCheckpoint extends Readonly<Checkpoint> {\n    readonly channel_values: Readonly<Record<string, unknown>>;\n    readonly channel_versions: Readonly<Record<string, ChannelVersion>>;\n    readonly versions_seen: Readonly<Record<string, Readonly<Record<string, ChannelVersion>>>>;\n}\nexport declare function deepCopy<T>(obj: T): T;\n/** @hidden */\nexport declare function emptyCheckpoint(): Checkpoint;\n/** @hidden */\nexport declare function copyCheckpoint(checkpoint: ReadonlyCheckpoint): Checkpoint;\nexport interface CheckpointTuple {\n    config: RunnableConfig;\n    checkpoint: Checkpoint;\n    metadata?: CheckpointMetadata;\n    parentConfig?: RunnableConfig;\n    pendingWrites?: CheckpointPendingWrite[];\n}\nexport type CheckpointListOptions = {\n    limit?: number;\n    before?: RunnableConfig;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    filter?: Record<string, any>;\n};\nexport declare abstract class BaseCheckpointSaver<V extends string | number = number> {\n    serde: SerializerProtocol;\n    constructor(serde?: SerializerProtocol);\n    get(config: RunnableConfig): Promise<Checkpoint | undefined>;\n    abstract getTuple(config: RunnableConfig): Promise<CheckpointTuple | undefined>;\n    abstract list(config: RunnableConfig, options?: CheckpointListOptions): AsyncGenerator<CheckpointTuple>;\n    abstract put(config: RunnableConfig, checkpoint: Checkpoint, metadata: CheckpointMetadata, newVersions: ChannelVersions): Promise<RunnableConfig>;\n    /**\n     * Store intermediate writes linked to a checkpoint.\n     */\n    abstract putWrites(config: RunnableConfig, writes: PendingWrite[], taskId: string): Promise<void>;\n    /**\n     * Delete all checkpoints and writes associated with a specific thread ID.\n     * @param threadId The thread ID whose checkpoints should be deleted.\n     */\n    abstract deleteThread(threadId: string): Promise<void>;\n    /**\n     * Generate the next version ID for a channel.\n     *\n     * Default is to use integer versions, incrementing by 1. If you override, you can use str/int/float versions,\n     * as long as they are monotonically increasing.\n     */\n    getNextVersion(current: V | undefined): V;\n}\nexport declare function compareChannelVersions(a: ChannelVersion, b: ChannelVersion): number;\nexport declare function maxChannelVersion(...versions: ChannelVersion[]): ChannelVersion;\n/**\n * Mapping from error type to error index.\n * Regular writes just map to their index in the list of writes being saved.\n * Special writes (e.g. errors) map to negative indices, to avoid those writes from\n * conflicting with regular writes.\n * Each Checkpointer implementation should use this mapping in put_writes.\n */\nexport declare const WRITES_IDX_MAP: Record<string, number>;\nexport declare function getCheckpointId(config: RunnableConfig): string;\nexport {};\n"],"mappings":"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"}