//#region src/utils/env.d.ts
// Inlined from https://github.com/flexdinesh/browser-or-node
declare global {
  const Deno: {
    version: {
      deno: string;
    };
    env: {
      get: (name: string) => string | undefined;
    };
  } | undefined;
}
declare const isBrowser: () => boolean;
declare const isWebWorker: () => boolean;
declare const isJsDom: () => boolean;
// Supabase Edge Function provides a `Deno` global object
// without `version` property
declare const isDeno: () => boolean;
// Mark not-as-node if in Supabase Edge Function
declare const isNode: () => boolean;
declare const getEnv: () => string;
type RuntimeEnvironment = {
  library: string;
  libraryVersion?: string;
  runtime: string;
  runtimeVersion?: string;
};
declare function getRuntimeEnvironment(): RuntimeEnvironment;
declare function getEnvironmentVariable(name: string): string | undefined;
//#endregion
export { RuntimeEnvironment, getEnv, getEnvironmentVariable, getRuntimeEnvironment, isBrowser, isDeno, isJsDom, isNode, isWebWorker };
//# sourceMappingURL=env.d.cts.map