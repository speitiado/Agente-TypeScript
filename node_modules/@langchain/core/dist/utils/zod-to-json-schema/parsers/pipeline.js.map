{"version":3,"file":"pipeline.js","names":["def: ZodPipelineDef<any, any>","refs: Refs"],"sources":["../../../../src/utils/zod-to-json-schema/parsers/pipeline.ts"],"sourcesContent":["import { ZodPipelineDef } from \"zod/v3\";\nimport { parseDef } from \"../parseDef.js\";\nimport { JsonSchema7Type } from \"../parseTypes.js\";\nimport { Refs } from \"../Refs.js\";\nimport { JsonSchema7AllOfType } from \"./intersection.js\";\n\nexport const parsePipelineDef = (\n  def: ZodPipelineDef<any, any>,\n  refs: Refs\n): JsonSchema7AllOfType | JsonSchema7Type | undefined => {\n  if (refs.pipeStrategy === \"input\") {\n    return parseDef(def.in._def, refs);\n  } else if (refs.pipeStrategy === \"output\") {\n    return parseDef(def.out._def, refs);\n  }\n\n  const a = parseDef(def.in._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"allOf\", \"0\"],\n  });\n  const b = parseDef(def.out._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"allOf\", a ? \"1\" : \"0\"],\n  });\n\n  return {\n    allOf: [a, b].filter((x): x is JsonSchema7Type => x !== undefined),\n  };\n};\n"],"mappings":";;;AAMA,MAAa,mBAAmB,CAC9BA,KACAC,SACuD;AACvD,KAAI,KAAK,iBAAiB,QACxB,QAAO,SAAS,IAAI,GAAG,MAAM,KAAK;UACzB,KAAK,iBAAiB,SAC/B,QAAO,SAAS,IAAI,IAAI,MAAM,KAAK;CAGrC,MAAM,IAAI,SAAS,IAAI,GAAG,MAAM;EAC9B,GAAG;EACH,aAAa;GAAC,GAAG,KAAK;GAAa;GAAS;EAAI;CACjD,EAAC;CACF,MAAM,IAAI,SAAS,IAAI,IAAI,MAAM;EAC/B,GAAG;EACH,aAAa;GAAC,GAAG,KAAK;GAAa;GAAS,IAAI,MAAM;EAAI;CAC3D,EAAC;AAEF,QAAO,EACL,OAAO,CAAC,GAAG,CAAE,EAAC,OAAO,CAAC,MAA4B,MAAM,OAAU,CACnE;AACF"}