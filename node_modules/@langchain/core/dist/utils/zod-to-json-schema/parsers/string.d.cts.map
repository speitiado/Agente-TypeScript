{"version":3,"file":"string.d.cts","names":["ZodStringDef","ErrorMessages","Refs","zodPatterns","RegExp","JsonSchema7StringType","parseStringDef"],"sources":["../../../../src/utils/zod-to-json-schema/parsers/string.d.ts"],"sourcesContent":["import { ZodStringDef } from \"zod/v3\";\nimport { ErrorMessages } from \"../errorMessages.js\";\nimport { Refs } from \"../Refs.js\";\n/**\n * Generated from the regular expressions found here as of 2024-05-22:\n * https://github.com/colinhacks/zod/blob/master/src/types.ts.\n *\n * Expressions with /i flag have been changed accordingly.\n */\nexport declare const zodPatterns: {\n    /**\n     * `c` was changed to `[cC]` to replicate /i flag\n     */\n    readonly cuid: RegExp;\n    readonly cuid2: RegExp;\n    readonly ulid: RegExp;\n    /**\n     * `a-z` was added to replicate /i flag\n     */\n    readonly email: RegExp;\n    /**\n     * Constructed a valid Unicode RegExp\n     *\n     * Lazily instantiate since this type of regex isn't supported\n     * in all envs (e.g. React Native).\n     *\n     * See:\n     * https://github.com/colinhacks/zod/issues/2433\n     * Fix in Zod:\n     * https://github.com/colinhacks/zod/commit/9340fd51e48576a75adc919bff65dbc4a5d4c99b\n     */\n    readonly emoji: () => RegExp;\n    /**\n     * Unused\n     */\n    readonly uuid: RegExp;\n    /**\n     * Unused\n     */\n    readonly ipv4: RegExp;\n    readonly ipv4Cidr: RegExp;\n    /**\n     * Unused\n     */\n    readonly ipv6: RegExp;\n    readonly ipv6Cidr: RegExp;\n    readonly base64: RegExp;\n    readonly base64url: RegExp;\n    readonly nanoid: RegExp;\n    readonly jwt: RegExp;\n};\nexport type JsonSchema7StringType = {\n    type: \"string\";\n    minLength?: number;\n    maxLength?: number;\n    format?: \"email\" | \"idn-email\" | \"uri\" | \"uuid\" | \"date-time\" | \"ipv4\" | \"ipv6\" | \"date\" | \"time\" | \"duration\";\n    pattern?: string;\n    allOf?: {\n        pattern: string;\n        errorMessage?: ErrorMessages<{\n            pattern: string;\n        }>;\n    }[];\n    anyOf?: {\n        format: string;\n        errorMessage?: ErrorMessages<{\n            format: string;\n        }>;\n    }[];\n    errorMessage?: ErrorMessages<JsonSchema7StringType>;\n    contentEncoding?: string;\n};\nexport declare function parseStringDef(def: ZodStringDef, refs: Refs): JsonSchema7StringType;\n"],"mappings":";;;;KAmDYK,qBAAAA;;;;;;;;mBAQWJ;;;;;;mBAMAA;;;;iBAIJA,cAAcI"}