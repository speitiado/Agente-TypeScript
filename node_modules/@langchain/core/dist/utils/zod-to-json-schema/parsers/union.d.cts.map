{"version":3,"file":"union.d.cts","names":["ZodDiscriminatedUnionDef","ZodUnionDef","JsonSchema7Type","Refs","primitiveMappings","JsonSchema7Primitive","JsonSchema7UnionType","JsonSchema7PrimitiveUnionType","JsonSchema7AnyOfType","parseUnionDef"],"sources":["../../../../src/utils/zod-to-json-schema/parsers/union.d.ts"],"sourcesContent":["import { ZodDiscriminatedUnionDef, ZodUnionDef } from \"zod/v3\";\nimport { JsonSchema7Type } from \"../parseTypes.js\";\nimport { Refs } from \"../Refs.js\";\nexport declare const primitiveMappings: {\n    readonly ZodString: \"string\";\n    readonly ZodNumber: \"number\";\n    readonly ZodBigInt: \"integer\";\n    readonly ZodBoolean: \"boolean\";\n    readonly ZodNull: \"null\";\n};\ntype JsonSchema7Primitive = (typeof primitiveMappings)[keyof typeof primitiveMappings];\nexport type JsonSchema7UnionType = JsonSchema7PrimitiveUnionType | JsonSchema7AnyOfType;\ntype JsonSchema7PrimitiveUnionType = {\n    type: JsonSchema7Primitive | JsonSchema7Primitive[];\n} | {\n    type: JsonSchema7Primitive | JsonSchema7Primitive[];\n    enum: (string | number | bigint | boolean | null)[];\n};\ntype JsonSchema7AnyOfType = {\n    anyOf: JsonSchema7Type[];\n};\nexport declare function parseUnionDef(def: ZodUnionDef | ZodDiscriminatedUnionDef<any, any>, refs: Refs): JsonSchema7PrimitiveUnionType | JsonSchema7AnyOfType | undefined;\nexport {};\n"],"mappings":";;;AAGqBI,cAAAA,iBAMpB,EAAA;EACIC,SAAAA,SAAAA,EAAAA,QAAoB;EAAA,SAAA,SAAA,EAAA,QAAA;EAAA,SAAWD,SAAAA,EAAAA,SAAAA;EAAiB,SAAeA,UAAAA,EAAAA,SAAAA;EAAiB,SAAA,OAAA,EAAA,MAAA;AACrF,CAAA;KADKC,oBAAAA,GAC2B,CAAA,OADID,iBACJ,CAAA,CAAA,MAAA,OADoCA,iBACpC,CAAA;AAAGG,KAAvBD,oBAAAA,GAAuBC,6BAAAA,GAAgCC,oBAAhCD;KAC9BA,6BAAAA,GAD8DC;EAAoB,IAAA,EAE7EH,oBAF6E,GAEtDA,oBAFsD,EAAA;AAAC,CAAA,GACnFE;EAA6B,IAAA,EAGxBF,oBAHwB,GAGDA,oBAHC,EAAA;EAAA,IACxBA,EAAAA,CAAAA,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,GAAAA,OAAAA,GAAAA,IAAAA,CAAAA,EAAAA;CAAoB;KAKzBG,oBAAAA,GAHKH;EAAoB,KAAGA,EAItBH,eAJsBG,EAAAA;AAAoB,CAAA"}