{"version":3,"file":"base.d.cts","names":["TiktokenModel","ZodType","ZodTypeV3","$ZodType","ZodTypeV4","BaseCache","BasePromptValueInterface","BaseMessage","BaseMessageLike","MessageContent","LLMResult","CallbackManager","Callbacks","AsyncCaller","AsyncCallerParams","Runnable","RunnableInterface","RunnableConfig","JSONSchema","InferInteropZodOutput","InteropZodObject","InteropZodType","getModelNameForTiktoken","getEmbeddingContextSize","getModelContextSize","isOpenAITool","ToolDefinition","CalculateMaxTokenProps","calculateMaxTokens","prompt","modelName","Promise","SerializedLLM","Record","BaseLangChainParams","BaseLangChain","RunInput","RunOutput","CallOptions","BaseLanguageModelParams","BaseLanguageModelTracingCallOptions","BaseLanguageModelCallOptions","FunctionDefinition","FunctionCallOption","BaseFunctionCallOptions","BaseLanguageModelInput","StructuredOutputType","StructuredOutputMethodOptions","IncludeRaw","StructuredOutputMethodParams","BaseLanguageModelInterface","LanguageModelOutput","LanguageModelLike","BaseLanguageModel","callbacks","callbackManager","config","TokenUsage"],"sources":["../../src/language_models/base.d.ts"],"sourcesContent":["import type { TiktokenModel } from \"js-tiktoken/lite\";\nimport type { ZodType as ZodTypeV3 } from \"zod/v3\";\nimport type { $ZodType as ZodTypeV4 } from \"zod/v4/core\";\nimport { type BaseCache } from \"../caches/base.js\";\nimport { type BasePromptValueInterface } from \"../prompt_values.js\";\nimport { type BaseMessage, type BaseMessageLike, type MessageContent } from \"../messages/base.js\";\nimport { type LLMResult } from \"../outputs.js\";\nimport { CallbackManager, Callbacks } from \"../callbacks/manager.js\";\nimport { AsyncCaller, AsyncCallerParams } from \"../utils/async_caller.js\";\nimport { Runnable, type RunnableInterface } from \"../runnables/base.js\";\nimport { RunnableConfig } from \"../runnables/config.js\";\nimport { JSONSchema } from \"../utils/json_schema.js\";\nimport { InferInteropZodOutput, InteropZodObject, InteropZodType } from \"../utils/types/zod.js\";\n// https://www.npmjs.com/package/js-tiktoken\nexport declare const getModelNameForTiktoken: (modelName: string) => TiktokenModel;\nexport declare const getEmbeddingContextSize: (modelName?: string | undefined) => number;\nexport declare const getModelContextSize: (modelName: string) => number;\n/**\n * Whether or not the input matches the OpenAI tool definition.\n * @param {unknown} tool The input to check.\n * @returns {boolean} Whether the input is an OpenAI tool definition.\n */\nexport declare function isOpenAITool(tool: unknown): tool is ToolDefinition;\ninterface CalculateMaxTokenProps {\n    prompt: string;\n    modelName: TiktokenModel;\n}\nexport declare const calculateMaxTokens: ({ prompt, modelName, }: CalculateMaxTokenProps) => Promise<number>;\nexport type SerializedLLM = {\n    _model: string;\n    _type: string;\n} & Record<string, any>;\nexport interface BaseLangChainParams {\n    verbose?: boolean;\n    callbacks?: Callbacks;\n    tags?: string[];\n    metadata?: Record<string, unknown>;\n}\n/**\n * Base class for language models, chains, tools.\n */\nexport declare abstract class BaseLangChain<RunInput, RunOutput, CallOptions extends RunnableConfig = RunnableConfig> extends Runnable<RunInput, RunOutput, CallOptions> implements BaseLangChainParams {\n    /**\n     * Whether to print out response text.\n     */\n    verbose: boolean;\n    callbacks?: Callbacks;\n    tags?: string[];\n    metadata?: Record<string, unknown>;\n    get lc_attributes(): {\n        [key: string]: undefined;\n    } | undefined;\n    constructor(params: BaseLangChainParams);\n}\n/**\n * Base interface for language model parameters.\n * A subclass of {@link BaseLanguageModel} should have a constructor that\n * takes in a parameter that extends this interface.\n */\nexport interface BaseLanguageModelParams extends AsyncCallerParams, BaseLangChainParams {\n    /**\n     * @deprecated Use `callbacks` instead\n     */\n    callbackManager?: CallbackManager;\n    cache?: BaseCache | boolean;\n}\nexport interface BaseLanguageModelTracingCallOptions {\n    /**\n     * Describes the format of structured outputs.\n     * This should be provided if an output is considered to be structured\n     */\n    ls_structured_output_format?: {\n        /**\n         * An object containing the method used for structured output (e.g., \"jsonMode\").\n         */\n        kwargs: {\n            method: string;\n        };\n        /**\n         * The JSON schema describing the expected output structure.\n         */\n        schema?: JSONSchema;\n    };\n}\nexport interface BaseLanguageModelCallOptions extends RunnableConfig, BaseLanguageModelTracingCallOptions {\n    /**\n     * Stop tokens to use for this call.\n     * If not provided, the default stop tokens for the model will be used.\n     */\n    stop?: string[];\n}\nexport interface FunctionDefinition {\n    /**\n     * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain\n     * underscores and dashes, with a maximum length of 64.\n     */\n    name: string;\n    /**\n     * The parameters the functions accepts, described as a JSON Schema object. See the\n     * [guide](https://platform.openai.com/docs/guides/gpt/function-calling) for\n     * examples, and the\n     * [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for\n     * documentation about the format.\n     *\n     * To describe a function that accepts no parameters, provide the value\n     * `{\"type\": \"object\", \"properties\": {}}`.\n     */\n    parameters: Record<string, unknown> | JSONSchema;\n    /**\n     * A description of what the function does, used by the model to choose when and\n     * how to call the function.\n     */\n    description?: string;\n}\nexport interface ToolDefinition {\n    type: \"function\";\n    function: FunctionDefinition;\n}\nexport type FunctionCallOption = {\n    name: string;\n};\nexport interface BaseFunctionCallOptions extends BaseLanguageModelCallOptions {\n    function_call?: FunctionCallOption;\n    functions?: FunctionDefinition[];\n}\nexport type BaseLanguageModelInput = BasePromptValueInterface | string | BaseMessageLike[];\nexport type StructuredOutputType = InferInteropZodOutput<InteropZodObject>;\nexport type StructuredOutputMethodOptions<IncludeRaw extends boolean = false> = {\n    name?: string;\n    method?: \"functionCalling\" | \"jsonMode\" | \"jsonSchema\" | string;\n    includeRaw?: IncludeRaw;\n    /** Whether to use strict mode. Currently only supported by OpenAI models. */\n    strict?: boolean;\n};\n/** @deprecated Use StructuredOutputMethodOptions instead */\nexport type StructuredOutputMethodParams<RunOutput, IncludeRaw extends boolean = false> = {\n    /** @deprecated Pass schema in as the first argument */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    schema: InteropZodType<RunOutput> | Record<string, any>;\n    name?: string;\n    method?: \"functionCalling\" | \"jsonMode\";\n    includeRaw?: IncludeRaw;\n};\nexport interface BaseLanguageModelInterface<\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRunOutput = any, CallOptions extends BaseLanguageModelCallOptions = BaseLanguageModelCallOptions> extends RunnableInterface<BaseLanguageModelInput, RunOutput, CallOptions> {\n    get callKeys(): string[];\n    generatePrompt(promptValues: BasePromptValueInterface[], options?: string[] | CallOptions, callbacks?: Callbacks): Promise<LLMResult>;\n    _modelType(): string;\n    _llmType(): string;\n    getNumTokens(content: MessageContent): Promise<number>;\n    /**\n     * Get the identifying parameters of the LLM.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _identifyingParams(): Record<string, any>;\n    serialize(): SerializedLLM;\n}\nexport type LanguageModelOutput = BaseMessage | string;\nexport type LanguageModelLike = Runnable<BaseLanguageModelInput, LanguageModelOutput>;\n/**\n * Base class for language models.\n */\nexport declare abstract class BaseLanguageModel<\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRunOutput = any, CallOptions extends BaseLanguageModelCallOptions = BaseLanguageModelCallOptions> extends BaseLangChain<BaseLanguageModelInput, RunOutput, CallOptions> implements BaseLanguageModelParams, BaseLanguageModelInterface<RunOutput, CallOptions> {\n    /**\n     * Keys that the language model accepts as call options.\n     */\n    get callKeys(): string[];\n    /**\n     * The async caller should be used by subclasses to make any async calls,\n     * which will thus benefit from the concurrency and retry logic.\n     */\n    caller: AsyncCaller;\n    cache?: BaseCache;\n    constructor({ callbacks, callbackManager, ...params }: BaseLanguageModelParams);\n    abstract generatePrompt(promptValues: BasePromptValueInterface[], options?: string[] | CallOptions, callbacks?: Callbacks): Promise<LLMResult>;\n    abstract _modelType(): string;\n    abstract _llmType(): string;\n    private _encoding?;\n    /**\n     * Get the number of tokens in the content.\n     * @param content The content to get the number of tokens for.\n     * @returns The number of tokens in the content.\n     */\n    getNumTokens(content: MessageContent): Promise<number>;\n    protected static _convertInputToPromptValue(input: BaseLanguageModelInput): BasePromptValueInterface;\n    /**\n     * Get the identifying parameters of the LLM.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _identifyingParams(): Record<string, any>;\n    /**\n     * Create a unique cache key for a specific call to a specific language model.\n     * @param callOptions Call options for the model\n     * @returns A unique cache key.\n     */\n    _getSerializedCacheKeyParametersForCall(\n    // TODO: Fix when we remove the RunnableLambda backwards compatibility shim.\n    { config, ...callOptions }: CallOptions & {\n        config?: RunnableConfig;\n    }): string;\n    /**\n     * @deprecated\n     * Return a json-like object representing this LLM.\n     */\n    serialize(): SerializedLLM;\n    /**\n     * @deprecated\n     * Load an LLM from a json-like object describing it.\n     */\n    static deserialize(_data: SerializedLLM): Promise<BaseLanguageModel>;\n    withStructuredOutput?<\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    RunOutput extends Record<string, any> = Record<string, any>>(schema: ZodTypeV3<RunOutput>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n     | Record<string, any>, config?: StructuredOutputMethodOptions<false>): Runnable<BaseLanguageModelInput, RunOutput>;\n    withStructuredOutput?<\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    RunOutput extends Record<string, any> = Record<string, any>>(schema: ZodTypeV3<RunOutput>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n     | Record<string, any>, config?: StructuredOutputMethodOptions<true>): Runnable<BaseLanguageModelInput, {\n        raw: BaseMessage;\n        parsed: RunOutput;\n    }>;\n    withStructuredOutput?<\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    RunOutput extends Record<string, any> = Record<string, any>>(schema: ZodTypeV4<RunOutput>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n     | Record<string, any>, config?: StructuredOutputMethodOptions<false>): Runnable<BaseLanguageModelInput, RunOutput>;\n    withStructuredOutput?<\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    RunOutput extends Record<string, any> = Record<string, any>>(schema: ZodTypeV4<RunOutput>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n     | Record<string, any>, config?: StructuredOutputMethodOptions<true>): Runnable<BaseLanguageModelInput, {\n        raw: BaseMessage;\n        parsed: RunOutput;\n    }>;\n    /**\n     * Model wrapper that returns outputs formatted to match the given schema.\n     *\n     * @template {BaseLanguageModelInput} RunInput The input type for the Runnable, expected to be the same input for the LLM.\n     * @template {Record<string, any>} RunOutput The output type for the Runnable, expected to be a Zod schema object for structured output validation.\n     *\n     * @param {InteropZodType<RunOutput>} schema The schema for the structured output. Either as a Zod schema or a valid JSON schema object.\n     *   If a Zod schema is passed, the returned attributes will be validated, whereas with JSON schema they will not be.\n     * @param {string} name The name of the function to call.\n     * @param {\"functionCalling\" | \"jsonMode\"} [method=functionCalling] The method to use for getting the structured output. Defaults to \"functionCalling\".\n     * @param {boolean | undefined} [includeRaw=false] Whether to include the raw output in the result. Defaults to false.\n     * @returns {Runnable<RunInput, RunOutput> | Runnable<RunInput, { raw: BaseMessage; parsed: RunOutput }>} A new runnable that calls the LLM with structured output.\n     */\n    withStructuredOutput?<\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    RunOutput extends Record<string, any> = Record<string, any>>(schema: InteropZodType<RunOutput>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n     | Record<string, any>, config?: StructuredOutputMethodOptions<boolean>): Runnable<BaseLanguageModelInput, RunOutput> | Runnable<BaseLanguageModelInput, {\n        raw: BaseMessage;\n        parsed: RunOutput;\n    }>;\n}\n/**\n * Shared interface for token usage\n * return type from LLM calls.\n */\nexport interface TokenUsage {\n    completionTokens?: number;\n    promptTokens?: number;\n    totalTokens?: number;\n}\nexport {};\n"],"mappings":"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"}