{"version":3,"file":"chat_models.d.ts","names":["ZodType","ZodTypeV3","$ZodType","ZodTypeV4","BaseMessage","BaseMessageChunk","BaseMessageLike","AIMessageChunk","MessageOutputVersion","BasePromptValueInterface","LLMResult","ChatGenerationChunk","ChatResult","Generation","BaseLanguageModel","StructuredOutputMethodOptions","ToolDefinition","BaseLanguageModelCallOptions","BaseLanguageModelInput","BaseLanguageModelParams","CallbackManagerForLLMRun","Callbacks","RunnableConfig","BaseCache","StructuredToolInterface","StructuredToolParams","Runnable","RunnableToolLike","ToolChoice","Record","SerializedChatModel","SerializedLLM","BaseChatModelParams","BaseChatModelCallOptions","LangSmithParams","Array","BindToolsInput","BaseChatModel","OutputMessageType","CallOptions","Exclude","Omit","Partial","Promise","AsyncGenerator","messages","cache","llmStringKey","parsedOptions","handledOptions","RunOutput","SimpleChatModel"],"sources":["../../src/language_models/chat_models.d.ts"],"sourcesContent":["import type { ZodType as ZodTypeV3 } from \"zod/v3\";\nimport type { $ZodType as ZodTypeV4 } from \"zod/v4/core\";\nimport { type BaseMessage, BaseMessageChunk, type BaseMessageLike, AIMessageChunk, MessageOutputVersion } from \"../messages/index.js\";\nimport type { BasePromptValueInterface } from \"../prompt_values.js\";\nimport { LLMResult, ChatGenerationChunk, type ChatResult, type Generation } from \"../outputs.js\";\nimport { BaseLanguageModel, type StructuredOutputMethodOptions, type ToolDefinition, type BaseLanguageModelCallOptions, type BaseLanguageModelInput, type BaseLanguageModelParams } from \"./base.js\";\nimport { type CallbackManagerForLLMRun, type Callbacks } from \"../callbacks/manager.js\";\nimport type { RunnableConfig } from \"../runnables/config.js\";\nimport type { BaseCache } from \"../caches/base.js\";\nimport { StructuredToolInterface, StructuredToolParams } from \"../tools/index.js\";\nimport { Runnable, RunnableToolLike } from \"../runnables/base.js\";\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type ToolChoice = string | Record<string, any> | \"auto\" | \"any\";\n/**\n * Represents a serialized chat model.\n */\nexport type SerializedChatModel = {\n    _model: string;\n    _type: string;\n} & Record<string, any>;\n// todo?\n/**\n * Represents a serialized large language model.\n */\nexport type SerializedLLM = {\n    _model: string;\n    _type: string;\n} & Record<string, any>;\n/**\n * Represents the parameters for a base chat model.\n */\nexport type BaseChatModelParams = BaseLanguageModelParams & {\n    /**\n     * Whether to disable streaming.\n     *\n     * If streaming is bypassed, then `stream()` will defer to\n     * `invoke()`.\n     *\n     * - If true, will always bypass streaming case.\n     * - If false (default), will always use streaming case if available.\n     */\n    disableStreaming?: boolean;\n    /**\n     * Version of `AIMessage` output format to store in message content.\n     *\n     * `AIMessage.contentBlocks` will lazily parse the contents of `content` into a\n     * standard format. This flag can be used to additionally store the standard format\n     * as the message content, e.g., for serialization purposes.\n     *\n     * - \"v0\": provider-specific format in content (can lazily parse with `.contentBlocks`)\n     * - \"v1\": standardized format in content (consistent with `.contentBlocks`)\n     *\n     * You can also set `LC_OUTPUT_VERSION` as an environment variable to \"v1\" to\n     * enable this by default.\n     *\n     * @default \"v0\"\n     */\n    outputVersion?: MessageOutputVersion;\n};\n/**\n * Represents the call options for a base chat model.\n */\nexport type BaseChatModelCallOptions = BaseLanguageModelCallOptions & {\n    /**\n     * Specifies how the chat model should use tools.\n     * @default undefined\n     *\n     * Possible values:\n     * - \"auto\": The model may choose to use any of the provided tools, or none.\n     * - \"any\": The model must use one of the provided tools.\n     * - \"none\": The model must not use any tools.\n     * - A string (not \"auto\", \"any\", or \"none\"): The name of a specific tool the model must use.\n     * - An object: A custom schema specifying tool choice parameters. Specific to the provider.\n     *\n     * Note: Not all providers support tool_choice. An error will be thrown\n     * if used with an unsupported model.\n     */\n    tool_choice?: ToolChoice;\n    /**\n     * Version of `AIMessage` output format to store in message content.\n     *\n     * `AIMessage.contentBlocks` will lazily parse the contents of `content` into a\n     * standard format. This flag can be used to additionally store the standard format\n     * as the message content, e.g., for serialization purposes.\n     *\n     * - \"v0\": provider-specific format in content (can lazily parse with `.contentBlocks`)\n     * - \"v1\": standardized format in content (consistent with `.contentBlocks`)\n     *\n     * You can also set `LC_OUTPUT_VERSION` as an environment variable to \"v1\" to\n     * enable this by default.\n     *\n     * @default \"v0\"\n     */\n    outputVersion?: MessageOutputVersion;\n};\nexport type LangSmithParams = {\n    ls_provider?: string;\n    ls_model_name?: string;\n    ls_model_type: \"chat\";\n    ls_temperature?: number;\n    ls_max_tokens?: number;\n    ls_stop?: Array<string>;\n};\nexport type BindToolsInput = StructuredToolInterface\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n | Record<string, any> | ToolDefinition | RunnableToolLike | StructuredToolParams;\n/**\n * Base class for chat models. It extends the BaseLanguageModel class and\n * provides methods for generating chat based on input messages.\n */\nexport declare abstract class BaseChatModel<CallOptions extends BaseChatModelCallOptions = BaseChatModelCallOptions, \n// TODO: Fix the parameter order on the next minor version.\nOutputMessageType extends BaseMessageChunk = AIMessageChunk> extends BaseLanguageModel<OutputMessageType, CallOptions> {\n    // Backwards compatibility since fields have been moved to RunnableConfig\n    ParsedCallOptions: Omit<CallOptions, Exclude<keyof RunnableConfig, \"signal\" | \"timeout\" | \"maxConcurrency\">>;\n    // Only ever instantiated in main LangChain\n    lc_namespace: string[];\n    disableStreaming: boolean;\n    outputVersion?: MessageOutputVersion;\n    get callKeys(): string[];\n    constructor(fields: BaseChatModelParams);\n    _combineLLMOutput?(...llmOutputs: LLMResult[\"llmOutput\"][]): LLMResult[\"llmOutput\"];\n    protected _separateRunnableConfigFromCallOptionsCompat(options?: Partial<CallOptions>): [RunnableConfig, this[\"ParsedCallOptions\"]];\n    /**\n     * Bind tool-like objects to this chat model.\n     *\n     * @param tools A list of tool definitions to bind to this chat model.\n     * Can be a structured tool, an OpenAI formatted tool, or an object\n     * matching the provider's specific tool schema.\n     * @param kwargs Any additional parameters to bind.\n     */\n    bindTools?(tools: BindToolsInput[], kwargs?: Partial<CallOptions>): Runnable<BaseLanguageModelInput, OutputMessageType, CallOptions>;\n    /**\n     * Invokes the chat model with a single input.\n     * @param input The input for the language model.\n     * @param options The call options.\n     * @returns A Promise that resolves to a BaseMessageChunk.\n     */\n    invoke(input: BaseLanguageModelInput, options?: CallOptions): Promise<OutputMessageType>;\n    // eslint-disable-next-line require-yield\n    _streamResponseChunks(_messages: BaseMessage[], _options: this[\"ParsedCallOptions\"], _runManager?: CallbackManagerForLLMRun): AsyncGenerator<ChatGenerationChunk>;\n    _streamIterator(input: BaseLanguageModelInput, options?: CallOptions): AsyncGenerator<OutputMessageType>;\n    getLsParams(options: this[\"ParsedCallOptions\"]): LangSmithParams;\n    /** @ignore */\n    _generateUncached(messages: BaseMessageLike[][], parsedOptions: this[\"ParsedCallOptions\"], handledOptions: RunnableConfig, startedRunManagers?: CallbackManagerForLLMRun[]): Promise<LLMResult>;\n    _generateCached({ messages, cache, llmStringKey, parsedOptions, handledOptions }: {\n        messages: BaseMessageLike[][];\n        cache: BaseCache<Generation[]>;\n        llmStringKey: string;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        parsedOptions: any;\n        handledOptions: RunnableConfig;\n    }): Promise<LLMResult & {\n        missingPromptIndices: number[];\n        startedRunManagers?: CallbackManagerForLLMRun[];\n    }>;\n    /**\n     * Generates chat based on the input messages.\n     * @param messages An array of arrays of BaseMessage instances.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to an LLMResult.\n     */\n    generate(messages: BaseMessageLike[][], options?: string[] | CallOptions, callbacks?: Callbacks): Promise<LLMResult>;\n    /**\n     * Get the parameters used to invoke the model\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    invocationParams(_options?: this[\"ParsedCallOptions\"]): any;\n    _modelType(): string;\n    abstract _llmType(): string;\n    /**\n     * Generates a prompt based on the input prompt values.\n     * @param promptValues An array of BasePromptValue instances.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to an LLMResult.\n     */\n    generatePrompt(promptValues: BasePromptValueInterface[], options?: string[] | CallOptions, callbacks?: Callbacks): Promise<LLMResult>;\n    abstract _generate(messages: BaseMessage[], options: this[\"ParsedCallOptions\"], runManager?: CallbackManagerForLLMRun): Promise<ChatResult>;\n    withStructuredOutput<\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    RunOutput extends Record<string, any> = Record<string, any>>(outputSchema: ZodTypeV4<RunOutput>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n     | Record<string, any>, config?: StructuredOutputMethodOptions<false>): Runnable<BaseLanguageModelInput, RunOutput>;\n    withStructuredOutput<\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    RunOutput extends Record<string, any> = Record<string, any>>(outputSchema: ZodTypeV4<RunOutput>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n     | Record<string, any>, config?: StructuredOutputMethodOptions<true>): Runnable<BaseLanguageModelInput, {\n        raw: BaseMessage;\n        parsed: RunOutput;\n    }>;\n    withStructuredOutput<\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    RunOutput extends Record<string, any> = Record<string, any>>(outputSchema: ZodTypeV3<RunOutput>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n     | Record<string, any>, config?: StructuredOutputMethodOptions<false>): Runnable<BaseLanguageModelInput, RunOutput>;\n    withStructuredOutput<\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    RunOutput extends Record<string, any> = Record<string, any>>(outputSchema: ZodTypeV3<RunOutput>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n     | Record<string, any>, config?: StructuredOutputMethodOptions<true>): Runnable<BaseLanguageModelInput, {\n        raw: BaseMessage;\n        parsed: RunOutput;\n    }>;\n}\n/**\n * An abstract class that extends BaseChatModel and provides a simple\n * implementation of _generate.\n */\nexport declare abstract class SimpleChatModel<CallOptions extends BaseChatModelCallOptions = BaseChatModelCallOptions> extends BaseChatModel<CallOptions> {\n    abstract _call(messages: BaseMessage[], options: this[\"ParsedCallOptions\"], runManager?: CallbackManagerForLLMRun): Promise<string>;\n    _generate(messages: BaseMessage[], options: this[\"ParsedCallOptions\"], runManager?: CallbackManagerForLLMRun): Promise<ChatResult>;\n}\n"],"mappings":"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"}