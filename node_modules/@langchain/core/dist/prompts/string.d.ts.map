{"version":3,"file":"string.d.ts","names":["InputValues","StringPromptValueInterface","BasePromptTemplate","TypedPromptInputValues","BaseStringPromptTemplate","RunInput","PartialVariableName","Promise"],"sources":["../../src/prompts/string.d.ts"],"sourcesContent":["// Default generic \"any\" values are for backwards compatibility.\n// Replace with \"string\" when we are comfortable with a breaking change.\nimport type { InputValues } from \"../utils/types/index.js\";\nimport { type StringPromptValueInterface } from \"../prompt_values.js\";\nimport { BasePromptTemplate, type TypedPromptInputValues } from \"./base.js\";\n/**\n * Base class for string prompt templates. It extends the\n * BasePromptTemplate class and overrides the formatPromptValue method to\n * return a StringPromptValue.\n */\nexport declare abstract class BaseStringPromptTemplate<\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRunInput extends InputValues = any, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPartialVariableName extends string = any> extends BasePromptTemplate<RunInput, StringPromptValueInterface, PartialVariableName> {\n    /**\n     * Formats the prompt given the input values and returns a formatted\n     * prompt value.\n     * @param values The input values to format the prompt.\n     * @returns A Promise that resolves to a formatted prompt value.\n     */\n    formatPromptValue(values: TypedPromptInputValues<RunInput>): Promise<StringPromptValueInterface>;\n}\n"],"mappings":";;;;;;AAUA;;;;;AAI2GM,uBAJ7EF,wBAI6EE;;iBAF1FN,WASaG,GAAAA,GAAAA;;4BAAmCI,MAAAA,GAAAA,GAAAA,CAAAA,SAPfL,kBAOeK,CAPIF,QAOJE,EAPcN,0BAOdM,EAP0CD,mBAO1CC,CAAAA,CAAAA;EAAO;AAPJ;;;;;4BAOtCJ,uBAAuBE,YAAYE,QAAQN"}