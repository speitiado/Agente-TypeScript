{"version":3,"file":"chat_history.d.cts","names":["Serializable","BaseMessage","BaseChatMessageHistory","Promise","BaseListChatMessageHistory","InMemoryChatMessageHistory"],"sources":["../src/chat_history.d.ts"],"sourcesContent":["import { Serializable } from \"./load/serializable.js\";\nimport { type BaseMessage } from \"./messages/index.js\";\n// TODO: Combine into one class for 0.2\n/**\n * Base class for all chat message histories. All chat message histories\n * should extend this class.\n */\nexport declare abstract class BaseChatMessageHistory extends Serializable {\n    abstract getMessages(): Promise<BaseMessage[]>;\n    abstract addMessage(message: BaseMessage): Promise<void>;\n    abstract addUserMessage(message: string): Promise<void>;\n    abstract addAIMessage(message: string): Promise<void>;\n    /**\n     * Add a list of messages.\n     *\n     * Implementations should override this method to handle bulk addition of messages\n     * in an efficient manner to avoid unnecessary round-trips to the underlying store.\n     *\n     * @param messages - A list of BaseMessage objects to store.\n     */\n    addMessages(messages: BaseMessage[]): Promise<void>;\n    abstract clear(): Promise<void>;\n}\n/**\n * Base class for all list chat message histories. All list chat message\n * histories should extend this class.\n */\nexport declare abstract class BaseListChatMessageHistory extends Serializable {\n    /** Returns a list of messages stored in the store. */\n    abstract getMessages(): Promise<BaseMessage[]>;\n    /**\n     * Add a message object to the store.\n     */\n    abstract addMessage(message: BaseMessage): Promise<void>;\n    /**\n     * This is a convenience method for adding a human message string to the store.\n     * Please note that this is a convenience method. Code should favor the\n     * bulk addMessages interface instead to save on round-trips to the underlying\n     * persistence layer.\n     * This method may be deprecated in a future release.\n     */\n    addUserMessage(message: string): Promise<void>;\n    /**\n     * This is a convenience method for adding an AI message string to the store.\n     * Please note that this is a convenience method. Code should favor the bulk\n     * addMessages interface instead to save on round-trips to the underlying\n     * persistence layer.\n     * This method may be deprecated in a future release.\n     */\n    addAIMessage(message: string): Promise<void>;\n    /**\n     * Add a list of messages.\n     *\n     * Implementations should override this method to handle bulk addition of messages\n     * in an efficient manner to avoid unnecessary round-trips to the underlying store.\n     *\n     * @param messages - A list of BaseMessage objects to store.\n     */\n    addMessages(messages: BaseMessage[]): Promise<void>;\n    /**\n     * Remove all messages from the store.\n     */\n    clear(): Promise<void>;\n}\n/**\n * Class for storing chat message history in-memory. It extends the\n * BaseListChatMessageHistory class and provides methods to get, add, and\n * clear messages.\n */\nexport declare class InMemoryChatMessageHistory extends BaseListChatMessageHistory {\n    lc_namespace: string[];\n    private messages;\n    constructor(messages?: BaseMessage[]);\n    /**\n     * Method to get all the messages stored in the ChatMessageHistory\n     * instance.\n     * @returns Array of stored BaseMessage instances.\n     */\n    getMessages(): Promise<BaseMessage[]>;\n    /**\n     * Method to add a new message to the ChatMessageHistory instance.\n     * @param message The BaseMessage instance to add.\n     * @returns A promise that resolves when the message has been added.\n     */\n    addMessage(message: BaseMessage): Promise<void>;\n    /**\n     * Method to clear all the messages from the ChatMessageHistory instance.\n     * @returns A promise that resolves when all messages have been cleared.\n     */\n    clear(): Promise<void>;\n}\n"],"mappings":";;;;;;;AAOA;;;AAC4BG,uBADED,sBAAAA,SAA+BF,YAAAA,CACjCG;EAAO,SACFF,WAAAA,CAAAA,CAAAA,EADLE,OACKF,CADGA,WACHA,EAAAA,CAAAA;EAAW,SAAGE,UAAAA,CAAAA,OAAAA,EAAdF,WAAcE,CAAAA,EAAAA,OAAAA,CAAAA,IAAAA,CAAAA;EAAO,SACRA,cAAAA,CAAAA,OAAAA,EAAAA,MAAAA,CAAAA,EAAAA,OAAAA,CAAAA,IAAAA,CAAAA;EAAO,SACTA,YAAAA,CAAAA,OAAAA,EAAAA,MAAAA,CAAAA,EAAAA,OAAAA,CAAAA,IAAAA,CAAAA;EAAO;;;;AAJsB;AAoBzE;;;EAE+C,WAAnBA,CAAAA,QAAAA,EATFF,WASEE,EAAAA,CAAAA,EATcA,OASdA,CAAAA,IAAAA,CAAAA;EAAO,SAIFF,KAAAA,CAAAA,CAAAA,EAZXE,OAYWF,CAAAA,IAAAA,CAAAA;;;;;;AA6BpBE,uBAnCiBC,0BAAAA,SAAmCJ,YAAAA,CAmCpDG;EAAO;EAnCyD,SAAA,WAAA,CAAA,CAAA,EAEjDA,OAFiD,CAEzCF,WAFyC,EAAA,CAAA;EA0CxDI;;;EAGiB,SAMXJ,UAAAA,CAAAA,OAAAA,EA7CMA,WA6CNA,CAAAA,EA7CoBE,OA6CpBF,CAAAA,IAAAA,CAAAA;EAAW;;;;;AAT4C;;mCA5B7CE;;;;;;;;iCAQFA;;;;;;;;;wBASTF,gBAAgBE;;;;WAI7BA;;;;;;;cAOQE,0BAAAA,SAAmCD,0BAAAA;;;yBAG7BH;;;;;;iBAMRE,QAAQF;;;;;;sBAMHA,cAAcE;;;;;WAKzBA"}