{"version":3,"file":"memory.d.ts","names":["InputValues","Record","OutputValues","MemoryVariables","BaseMemory","Promise","getInputValue","getOutputValue","getPromptInputKey"],"sources":["../src/memory.d.ts"],"sourcesContent":["/**\n * Type alias for a record where the keys are strings and the values can\n * be any type. This is used to represent the input values for a Chain.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type InputValues = Record<string, any>;\n/**\n * Type alias for a record where the keys are strings and the values can\n * be any type. This is used to represent the output values from a Chain.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type OutputValues = Record<string, any>;\n/**\n * Type alias for a record where the keys are strings and the values can\n * be any type. This is used to represent the memory variables in a Chain.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type MemoryVariables = Record<string, any>;\n/**\n * Abstract base class for memory in LangChain's Chains. Memory refers to\n * the state in Chains. It can be used to store information about past\n * executions of a Chain and inject that information into the inputs of\n * future executions of the Chain.\n */\nexport declare abstract class BaseMemory {\n    abstract get memoryKeys(): string[];\n    /**\n     * Abstract method that should take an object of input values and return a\n     * Promise that resolves with an object of memory variables. The\n     * implementation of this method should load the memory variables from the\n     * provided input values.\n     * @param values An object of input values.\n     * @returns Promise that resolves with an object of memory variables.\n     */\n    abstract loadMemoryVariables(values: InputValues): Promise<MemoryVariables>;\n    /**\n     * Abstract method that should take two objects, one of input values and\n     * one of output values, and return a Promise that resolves when the\n     * context has been saved. The implementation of this method should save\n     * the context based on the provided input and output values.\n     * @param inputValues An object of input values.\n     * @param outputValues An object of output values.\n     * @returns Promise that resolves when the context has been saved.\n     */\n    abstract saveContext(inputValues: InputValues, outputValues: OutputValues): Promise<void>;\n}\n/**\n * This function is used by memory classes to select the input value\n * to use for the memory. If there is only one input value, it is used.\n * If there are multiple input values, the inputKey must be specified.\n */\nexport declare const getInputValue: (inputValues: InputValues, inputKey?: string | undefined) => any;\n/**\n * This function is used by memory classes to select the output value\n * to use for the memory. If there is only one output value, it is used.\n * If there are multiple output values, the outputKey must be specified.\n * If no outputKey is specified, an error is thrown.\n */\nexport declare const getOutputValue: (outputValues: OutputValues, outputKey?: string | undefined) => any;\n/**\n * Function used by memory classes to get the key of the prompt input,\n * excluding any keys that are memory variables or the \"stop\" key. If\n * there is not exactly one prompt input key, an error is thrown.\n */\nexport declare function getPromptInputKey(inputs: Record<string, unknown>, memoryVariables: string[]): string;\n"],"mappings":";;AAKA;AAMA;AAMA;AAOA;AAAwC,KAnB5BA,WAAAA,GAAcC,MAmBc,CAAA,MAAA,EAAA,GAAA,CAAA;;;;;;AAoBwCI,KAjCpEH,YAAAA,GAAeD,MAiCqDI,CAAAA,MAAAA,EAAAA,GAAAA,CAAAA;AAAO;AAOvF;AAOA;AAMA;;KA/CYF,eAAAA,GAAkBF;;;;;;;uBAOAG,UAAAA;;;;;;;;;;uCAUWJ,cAAcK,QAAQF;;;;;;;;;;oCAUzBH,2BAA2BE,eAAeG;;;;;;;cAO3DC,6BAA6BN;;;;;;;cAO7BO,+BAA+BL;;;;;;iBAM5BM,iBAAAA,SAA0BP"}