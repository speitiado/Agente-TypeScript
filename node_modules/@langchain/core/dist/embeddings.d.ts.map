{"version":3,"file":"embeddings.d.ts","names":["AsyncCaller","AsyncCallerParams","EmbeddingsParams","EmbeddingsInterface","TOutput","Promise","Embeddings"],"sources":["../src/embeddings.d.ts"],"sourcesContent":["import { AsyncCaller, AsyncCallerParams } from \"./utils/async_caller.js\";\n/**\n * The parameters required to initialize an instance of the Embeddings\n * class.\n */\nexport type EmbeddingsParams = AsyncCallerParams;\nexport interface EmbeddingsInterface<TOutput = number[]> {\n    /**\n     * An abstract method that takes an array of documents as input and\n     * returns a promise that resolves to an array of vectors for each\n     * document.\n     * @param documents An array of documents to be embedded.\n     * @returns A promise that resolves to an array of vectors for each document.\n     */\n    embedDocuments(documents: string[]): Promise<TOutput[]>;\n    /**\n     * An abstract method that takes a single document as input and returns a\n     * promise that resolves to a vector for the query document.\n     * @param document A single document to be embedded.\n     * @returns A promise that resolves to a vector for the query document.\n     */\n    embedQuery(document: string): Promise<TOutput>;\n}\n/**\n * An abstract class that provides methods for embedding documents and\n * queries using LangChain.\n */\nexport declare abstract class Embeddings<TOutput = number[]> implements EmbeddingsInterface<TOutput> {\n    /**\n     * The async caller should be used by subclasses to make any async calls,\n     * which will thus benefit from the concurrency and retry logic.\n     */\n    caller: AsyncCaller;\n    constructor(params: EmbeddingsParams);\n    /**\n     * An abstract method that takes an array of documents as input and\n     * returns a promise that resolves to an array of vectors for each\n     * document.\n     * @param documents An array of documents to be embedded.\n     * @returns A promise that resolves to an array of vectors for each document.\n     */\n    abstract embedDocuments(documents: string[]): Promise<TOutput[]>;\n    /**\n     * An abstract method that takes a single document as input and returns a\n     * promise that resolves to a vector for the query document.\n     * @param document A single document to be embedded.\n     * @returns A promise that resolves to a vector for the query document.\n     */\n    abstract embedQuery(document: string): Promise<TOutput>;\n}\n"],"mappings":";;;;;;AAKA;AACA;AAAoC,KADxBE,gBAAAA,GAAmBD,iBACK;AAQaG,UARhCD,mBAQgCC,CAAAA,UAAAA,MAAAA,EAAAA,CAAAA,CAAAA;EAAO;;;AAOf;AAMzC;;;EAAmG,cAKvFJ,CAAAA,SAAAA,EAAAA,MAAAA,EAAAA,CAAAA,EAlB6BK,OAkB7BL,CAlBqCI,OAkBrCJ,EAAAA,CAAAA;EAAW;;;;;;EALoE,UAAA,CAAA,QAAA,EAAA,MAAA,CAAA,EANzDK,OAMyD,CANjDD,OAMiD,CAAA;;;;;;uBAA7DE,0CAA0CH,oBAAoBC;;;;;UAKhFJ;sBACYE;;;;;;;;gDAQ0BG,QAAQD;;;;;;;yCAOfC,QAAQD"}