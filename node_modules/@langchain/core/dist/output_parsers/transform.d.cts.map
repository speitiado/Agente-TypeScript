{"version":3,"file":"transform.d.cts","names":["BaseOutputParser","BaseMessage","BaseCallbackConfig","Generation","ChatGeneration","BaseTransformOutputParser","T","AsyncGenerator","BaseCumulativeTransformOutputParserInput","BaseCumulativeTransformOutputParser","Promise"],"sources":["../../src/output_parsers/transform.d.ts"],"sourcesContent":["import { BaseOutputParser } from \"./base.js\";\nimport { type BaseMessage } from \"../messages/base.js\";\nimport type { BaseCallbackConfig } from \"../callbacks/manager.js\";\nimport { type Generation, type ChatGeneration } from \"../outputs.js\";\n/**\n * Class to parse the output of an LLM call that also allows streaming inputs.\n */\nexport declare abstract class BaseTransformOutputParser<T = unknown> extends BaseOutputParser<T> {\n    _transform(inputGenerator: AsyncGenerator<string | BaseMessage>): AsyncGenerator<T>;\n    /**\n     * Transforms an asynchronous generator of input into an asynchronous\n     * generator of parsed output.\n     * @param inputGenerator An asynchronous generator of input.\n     * @param options A configuration object.\n     * @returns An asynchronous generator of parsed output.\n     */\n    transform(inputGenerator: AsyncGenerator<string | BaseMessage>, options: BaseCallbackConfig): AsyncGenerator<T>;\n}\nexport type BaseCumulativeTransformOutputParserInput = {\n    diff?: boolean;\n};\n/**\n * A base class for output parsers that can handle streaming input. It\n * extends the `BaseTransformOutputParser` class and provides a method for\n * converting parsed outputs into a diff format.\n */\nexport declare abstract class BaseCumulativeTransformOutputParser<T = unknown> extends BaseTransformOutputParser<T> {\n    protected diff: boolean;\n    constructor(fields?: BaseCumulativeTransformOutputParserInput);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    protected abstract _diff(prev: any | undefined, next: any): any;\n    abstract parsePartialResult(generations: Generation[] | ChatGeneration[]): Promise<T | undefined>;\n    _transform(inputGenerator: AsyncGenerator<string | BaseMessage>): AsyncGenerator<T>;\n    getFormatInstructions(): string;\n}\n"],"mappings":";;;;;;;;;AAOA;AAAuD,uBAAzBK,yBAAyB,CAAA,IAAA,OAAA,CAAA,SAAsBL,gBAAtB,CAAuCM,CAAvC,CAAA,CAAA;EAAA,UAAuCA,CAAAA,cAAAA,EAC/DC,cAD+DD,CAAAA,MAAAA,GACvCL,WADuCK,CAAAA,CAAAA,EACxBC,cADwBD,CACTA,CADSA,CAAAA;EAAC;;;;;;;EASA,SAAkBA,CAAAA,cAAAA,EAAnFC,cAAmFD,CAAAA,MAAAA,GAA3DL,WAA2DK,CAAAA,EAAAA,OAAAA,EAApCJ,kBAAoCI,CAAAA,EAAfC,cAAeD,CAAAA,CAAAA,CAAAA;;AATpCN,KAWjEQ,wCAAAA,GAXiER;EAAgB,IAAA,CAAA,EAAA,OAAA;AAW7F,CAAA;AAQA;;;;;AAK4DI,uBAL9BK,mCAK8BL,CAAAA,IAAAA,OAAAA,CAAAA,SAL2BC,yBAK3BD,CALqDE,CAKrDF,CAAAA,CAAAA;EAAc,UAAaE,IAAAA,EAAAA,OAAAA;EAAC,WAATI,CAAAA,MAAAA,CAAAA,EAHtDF,wCAGsDE;EAAO;EACpB,mBAAnCH,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAAAA,SAAAA,EAAAA,IAAAA,EAAAA,GAAAA,CAAAA,EAAAA,GAAAA;EAAc,SAAwCD,kBAAAA,CAAAA,WAAAA,EADxCH,UACwCG,EAAAA,GADzBF,cACyBE,EAAAA,CAAAA,EADNI,OACMJ,CADEA,CACFA,GAAAA,SAAAA,CAAAA;EAAC,UAAhBC,CAAAA,cAAAA,EAAvCA,cAAuCA,CAAAA,MAAAA,GAAfN,WAAeM,CAAAA,CAAAA,EAAAA,cAAAA,CAAeD,CAAfC,CAAAA;EAAc,qBANGF,CAAAA,CAAAA,EAAAA,MAAAA;AAAyB"}