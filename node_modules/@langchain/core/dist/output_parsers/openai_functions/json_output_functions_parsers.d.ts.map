{"version":3,"file":"json_output_functions_parsers.d.ts","names":["Optional","Generation","ChatGeneration","BaseLLMOutputParser","BaseCumulativeTransformOutputParser","BaseCumulativeTransformOutputParserInput","JsonSchema7ObjectType","Operation","JSONPatchOperation","FunctionParameters","OutputFunctionsParser","Promise","JsonOutputFunctionsParser","Record","Output","JsonKeyOutputFunctionsParser","T"],"sources":["../../../src/output_parsers/openai_functions/json_output_functions_parsers.d.ts"],"sourcesContent":["import { Optional } from \"../../types/type-utils.js\";\nimport { Generation, ChatGeneration } from \"../../outputs.js\";\nimport { BaseLLMOutputParser } from \"../base.js\";\nimport { BaseCumulativeTransformOutputParser, BaseCumulativeTransformOutputParserInput } from \"../transform.js\";\nimport { JsonSchema7ObjectType } from \"../../utils/json_schema.js\";\nimport { type Operation as JSONPatchOperation } from \"../../utils/json_patch.js\";\n/**\n * Represents optional parameters for a function in a JSON Schema.\n */\nexport type FunctionParameters = Optional<JsonSchema7ObjectType, \"additionalProperties\">;\n/**\n * Class for parsing the output of an LLM. Can be configured to return\n * only the arguments of the function call in the output.\n */\nexport declare class OutputFunctionsParser extends BaseLLMOutputParser<string> {\n    static lc_name(): string;\n    lc_namespace: string[];\n    lc_serializable: boolean;\n    argsOnly: boolean;\n    constructor(config?: {\n        argsOnly?: boolean;\n    });\n    /**\n     * Parses the output and returns a string representation of the function\n     * call or its arguments.\n     * @param generations The output of the LLM to parse.\n     * @returns A string representation of the function call or its arguments.\n     */\n    parseResult(generations: Generation[] | ChatGeneration[]): Promise<string>;\n}\n/**\n * Class for parsing the output of an LLM into a JSON object. Uses an\n * instance of `OutputFunctionsParser` to parse the output.\n */\nexport declare class JsonOutputFunctionsParser<\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nOutput extends Record<string, any> = Record<string, any>> extends BaseCumulativeTransformOutputParser<Output> {\n    static lc_name(): string;\n    lc_namespace: string[];\n    lc_serializable: boolean;\n    outputParser: OutputFunctionsParser;\n    argsOnly: boolean;\n    constructor(config?: {\n        argsOnly?: boolean;\n    } & BaseCumulativeTransformOutputParserInput);\n    protected _diff(prev: unknown | undefined, next: unknown): JSONPatchOperation[] | undefined;\n    parsePartialResult(generations: ChatGeneration[]): Promise<Output | undefined>;\n    /**\n     * Parses the output and returns a JSON object. If `argsOnly` is true,\n     * only the arguments of the function call are returned.\n     * @param generations The output of the LLM to parse.\n     * @returns A JSON object representation of the function call or its arguments.\n     */\n    parseResult(generations: Generation[] | ChatGeneration[]): Promise<Output>;\n    parse(text: string): Promise<Output>;\n    getFormatInstructions(): string;\n}\n/**\n * Class for parsing the output of an LLM into a JSON object and returning\n * a specific attribute. Uses an instance of `JsonOutputFunctionsParser`\n * to parse the output.\n */\nexport declare class JsonKeyOutputFunctionsParser<\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nT extends Record<string, any> = Record<string, any>> extends BaseLLMOutputParser<T> {\n    static lc_name(): string;\n    lc_namespace: string[];\n    lc_serializable: boolean;\n    outputParser: JsonOutputFunctionsParser<Record<string, any>>;\n    attrName: string;\n    get lc_aliases(): {\n        attrName: string;\n    };\n    constructor(fields: {\n        attrName: string;\n    });\n    /**\n     * Parses the output and returns a specific attribute of the parsed JSON\n     * object.\n     * @param generations The output of the LLM to parse.\n     * @returns The value of a specific attribute of the parsed JSON object.\n     */\n    parseResult(generations: Generation[] | ChatGeneration[]): Promise<T>;\n}\n"],"mappings":";;;;;;;;;;;AASA;AAA8B,KAAlBS,kBAAAA,GAAqBT,QAAH,CAAYM,qBAAZ,EAAA,sBAAA,CAAA;;;AAAW;AAKzC;AAA0C,cAArBI,qBAAAA,SAA8BP,mBAAT,CAAA,MAAA,CAAA,CAAA;EAAA,OAcbF,OAAAA,CAAAA,CAAAA,EAAAA,MAAAA;EAAU,YAAKC,EAAAA,MAAAA,EAAAA;EAAc,eAAKS,EAAAA,OAAAA;EAAO,QAdnBR,EAAAA,OAAAA;EAAmB,WAAA,CAAA,MAoBxB,CApBwB,EAAA;IAoBjDS,QAAAA,CAAAA,EAAAA,OAAAA;EAAyB,CAAA;EAAA;;;;;;EAWmC,WAC7CV,CAAAA,WAAAA,EAlBPD,UAkBOC,EAAAA,GAlBQA,cAkBRA,EAAAA,CAAAA,EAlB2BS,OAkB3BT,CAAAA,MAAAA,CAAAA;;;;;;AAO2BS,cAnB1CC,yBAmB0CD;;eAjBhDE,MAkBUF,CAAAA,MAAAA,EAAAA,GAAAA,CAAAA,GAlBYE,MAkBZF,CAAAA,MAAAA,EAAAA,GAAAA,CAAAA,CAAAA,SAlByCP,mCAkBzCO,CAlB6EG,MAkB7EH,CAAAA,CAAAA;EAAO,OAlBkCP,OAAAA,CAAAA,CAAAA,EAAAA,MAAAA;EAAmC,YAAA,EAAA,MAAA,EAAA;EA0BhFW,eAAAA,EAAAA,OAAAA;EAA4B,YAAA,EAtB/BL,qBAsB+B;EAAA,QAEvCG,EAAAA,OAAAA;EAAM,WAAgBA,CAAAA,MAIYA,CAJZA,EAAAA;IAAiDG,QAAAA,CAAAA,EAAAA,OAAAA;EAAC,CAAA,GApB1EX,wCAwBoCQ;EAAM,UAAhCD,KAAAA,CAAAA,IAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,IAAAA,EAAAA,OAAAA,CAAAA,EAvB6CJ,SAuB7CI,EAAAA,GAAAA,SAAAA;EAAyB,kBAcdX,CAAAA,WAAAA,EApCOC,cAoCPD,EAAAA,CAAAA,EApC0BU,OAoC1BV,CApCkCa,MAoClCb,GAAAA,SAAAA,CAAAA;EAAU;;;;AAlByC;;2BAXnDA,eAAeC,mBAAmBS,QAAQG;uBAC9CH,QAAQG;;;;;;;;cAQZC;;UAEXF,sBAAsBA,6BAA6BV,oBAAoBa;;;;gBAI/DJ,0BAA0BC;;;;;;;;;;;;;;2BAcfZ,eAAeC,mBAAmBS,QAAQK"}