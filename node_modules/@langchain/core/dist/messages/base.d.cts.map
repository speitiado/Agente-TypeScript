{"version":3,"file":"base.d.cts","names":["Serializable","SerializedConstructor","ContentBlock","$InferMessageContent","$InferResponseMetadata","MessageStructure","MessageType","Message","MESSAGE_SYMBOL","StoredMessageData","Record","StoredMessage","StoredGeneration","StoredMessageV1","MessageContent","Array","FunctionCall","BaseMessageFields","TStructure","TRole","Standard","OpenAIToolCall","Partial","mergeContent","_mergeStatus","BaseMessage","NonNullable","Symbol","toStringTag","isOpenAIToolCallArray","_mergeDicts","_mergeLists","Content","_mergeObj","T","BaseMessageChunk","MessageFieldWithRole","_isMessageFieldWithRole","BaseMessageLike","isBaseMessage","isBaseMessageChunk"],"sources":["../../src/messages/base.d.ts"],"sourcesContent":["import { Serializable, SerializedConstructor } from \"../load/serializable.js\";\nimport { ContentBlock } from \"./content/index.js\";\nimport { $InferMessageContent, $InferResponseMetadata, MessageStructure, MessageType, Message } from \"./message.js\";\n/** @internal */\ndeclare const MESSAGE_SYMBOL: unique symbol;\nexport interface StoredMessageData {\n    content: string;\n    role: string | undefined;\n    name: string | undefined;\n    tool_call_id: string | undefined;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    additional_kwargs?: Record<string, any>;\n    /** Response metadata. For example: response headers, logprobs, token counts, model name. */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    response_metadata?: Record<string, any>;\n    id?: string;\n}\nexport interface StoredMessage {\n    type: string;\n    data: StoredMessageData;\n}\nexport interface StoredGeneration {\n    text: string;\n    message?: StoredMessage;\n}\nexport interface StoredMessageV1 {\n    type: string;\n    role: string | undefined;\n    text: string;\n}\nexport type MessageContent = string | Array<ContentBlock>;\nexport interface FunctionCall {\n    /**\n     * The arguments to call the function with, as generated by the model in JSON\n     * format. Note that the model does not always generate valid JSON, and may\n     * hallucinate parameters not defined by your function schema. Validate the\n     * arguments in your code before calling your function.\n     */\n    arguments: string;\n    /**\n     * The name of the function to call.\n     */\n    name: string;\n}\nexport type BaseMessageFields<TStructure extends MessageStructure = MessageStructure, TRole extends MessageType = MessageType> = {\n    id?: string;\n    name?: string;\n    content?: $InferMessageContent<TStructure, TRole>;\n    contentBlocks?: Array<ContentBlock.Standard>;\n    /** @deprecated */\n    additional_kwargs?: {\n        /**\n         * @deprecated Use \"tool_calls\" field on AIMessages instead\n         */\n        function_call?: FunctionCall;\n        /**\n         * @deprecated Use \"tool_calls\" field on AIMessages instead\n         */\n        tool_calls?: OpenAIToolCall[];\n        [key: string]: unknown;\n    };\n    response_metadata?: Partial<$InferResponseMetadata<TStructure, TRole>>;\n};\nexport declare function mergeContent(firstContent: MessageContent, secondContent: MessageContent): MessageContent;\n/**\n * 'Merge' two statuses. If either value passed is 'error', it will return 'error'. Else\n * it will return 'success'.\n *\n * @param {\"success\" | \"error\" | undefined} left The existing value to 'merge' with the new value.\n * @param {\"success\" | \"error\" | undefined} right The new value to 'merge' with the existing value\n * @returns {\"success\" | \"error\"} The 'merged' value.\n */\nexport declare function _mergeStatus(left?: \"success\" | \"error\", right?: \"success\" | \"error\"): \"success\" | \"error\" | undefined;\n/**\n * Base class for all types of messages in a conversation. It includes\n * properties like `content`, `name`, and `additional_kwargs`. It also\n * includes methods like `toDict()` and `_getType()`.\n */\nexport declare abstract class BaseMessage<TStructure extends MessageStructure = MessageStructure, TRole extends MessageType = MessageType> extends Serializable implements Message<TStructure, TRole> {\n    lc_namespace: string[];\n    lc_serializable: boolean;\n    get lc_aliases(): Record<string, string>;\n    readonly [MESSAGE_SYMBOL]: true;\n    abstract readonly type: TRole;\n    id?: string;\n    name?: string;\n    content: $InferMessageContent<TStructure, TRole>;\n    additional_kwargs: NonNullable<BaseMessageFields<TStructure, TRole>[\"additional_kwargs\"]>;\n    response_metadata: NonNullable<BaseMessageFields<TStructure, TRole>[\"response_metadata\"]>;\n    /**\n     * @deprecated Use .getType() instead or import the proper typeguard.\n     * For example:\n     *\n     * ```ts\n     * import { isAIMessage } from \"@langchain/core/messages\";\n     *\n     * const message = new AIMessage(\"Hello!\");\n     * isAIMessage(message); // true\n     * ```\n     */\n    _getType(): MessageType;\n    /**\n     * @deprecated Use .type instead\n     * The type of the message.\n     */\n    getType(): MessageType;\n    constructor(arg: $InferMessageContent<TStructure, TRole> | BaseMessageFields<TStructure, TRole>);\n    /** Get text content of the message. */\n    get text(): string;\n    get contentBlocks(): Array<ContentBlock.Standard>;\n    toDict(): StoredMessage;\n    static lc_name(): string;\n    // Can't be protected for silly reasons\n    get _printableFields(): Record<string, unknown>;\n    static isInstance(obj: unknown): obj is BaseMessage;\n    // this private method is used to update the ID for the runtime\n    // value as well as in lc_kwargs for serialisation\n    _updateId(value: string | undefined): void;\n    get [Symbol.toStringTag](): any;\n}\n/**\n * @deprecated Use \"tool_calls\" field on AIMessages instead\n */\nexport type OpenAIToolCall = {\n    /**\n     * The ID of the tool call.\n     */\n    id: string;\n    /**\n     * The function that the model called.\n     */\n    function: FunctionCall;\n    /**\n     * The type of the tool. Currently, only `function` is supported.\n     */\n    type: \"function\";\n    index?: number;\n};\nexport declare function isOpenAIToolCallArray(value?: unknown): value is OpenAIToolCall[];\nexport declare function _mergeDicts(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nleft?: Record<string, any>, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nright?: Record<string, any>\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n): Record<string, any>;\nexport declare function _mergeLists<Content extends ContentBlock>(left?: Content[], right?: Content[]): Content[] | undefined;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport declare function _mergeObj<T = any>(left: T | undefined, right: T | undefined): T;\n/**\n * Represents a chunk of a message, which can be concatenated with other\n * message chunks. It includes a method `_merge_kwargs_dict()` for merging\n * additional keyword arguments from another `BaseMessageChunk` into this\n * one. It also overrides the `__add__()` method to support concatenation\n * of `BaseMessageChunk` instances.\n */\nexport declare abstract class BaseMessageChunk<TStructure extends MessageStructure = MessageStructure, TRole extends MessageType = MessageType> extends BaseMessage<TStructure, TRole> {\n    abstract concat(chunk: BaseMessageChunk): BaseMessageChunk<TStructure, TRole>;\n    static isInstance(obj: unknown): obj is BaseMessageChunk;\n}\nexport type MessageFieldWithRole = {\n    role: MessageType;\n    content: MessageContent;\n    name?: string;\n} & Record<string, unknown>;\nexport declare function _isMessageFieldWithRole(x: BaseMessageLike): x is MessageFieldWithRole;\nexport type BaseMessageLike = BaseMessage | MessageFieldWithRole | [MessageType, MessageContent] | string\n/**\n * @deprecated Specifying \"type\" is deprecated and will be removed in 0.4.0.\n */\n | ({\n    type: MessageType | \"user\" | \"assistant\" | \"placeholder\";\n} & BaseMessageFields & Record<string, unknown>) | SerializedConstructor;\n/**\n * @deprecated Use {@link BaseMessage.isInstance} instead\n */\nexport declare function isBaseMessage(messageLike?: unknown): messageLike is BaseMessage;\n/**\n * @deprecated Use {@link BaseMessageChunk.isInstance} instead\n */\nexport declare function isBaseMessageChunk(messageLike?: unknown): messageLike is BaseMessageChunk;\nexport {};\n"],"mappings":"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"}