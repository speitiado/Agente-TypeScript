{"version":3,"file":"google_vertexai.js","names":["message: AIMessage","ChatVertexTranslator: StandardContentBlockTranslator"],"sources":["../../../src/messages/block_translators/google_vertexai.ts"],"sourcesContent":["import { AIMessage } from \"../ai.js\";\nimport { ContentBlock } from \"../content/index.js\";\nimport type { StandardContentBlockTranslator } from \"./index.js\";\nimport { _isArray, _isContentBlock, _isString, iife } from \"./utils.js\";\n\nfunction convertToV1FromChatVertexMessage(\n  message: AIMessage\n): Array<ContentBlock.Standard> {\n  // see `/libs/providers/langchain-google-common/src/utils/gemini.ts:partsToMessageContent`\n  function* iterateContent(): Iterable<ContentBlock.Standard> {\n    const content =\n      typeof message.content === \"string\"\n        ? [{ type: \"text\", text: message.content }]\n        : message.content;\n    for (const block of content) {\n      if (_isContentBlock(block, \"reasoning\") && _isString(block.reasoning)) {\n        const signature = iife(() => {\n          const reasoningIndex = content.indexOf(block);\n          if (\n            _isArray(message.additional_kwargs?.signatures) &&\n            reasoningIndex >= 0\n          ) {\n            return message.additional_kwargs.signatures.at(reasoningIndex);\n          }\n          return undefined;\n        });\n        if (_isString(signature)) {\n          yield {\n            type: \"reasoning\",\n            reasoning: block.reasoning,\n            signature,\n          };\n        } else {\n          yield {\n            type: \"reasoning\",\n            reasoning: block.reasoning,\n          };\n        }\n        continue;\n      } else if (_isContentBlock(block, \"text\") && _isString(block.text)) {\n        yield { type: \"text\", text: block.text };\n        continue;\n      } else if (_isContentBlock(block, \"image_url\")) {\n        if (_isString(block.image_url)) {\n          if (block.image_url.startsWith(\"data:\")) {\n            const dataUrlRegex = /^data:([^;]+);base64,(.+)$/;\n            const match = block.image_url.match(dataUrlRegex);\n            if (match) {\n              yield { type: \"image\", data: match[2], mimeType: match[1] };\n            } else {\n              yield { type: \"image\", url: block.image_url };\n            }\n          } else {\n            yield { type: \"image\", url: block.image_url };\n          }\n        }\n        continue;\n      } else if (\n        _isContentBlock(block, \"media\") &&\n        _isString(block.mimeType) &&\n        _isString(block.data)\n      ) {\n        yield { type: \"file\", mimeType: block.mimeType, data: block.data };\n        continue;\n      }\n      yield { type: \"non_standard\", value: block };\n    }\n  }\n  return Array.from(iterateContent());\n}\n\nexport const ChatVertexTranslator: StandardContentBlockTranslator = {\n  translateContent: convertToV1FromChatVertexMessage,\n  translateContentChunk: convertToV1FromChatVertexMessage,\n};\n"],"mappings":";;;AAKA,SAAS,iCACPA,SAC8B;CAE9B,UAAU,iBAAkD;EAC1D,MAAM,UACJ,OAAO,QAAQ,YAAY,WACvB,CAAC;GAAE,MAAM;GAAQ,MAAM,QAAQ;EAAS,CAAC,IACzC,QAAQ;AACd,OAAK,MAAM,SAAS,SAAS;AAC3B,OAAI,gBAAgB,OAAO,YAAY,IAAI,UAAU,MAAM,UAAU,EAAE;IACrE,MAAM,YAAY,KAAK,MAAM;KAC3B,MAAM,iBAAiB,QAAQ,QAAQ,MAAM;AAC7C,SACE,SAAS,QAAQ,mBAAmB,WAAW,IAC/C,kBAAkB,EAElB,QAAO,QAAQ,kBAAkB,WAAW,GAAG,eAAe;AAEhE,YAAO;IACR,EAAC;AACF,QAAI,UAAU,UAAU,EACtB,MAAM;KACJ,MAAM;KACN,WAAW,MAAM;KACjB;IACD;SAED,MAAM;KACJ,MAAM;KACN,WAAW,MAAM;IAClB;AAEH;GACD,WAAU,gBAAgB,OAAO,OAAO,IAAI,UAAU,MAAM,KAAK,EAAE;IAClE,MAAM;KAAE,MAAM;KAAQ,MAAM,MAAM;IAAM;AACxC;GACD,WAAU,gBAAgB,OAAO,YAAY,EAAE;AAC9C,QAAI,UAAU,MAAM,UAAU,CAC5B,KAAI,MAAM,UAAU,WAAW,QAAQ,EAAE;KACvC,MAAM,eAAe;KACrB,MAAM,QAAQ,MAAM,UAAU,MAAM,aAAa;AACjD,SAAI,OACF,MAAM;MAAE,MAAM;MAAS,MAAM,MAAM;MAAI,UAAU,MAAM;KAAI;UAE3D,MAAM;MAAE,MAAM;MAAS,KAAK,MAAM;KAAW;IAEhD,OACC,MAAM;KAAE,MAAM;KAAS,KAAK,MAAM;IAAW;AAGjD;GACD,WACC,gBAAgB,OAAO,QAAQ,IAC/B,UAAU,MAAM,SAAS,IACzB,UAAU,MAAM,KAAK,EACrB;IACA,MAAM;KAAE,MAAM;KAAQ,UAAU,MAAM;KAAU,MAAM,MAAM;IAAM;AAClE;GACD;GACD,MAAM;IAAE,MAAM;IAAgB,OAAO;GAAO;EAC7C;CACF;AACD,QAAO,MAAM,KAAK,gBAAgB,CAAC;AACpC;AAED,MAAaC,uBAAuD;CAClE,kBAAkB;CAClB,uBAAuB;AACxB"}