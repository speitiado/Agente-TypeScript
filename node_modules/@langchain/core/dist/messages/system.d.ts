import { BaseMessage, BaseMessageChunk, BaseMessageFields } from "./base.js";
import { $InferMessageContent, MessageStructure } from "./message.js";

//#region src/messages/system.d.ts
interface SystemMessageFields<TStructure extends MessageStructure = MessageStructure> extends BaseMessageFields<TStructure, "system"> {}
/**
 * Represents a system message in a conversation.
 */
declare class SystemMessage<TStructure extends MessageStructure = MessageStructure> extends BaseMessage<TStructure, "system"> {
  static lc_name(): string;
  readonly type: "system";
  constructor(fields: $InferMessageContent<TStructure, "system"> | SystemMessageFields<TStructure>);
  static isInstance(obj: unknown): obj is SystemMessage;
}
/**
 * Represents a chunk of a system message, which can be concatenated with
 * other system message chunks.
 */
declare class SystemMessageChunk<TStructure extends MessageStructure = MessageStructure> extends BaseMessageChunk<TStructure, "system"> {
  static lc_name(): string;
  readonly type: "system";
  constructor(fields: $InferMessageContent<TStructure, "system"> | SystemMessageFields<TStructure>);
  concat(chunk: SystemMessageChunk<TStructure>): this;
  static isInstance(obj: unknown): obj is SystemMessageChunk;
}
/**
 * @deprecated Use {@link SystemMessage.isInstance} instead
 */
declare function isSystemMessage<TStructure extends MessageStructure>(x: BaseMessage): x is SystemMessage<TStructure>;
/**
 * @deprecated Use {@link SystemMessageChunk.isInstance} instead
 */
declare function isSystemMessageChunk<TStructure extends MessageStructure>(x: BaseMessageChunk): x is SystemMessageChunk<TStructure>;
//#endregion
export { SystemMessage, SystemMessageChunk, SystemMessageFields, isSystemMessage, isSystemMessageChunk };
//# sourceMappingURL=system.d.ts.map