{"version":3,"file":"ai.d.ts","names":["BaseMessage","BaseMessageChunk","BaseMessageFields","ContentBlock","$InferMessageContent","$InferMessageProperty","MessageStructure","InvalidToolCall","ToolCall","ToolCallChunk","AIMessageFields","TStructure","AIMessage","Record","Standard","Array","isAIMessage","isAIMessageChunk","AIMessageChunk","AIMessageChunkFields"],"sources":["../../src/messages/ai.d.ts"],"sourcesContent":["import { BaseMessage, BaseMessageChunk, BaseMessageFields } from \"./base.js\";\nimport { ContentBlock } from \"./content/index.js\";\nimport { $InferMessageContent, $InferMessageProperty, MessageStructure } from \"./message.js\";\nimport { InvalidToolCall, ToolCall, ToolCallChunk } from \"./tool.js\";\nexport interface AIMessageFields<TStructure extends MessageStructure = MessageStructure> extends BaseMessageFields<TStructure, \"ai\"> {\n    tool_calls?: ToolCall[];\n    invalid_tool_calls?: InvalidToolCall[];\n    usage_metadata?: $InferMessageProperty<TStructure, \"ai\", \"usage_metadata\">;\n}\nexport declare class AIMessage<TStructure extends MessageStructure = MessageStructure> extends BaseMessage<TStructure, \"ai\"> implements AIMessageFields<TStructure> {\n    readonly type: \"ai\";\n    tool_calls?: ToolCall[];\n    invalid_tool_calls?: InvalidToolCall[];\n    usage_metadata?: AIMessageFields<TStructure>[\"usage_metadata\"];\n    get lc_aliases(): Record<string, string>;\n    constructor(fields: $InferMessageContent<TStructure, \"ai\"> | AIMessageFields<TStructure>);\n    static lc_name(): string;\n    get contentBlocks(): Array<ContentBlock.Standard>;\n    get _printableFields(): Record<string, unknown>;\n    static isInstance(obj: unknown): obj is AIMessage;\n}\n/**\n * @deprecated Use {@link AIMessage.isInstance} instead\n */\nexport declare function isAIMessage<TStructure extends MessageStructure>(x: BaseMessage): x is AIMessage<TStructure>;\n/**\n * @deprecated Use {@link AIMessageChunk.isInstance} instead\n */\nexport declare function isAIMessageChunk<TStructure extends MessageStructure>(x: BaseMessageChunk): x is AIMessageChunk<TStructure>;\nexport type AIMessageChunkFields<TStructure extends MessageStructure = MessageStructure> = AIMessageFields<TStructure> & {\n    tool_call_chunks?: ToolCallChunk[];\n};\n/**\n * Represents a chunk of an AI message, which can be concatenated with\n * other AI message chunks.\n */\nexport declare class AIMessageChunk<TStructure extends MessageStructure = MessageStructure> extends BaseMessageChunk<TStructure, \"ai\"> implements AIMessage<TStructure>, AIMessageChunkFields<TStructure> {\n    readonly type: \"ai\";\n    tool_calls?: ToolCall[];\n    invalid_tool_calls?: InvalidToolCall[];\n    tool_call_chunks?: ToolCallChunk[];\n    usage_metadata?: AIMessageChunkFields<TStructure>[\"usage_metadata\"];\n    constructor(fields: $InferMessageContent<TStructure, \"ai\"> | AIMessageChunkFields<TStructure>);\n    get lc_aliases(): Record<string, string>;\n    static lc_name(): string;\n    get contentBlocks(): Array<ContentBlock.Standard>;\n    get _printableFields(): Record<string, unknown>;\n    concat(chunk: AIMessageChunk<TStructure>): this;\n    static isInstance(obj: unknown): obj is AIMessageChunk;\n}\n"],"mappings":"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"}