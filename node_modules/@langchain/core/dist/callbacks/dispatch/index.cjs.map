{"version":3,"file":"index.cjs","names":["AsyncLocalStorageProviderSingleton","AsyncLocalStorage","dispatchCustomEvent","eventName: string","payload: any","config?: RunnableConfig","ensureConfig","dispatchCustomEventWeb"],"sources":["../../../src/callbacks/dispatch/index.ts"],"sourcesContent":["/* __LC_ALLOW_ENTRYPOINT_SIDE_EFFECTS__ */\n\nimport { AsyncLocalStorage } from \"node:async_hooks\";\nimport { dispatchCustomEvent as dispatchCustomEventWeb } from \"./web.js\";\nimport { type RunnableConfig, ensureConfig } from \"../../runnables/config.js\";\nimport { AsyncLocalStorageProviderSingleton } from \"../../singletons/index.js\";\n\nAsyncLocalStorageProviderSingleton.initializeGlobalInstance(\n  new AsyncLocalStorage()\n);\n\n/**\n * Dispatch a custom event.\n *\n * Note: this method is only supported in non-web environments\n * due to usage of async_hooks to infer config.\n *\n * If you are using this method in the browser, please import and use\n * from \"@langchain/core/callbacks/dispatch/web\".\n *\n * @param name The name of the custom event.\n * @param payload The data for the custom event.\n *   Ideally should be JSON serializable to avoid serialization issues downstream, but not enforced.\n * @param config Optional config object.\n *\n * @example\n * ```typescript\n * import { dispatchCustomEvent } from \"@langchain/core/callbacks/dispatch\";\n *\n * const foo = RunnableLambda.from(async (input: string) => {\n *   await dispatchCustomEvent(\"my_custom_event\", { arbitraryField: \"someval\" });\n *   return input;\n * });\n *\n * const callbacks = [{\n *   handleCustomEvent: (eventName: string, payload: any) => {\n *     // Logs \"my_custom_event\" and { arbitraryField: \"someval\" }\n *     console.log(eventName, payload);\n *   }\n * }];\n *\n * await foo.invoke(\"hi\", { callbacks })\n * ```\n */\nexport async function dispatchCustomEvent(\n  eventName: string,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  payload: any,\n  config?: RunnableConfig\n) {\n  const ensuredConfig = ensureConfig(config);\n  await dispatchCustomEventWeb(eventName, payload, ensuredConfig);\n}\n"],"mappings":";;;;;;;;AAOAA,iDAAmC,yBACjC,IAAIC,qCACL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCD,eAAsBC,sBACpBC,WAEAC,SACAC,QACA;CACA,MAAM,gBAAgBC,4BAAa,OAAO;CAC1C,MAAMC,mDAAuB,WAAW,SAAS,cAAc;AAChE"}