{"version":3,"file":"base.d.ts","names":["ChainValues","BaseMessage","AgentAction","AgentFinish","ChatGenerationChunk","GenerationChunk","LLMResult","Serializable","Serialized","SerializedNotImplemented","SerializedFields","DocumentInterface","Error","BaseCallbackHandlerInput","NewTokenIndices","HandleLLMNewTokenCallbackFields","BaseCallbackHandlerMethodsClass","Record","Promise","CallbackHandlerMethods","CallbackHandlerPrefersStreaming","callbackHandlerPrefersStreaming","BaseCallbackHandler","___messages_message_js5","MessageStructure","MessageType","isBaseCallbackHandler"],"sources":["../../src/callbacks/base.d.ts"],"sourcesContent":["import type { ChainValues } from \"../utils/types/index.js\";\nimport type { BaseMessage } from \"../messages/base.js\";\nimport type { AgentAction, AgentFinish } from \"../agents.js\";\nimport type { ChatGenerationChunk, GenerationChunk, LLMResult } from \"../outputs.js\";\nimport { Serializable, Serialized, SerializedNotImplemented } from \"../load/serializable.js\";\nimport type { SerializedFields } from \"../load/map_keys.js\";\nimport type { DocumentInterface } from \"../documents/document.js\";\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Error = any;\n/**\n * Interface for the input parameters of the BaseCallbackHandler class. It\n * allows to specify which types of events should be ignored by the\n * callback handler.\n */\nexport interface BaseCallbackHandlerInput {\n    ignoreLLM?: boolean;\n    ignoreChain?: boolean;\n    ignoreAgent?: boolean;\n    ignoreRetriever?: boolean;\n    ignoreCustomEvent?: boolean;\n    _awaitHandler?: boolean;\n    raiseError?: boolean;\n}\n/**\n * Interface for the indices of a new token produced by an LLM or Chat\n * Model in streaming mode.\n */\nexport interface NewTokenIndices {\n    prompt: number;\n    completion: number;\n}\n// TODO: Add all additional callback fields here\nexport type HandleLLMNewTokenCallbackFields = {\n    chunk?: GenerationChunk | ChatGenerationChunk;\n};\n/**\n * Abstract class that provides a set of optional methods that can be\n * overridden in derived classes to handle various events during the\n * execution of a LangChain application.\n */\ndeclare abstract class BaseCallbackHandlerMethodsClass {\n    /**\n     * Called at the start of an LLM or Chat Model run, with the prompt(s)\n     * and the run ID.\n     */\n    handleLLMStart?(llm: Serialized, prompts: string[], runId: string, parentRunId?: string, extraParams?: Record<string, unknown>, tags?: string[], metadata?: Record<string, unknown>, runName?: string): // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Promise<any> | any;\n    /**\n     * Called when an LLM/ChatModel in `streaming` mode produces a new token\n     */\n    handleLLMNewToken?(token: string, \n    /**\n     * idx.prompt is the index of the prompt that produced the token\n     *   (if there are multiple prompts)\n     * idx.completion is the index of the completion that produced the token\n     *   (if multiple completions per prompt are requested)\n     */\n    idx: NewTokenIndices, runId: string, parentRunId?: string, tags?: string[], fields?: HandleLLMNewTokenCallbackFields): // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Promise<any> | any;\n    /**\n     * Called if an LLM/ChatModel run encounters an error\n     */\n    handleLLMError?(err: Error, runId: string, parentRunId?: string, tags?: string[], extraParams?: Record<string, unknown>): // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Promise<any> | any;\n    /**\n     * Called at the end of an LLM/ChatModel run, with the output and the run ID.\n     */\n    handleLLMEnd?(output: LLMResult, runId: string, parentRunId?: string, tags?: string[], extraParams?: Record<string, unknown>): // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Promise<any> | any;\n    /**\n     * Called at the start of a Chat Model run, with the prompt(s)\n     * and the run ID.\n     */\n    handleChatModelStart?(llm: Serialized, messages: BaseMessage[][], runId: string, parentRunId?: string, extraParams?: Record<string, unknown>, tags?: string[], metadata?: Record<string, unknown>, runName?: string): // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Promise<any> | any;\n    /**\n     * Called at the start of a Chain run, with the chain name and inputs\n     * and the run ID.\n     */\n    handleChainStart?(chain: Serialized, inputs: ChainValues, runId: string, parentRunId?: string, tags?: string[], metadata?: Record<string, unknown>, runType?: string, runName?: string): // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Promise<any> | any;\n    /**\n     * Called if a Chain run encounters an error\n     */\n    handleChainError?(err: Error, runId: string, parentRunId?: string, tags?: string[], kwargs?: {\n        inputs?: Record<string, unknown>;\n    }): // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Promise<any> | any;\n    /**\n     * Called at the end of a Chain run, with the outputs and the run ID.\n     */\n    handleChainEnd?(outputs: ChainValues, runId: string, parentRunId?: string, tags?: string[], kwargs?: {\n        inputs?: Record<string, unknown>;\n    }): // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Promise<any> | any;\n    /**\n     * Called at the start of a Tool run, with the tool name and input\n     * and the run ID.\n     */\n    handleToolStart?(tool: Serialized, input: string, runId: string, parentRunId?: string, tags?: string[], metadata?: Record<string, unknown>, runName?: string): // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Promise<any> | any;\n    /**\n     * Called if a Tool run encounters an error\n     */\n    handleToolError?(err: Error, runId: string, parentRunId?: string, tags?: string[]): // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Promise<any> | any;\n    /**\n     * Called at the end of a Tool run, with the tool output and the run ID.\n     */\n    handleToolEnd?(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    output: any, runId: string, parentRunId?: string, tags?: string[]): // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Promise<any> | any;\n    handleText?(text: string, runId: string, parentRunId?: string, tags?: string[]): Promise<void> | void;\n    /**\n     * Called when an agent is about to execute an action,\n     * with the action and the run ID.\n     */\n    handleAgentAction?(action: AgentAction, runId: string, parentRunId?: string, tags?: string[]): Promise<void> | void;\n    /**\n     * Called when an agent finishes execution, before it exits.\n     * with the final output and the run ID.\n     */\n    handleAgentEnd?(action: AgentFinish, runId: string, parentRunId?: string, tags?: string[]): Promise<void> | void;\n    handleRetrieverStart?(retriever: Serialized, query: string, runId: string, parentRunId?: string, tags?: string[], metadata?: Record<string, unknown>, name?: string): // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Promise<any> | any;\n    handleRetrieverEnd?(documents: DocumentInterface[], runId: string, parentRunId?: string, tags?: string[]): // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Promise<any> | any;\n    handleRetrieverError?(err: Error, runId: string, parentRunId?: string, tags?: string[]): // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Promise<any> | any;\n    handleCustomEvent?(eventName: string, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data: any, runId: string, tags?: string[], \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    metadata?: Record<string, any>): // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Promise<any> | any;\n}\n/**\n * Base interface for callbacks. All methods are optional. If a method is not\n * implemented, it will be ignored. If a method is implemented, it will be\n * called at the appropriate time. All methods are called with the run ID of\n * the LLM/ChatModel/Chain that is running, which is generated by the\n * CallbackManager.\n *\n * @interface\n */\nexport type CallbackHandlerMethods = BaseCallbackHandlerMethodsClass;\n/**\n * Interface for handlers that can indicate a preference for streaming responses.\n * When implemented, this allows the handler to signal whether it prefers to receive\n * streaming responses from language models rather than complete responses.\n */\nexport interface CallbackHandlerPrefersStreaming {\n    readonly lc_prefer_streaming: boolean;\n}\nexport declare function callbackHandlerPrefersStreaming(x: BaseCallbackHandler): unknown;\n/**\n * Abstract base class for creating callback handlers in the LangChain\n * framework. It provides a set of optional methods that can be overridden\n * in derived classes to handle various events during the execution of a\n * LangChain application.\n */\nexport declare abstract class BaseCallbackHandler extends BaseCallbackHandlerMethodsClass implements BaseCallbackHandlerInput, Serializable {\n    lc_serializable: boolean;\n    get lc_namespace(): [\"langchain_core\", \"callbacks\", string];\n    get lc_secrets(): {\n        [key: string]: string;\n    } | undefined;\n    get lc_attributes(): {\n        [key: string]: string;\n    } | undefined;\n    get lc_aliases(): {\n        [key: string]: string;\n    } | undefined;\n    get lc_serializable_keys(): string[] | undefined;\n    /**\n     * The name of the serializable. Override to provide an alias or\n     * to preserve the serialized module name in minified environments.\n     *\n     * Implemented as a static method to support loading logic.\n     */\n    static lc_name(): string;\n    /**\n     * The final serialized identifier for the module.\n     */\n    get lc_id(): string[];\n    lc_kwargs: SerializedFields;\n    abstract name: string;\n    ignoreLLM: boolean;\n    ignoreChain: boolean;\n    ignoreAgent: boolean;\n    ignoreRetriever: boolean;\n    ignoreCustomEvent: boolean;\n    raiseError: boolean;\n    awaitHandlers: boolean;\n    constructor(input?: BaseCallbackHandlerInput);\n    copy(): BaseCallbackHandler;\n    toJSON(): Serialized;\n    toJSONNotImplemented(): SerializedNotImplemented;\n    static fromMethods(methods: CallbackHandlerMethods): {\n        /**\n         * Called at the start of an LLM or Chat Model run, with the prompt(s)\n         * and the run ID.\n         */\n        handleLLMStart?(llm: Serialized, prompts: string[], runId: string, parentRunId?: string | undefined, extraParams?: Record<string, unknown> | undefined, tags?: string[] | undefined, metadata?: Record<string, unknown> | undefined, runName?: string | undefined): any;\n        /**\n         * Called when an LLM/ChatModel in `streaming` mode produces a new token\n         */\n        handleLLMNewToken?(token: string, idx: NewTokenIndices, runId: string, parentRunId?: string | undefined, tags?: string[] | undefined, fields?: HandleLLMNewTokenCallbackFields | undefined): any;\n        /**\n         * Called if an LLM/ChatModel run encounters an error\n         */\n        handleLLMError?(err: any, runId: string, parentRunId?: string | undefined, tags?: string[] | undefined, extraParams?: Record<string, unknown> | undefined): any;\n        /**\n         * Called at the end of an LLM/ChatModel run, with the output and the run ID.\n         */\n        handleLLMEnd?(output: LLMResult, runId: string, parentRunId?: string | undefined, tags?: string[] | undefined, extraParams?: Record<string, unknown> | undefined): any;\n        /**\n         * Called at the start of a Chat Model run, with the prompt(s)\n         * and the run ID.\n         */\n        handleChatModelStart?(llm: Serialized, messages: BaseMessage<import(\"../messages/message.js\").MessageStructure, import(\"../messages/message.js\").MessageType>[][], runId: string, parentRunId?: string | undefined, extraParams?: Record<string, unknown> | undefined, tags?: string[] | undefined, metadata?: Record<string, unknown> | undefined, runName?: string | undefined): any;\n        /**\n         * Called at the start of a Chain run, with the chain name and inputs\n         * and the run ID.\n         */\n        handleChainStart?(chain: Serialized, inputs: ChainValues, runId: string, parentRunId?: string | undefined, tags?: string[] | undefined, metadata?: Record<string, unknown> | undefined, runType?: string | undefined, runName?: string | undefined): any;\n        /**\n         * Called if a Chain run encounters an error\n         */\n        handleChainError?(err: any, runId: string, parentRunId?: string | undefined, tags?: string[] | undefined, kwargs?: {\n            inputs?: Record<string, unknown> | undefined;\n        } | undefined): any;\n        /**\n         * Called at the end of a Chain run, with the outputs and the run ID.\n         */\n        handleChainEnd?(outputs: ChainValues, runId: string, parentRunId?: string | undefined, tags?: string[] | undefined, kwargs?: {\n            inputs?: Record<string, unknown> | undefined;\n        } | undefined): any;\n        /**\n         * Called at the start of a Tool run, with the tool name and input\n         * and the run ID.\n         */\n        handleToolStart?(tool: Serialized, input: string, runId: string, parentRunId?: string | undefined, tags?: string[] | undefined, metadata?: Record<string, unknown> | undefined, runName?: string | undefined): any;\n        /**\n         * Called if a Tool run encounters an error\n         */\n        handleToolError?(err: any, runId: string, parentRunId?: string | undefined, tags?: string[] | undefined): any;\n        /**\n         * Called at the end of a Tool run, with the tool output and the run ID.\n         */\n        handleToolEnd?(output: any, runId: string, parentRunId?: string | undefined, tags?: string[] | undefined): any;\n        handleText?(text: string, runId: string, parentRunId?: string | undefined, tags?: string[] | undefined): void | Promise<void>;\n        /**\n         * Called when an agent is about to execute an action,\n         * with the action and the run ID.\n         */\n        handleAgentAction?(action: AgentAction, runId: string, parentRunId?: string | undefined, tags?: string[] | undefined): void | Promise<void>;\n        /**\n         * Called when an agent finishes execution, before it exits.\n         * with the final output and the run ID.\n         */\n        handleAgentEnd?(action: AgentFinish, runId: string, parentRunId?: string | undefined, tags?: string[] | undefined): void | Promise<void>;\n        handleRetrieverStart?(retriever: Serialized, query: string, runId: string, parentRunId?: string | undefined, tags?: string[] | undefined, metadata?: Record<string, unknown> | undefined, name?: string | undefined): any;\n        handleRetrieverEnd?(documents: DocumentInterface<Record<string, any>>[], runId: string, parentRunId?: string | undefined, tags?: string[] | undefined): any;\n        handleRetrieverError?(err: any, runId: string, parentRunId?: string | undefined, tags?: string[] | undefined): any;\n        handleCustomEvent?(eventName: string, data: any, runId: string, tags?: string[] | undefined, metadata?: Record<string, any> | undefined): any;\n        lc_serializable: boolean;\n        readonly lc_namespace: [\"langchain_core\", \"callbacks\", string];\n        readonly lc_secrets: {\n            [key: string]: string;\n        } | undefined;\n        readonly lc_attributes: {\n            [key: string]: string;\n        } | undefined;\n        readonly lc_aliases: {\n            [key: string]: string;\n        } | undefined;\n        readonly lc_serializable_keys: string[] | undefined;\n        /**\n         * The final serialized identifier for the module.\n         */\n        readonly lc_id: string[];\n        lc_kwargs: SerializedFields;\n        ignoreLLM: boolean;\n        ignoreChain: boolean;\n        ignoreAgent: boolean;\n        ignoreRetriever: boolean;\n        ignoreCustomEvent: boolean;\n        raiseError: boolean;\n        awaitHandlers: boolean;\n        copy(): BaseCallbackHandler;\n        toJSON(): Serialized;\n        toJSONNotImplemented(): SerializedNotImplemented;\n        name: string;\n    };\n}\nexport declare const isBaseCallbackHandler: (x: unknown) => boolean;\nexport {};\n"],"mappings":"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"}