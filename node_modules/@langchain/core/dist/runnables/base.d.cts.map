{"version":3,"file":"base.d.cts","names":["TraceableFunction","RunnableInterface","RunnableBatchOptions","RunnableConfig","CallbackManagerForChainRun","LogStreamCallbackHandler","LogStreamCallbackHandlerInput","RunLogPatch","EventStreamCallbackHandlerInput","StreamEvent","Serializable","IterableReadableStream","Run","Graph","ToolCall","InferInteropZodOutput","InteropZodType","RunnableFunc","RunInput","CallOptions","Record","RunOutput","Promise","RunnableMapLike","K","RunnableLike","RunnableRetryFailedAttemptHandler","_coerceToDict","Runnable","Partial","RunnableRetry","RunnableWithFallbacks","O","Error","AsyncGenerator","Omit","T","I","NewRunOutput","Exclude","Uint8Array","onStart","onEnd","onError","RunnableToolLike","RunnableBindingArgs","Array","RunnableBinding","Awaited","RunnableEach","RunInputItem","RunOutputItem","ReturnExceptions","RunnableSequenceFields","RunnableSequence","RunnableMap","AnyTraceableFunction","RunnableTraceable","RunnableLambda","RunnableParallel","Generator","_coerceToRunnable","RunnableAssignFields","RunnableAssign","RunnablePickFields","RunnablePick","RunnableToolLikeArgs","convertRunnableToTool"],"sources":["../../src/runnables/base.d.ts"],"sourcesContent":["import { type TraceableFunction } from \"langsmith/singletons/traceable\";\nimport type { RunnableInterface, RunnableBatchOptions, RunnableConfig } from \"./types.js\";\nimport { CallbackManagerForChainRun } from \"../callbacks/manager.js\";\nimport { LogStreamCallbackHandler, LogStreamCallbackHandlerInput, RunLogPatch } from \"../tracers/log_stream.js\";\nimport { EventStreamCallbackHandlerInput, StreamEvent } from \"../tracers/event_stream.js\";\nimport { Serializable } from \"../load/serializable.js\";\nimport { IterableReadableStream } from \"../utils/stream.js\";\nimport { Run } from \"../tracers/base.js\";\nimport { Graph } from \"./graph.js\";\nimport { ToolCall } from \"../messages/tool.js\";\nimport { InferInteropZodOutput, InteropZodType } from \"../utils/types/zod.js\";\nexport { type RunnableInterface, RunnableBatchOptions };\nexport type RunnableFunc<RunInput, RunOutput, CallOptions extends RunnableConfig = RunnableConfig> = (input: RunInput, options: CallOptions\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n | Record<string, any>\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n | (Record<string, any> & CallOptions)) => RunOutput | Promise<RunOutput>;\nexport type RunnableMapLike<RunInput, RunOutput> = {\n    [K in keyof RunOutput]: RunnableLike<RunInput, RunOutput[K]>;\n};\nexport type RunnableLike<\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRunInput = any, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRunOutput = any, CallOptions extends RunnableConfig = RunnableConfig> = RunnableInterface<RunInput, RunOutput, CallOptions> | RunnableFunc<RunInput, RunOutput, CallOptions> | RunnableMapLike<RunInput, RunOutput>;\nexport type RunnableRetryFailedAttemptHandler = (\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nerror: any, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ninput: any\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => any;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport declare function _coerceToDict(value: any, defaultKey: string): any;\n/**\n * A Runnable is a generic unit of work that can be invoked, batched, streamed, and/or\n * transformed.\n */\nexport declare abstract class Runnable<\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRunInput = any, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRunOutput = any, CallOptions extends RunnableConfig = RunnableConfig> extends Serializable implements RunnableInterface<RunInput, RunOutput, CallOptions> {\n    protected lc_runnable: boolean;\n    name?: string;\n    getName(suffix?: string): string;\n    abstract invoke(input: RunInput, options?: Partial<CallOptions>): Promise<RunOutput>;\n    /**\n     * Add retry logic to an existing runnable.\n     * @param fields.stopAfterAttempt The number of attempts to retry.\n     * @param fields.onFailedAttempt A function that is called when a retry fails.\n     * @returns A new RunnableRetry that, when invoked, will retry according to the parameters.\n     */\n    withRetry(fields?: {\n        stopAfterAttempt?: number;\n        onFailedAttempt?: RunnableRetryFailedAttemptHandler;\n    }): RunnableRetry<RunInput, RunOutput, CallOptions>;\n    /**\n     * Bind config to a Runnable, returning a new Runnable.\n     * @param config New configuration parameters to attach to the new runnable.\n     * @returns A new RunnableBinding with a config matching what's passed.\n     */\n    withConfig(config: Partial<CallOptions>): Runnable<RunInput, RunOutput, CallOptions>;\n    /**\n     * Create a new runnable from the current one that will try invoking\n     * other passed fallback runnables if the initial invocation fails.\n     * @param fields.fallbacks Other runnables to call if the runnable errors.\n     * @returns A new RunnableWithFallbacks.\n     */\n    withFallbacks(fields: {\n        fallbacks: Runnable<RunInput, RunOutput>[];\n    } | Runnable<RunInput, RunOutput>[]): RunnableWithFallbacks<RunInput, RunOutput>;\n    protected _getOptionsList<O extends CallOptions & {\n        runType?: string;\n    }>(options: Partial<O> | Partial<O>[], length?: number): Partial<O>[];\n    /**\n     * Default implementation of batch, which calls invoke N times.\n     * Subclasses should override this method if they can batch more efficiently.\n     * @param inputs Array of inputs to each batch call.\n     * @param options Either a single call options object to apply to each batch call or an array for each call.\n     * @param batchOptions.returnExceptions Whether to return errors rather than throwing on the first one\n     * @returns An array of RunOutputs, or mixed RunOutputs and errors if batchOptions.returnExceptions is set\n     */\n    batch(inputs: RunInput[], options?: Partial<CallOptions> | Partial<CallOptions>[], batchOptions?: RunnableBatchOptions & {\n        returnExceptions?: false;\n    }): Promise<RunOutput[]>;\n    batch(inputs: RunInput[], options?: Partial<CallOptions> | Partial<CallOptions>[], batchOptions?: RunnableBatchOptions & {\n        returnExceptions: true;\n    }): Promise<(RunOutput | Error)[]>;\n    batch(inputs: RunInput[], options?: Partial<CallOptions> | Partial<CallOptions>[], batchOptions?: RunnableBatchOptions): Promise<(RunOutput | Error)[]>;\n    /**\n     * Default streaming implementation.\n     * Subclasses should override this method if they support streaming output.\n     * @param input\n     * @param options\n     */\n    _streamIterator(input: RunInput, options?: Partial<CallOptions>): AsyncGenerator<RunOutput>;\n    /**\n     * Stream output in chunks.\n     * @param input\n     * @param options\n     * @returns A readable stream that is also an iterable.\n     */\n    stream(input: RunInput, options?: Partial<CallOptions>): Promise<IterableReadableStream<RunOutput>>;\n    protected _separateRunnableConfigFromCallOptions(options?: Partial<CallOptions>): [RunnableConfig, Omit<Partial<CallOptions>, keyof RunnableConfig>];\n    protected _callWithConfig<T extends RunInput>(func: ((input: T) => Promise<RunOutput>) | ((input: T, config?: Partial<CallOptions>, runManager?: CallbackManagerForChainRun) => Promise<RunOutput>), input: T, options?: Partial<CallOptions> & {\n        runType?: string;\n    }): Promise<RunOutput>;\n    /**\n     * Internal method that handles batching and configuration for a runnable\n     * It takes a function, input values, and optional configuration, and\n     * returns a promise that resolves to the output values.\n     * @param func The function to be executed for each input value.\n     * @param input The input values to be processed.\n     * @param config Optional configuration for the function execution.\n     * @returns A promise that resolves to the output values.\n     */\n    _batchWithConfig<T extends RunInput>(func: (inputs: T[], options?: Partial<CallOptions>[], runManagers?: (CallbackManagerForChainRun | undefined)[], batchOptions?: RunnableBatchOptions) => Promise<(RunOutput | Error)[]>, inputs: T[], options?: Partial<CallOptions & {\n        runType?: string;\n    }> | Partial<CallOptions & {\n        runType?: string;\n    }>[], batchOptions?: RunnableBatchOptions): Promise<(RunOutput | Error)[]>;\n    /** @internal */\n    _concatOutputChunks<O>(first: O, second: O): O;\n    /**\n     * Helper method to transform an Iterator of Input values into an Iterator of\n     * Output values, with callbacks.\n     * Use this to implement `stream()` or `transform()` in Runnable subclasses.\n     */\n    protected _transformStreamWithConfig<I extends RunInput, O extends RunOutput>(inputGenerator: AsyncGenerator<I>, transformer: (generator: AsyncGenerator<I>, runManager?: CallbackManagerForChainRun, options?: Partial<CallOptions>) => AsyncGenerator<O>, options?: Partial<CallOptions> & {\n        runType?: string;\n    }): AsyncGenerator<O>;\n    getGraph(_?: RunnableConfig): Graph;\n    /**\n     * Create a new runnable sequence that runs each individual runnable in series,\n     * piping the output of one runnable into another runnable or runnable-like.\n     * @param coerceable A runnable, function, or object whose values are functions or runnables.\n     * @returns A new runnable sequence.\n     */\n    pipe<NewRunOutput>(coerceable: RunnableLike<RunOutput, NewRunOutput>): Runnable<RunInput, Exclude<NewRunOutput, Error>>;\n    /**\n     * Pick keys from the dict output of this runnable. Returns a new runnable.\n     */\n    pick(keys: string | string[]): Runnable;\n    /**\n     * Assigns new fields to the dict output of this runnable. Returns a new runnable.\n     */\n    assign(mapping: RunnableMapLike<Record<string, unknown>, Record<string, unknown>>): Runnable;\n    /**\n     * Default implementation of transform, which buffers input and then calls stream.\n     * Subclasses should override this method if they can start producing output while\n     * input is still being generated.\n     * @param generator\n     * @param options\n     */\n    transform(generator: AsyncGenerator<RunInput>, options: Partial<CallOptions>): AsyncGenerator<RunOutput>;\n    /**\n     * Stream all output from a runnable, as reported to the callback system.\n     * This includes all inner runs of LLMs, Retrievers, Tools, etc.\n     * Output is streamed as Log objects, which include a list of\n     * jsonpatch ops that describe how the state of the run has changed in each\n     * step, and the final state of the run.\n     * The jsonpatch ops can be applied in order to construct state.\n     * @param input\n     * @param options\n     * @param streamOptions\n     */\n    streamLog(input: RunInput, options?: Partial<CallOptions>, streamOptions?: Omit<LogStreamCallbackHandlerInput, \"autoClose\">): AsyncGenerator<RunLogPatch>;\n    protected _streamLog(input: RunInput, logStreamCallbackHandler: LogStreamCallbackHandler, config: Partial<CallOptions>): AsyncGenerator<RunLogPatch>;\n    /**\n     * Generate a stream of events emitted by the internal steps of the runnable.\n     *\n     * Use to create an iterator over StreamEvents that provide real-time information\n     * about the progress of the runnable, including StreamEvents from intermediate\n     * results.\n     *\n     * A StreamEvent is a dictionary with the following schema:\n     *\n     * - `event`: string - Event names are of the format: on_[runnable_type]_(start|stream|end).\n     * - `name`: string - The name of the runnable that generated the event.\n     * - `run_id`: string - Randomly generated ID associated with the given execution of\n     *   the runnable that emitted the event. A child runnable that gets invoked as part of the execution of a\n     *   parent runnable is assigned its own unique ID.\n     * - `tags`: string[] - The tags of the runnable that generated the event.\n     * - `metadata`: Record<string, any> - The metadata of the runnable that generated the event.\n     * - `data`: Record<string, any>\n     *\n     * Below is a table that illustrates some events that might be emitted by various\n     * chains. Metadata fields have been omitted from the table for brevity.\n     * Chain definitions have been included after the table.\n     *\n     * **ATTENTION** This reference table is for the V2 version of the schema.\n     *\n     * ```md\n     * +----------------------+-----------------------------+------------------------------------------+\n     * | event                | input                       | output/chunk                             |\n     * +======================+=============================+==========================================+\n     * | on_chat_model_start  | {\"messages\": BaseMessage[]} |                                          |\n     * +----------------------+-----------------------------+------------------------------------------+\n     * | on_chat_model_stream |                             | AIMessageChunk(\"hello\")                  |\n     * +----------------------+-----------------------------+------------------------------------------+\n     * | on_chat_model_end    | {\"messages\": BaseMessage[]} | AIMessageChunk(\"hello world\")            |\n     * +----------------------+-----------------------------+------------------------------------------+\n     * | on_llm_start         | {'input': 'hello'}          |                                          |\n     * +----------------------+-----------------------------+------------------------------------------+\n     * | on_llm_stream        |                             | 'Hello'                                  |\n     * +----------------------+-----------------------------+------------------------------------------+\n     * | on_llm_end           | 'Hello human!'              |                                          |\n     * +----------------------+-----------------------------+------------------------------------------+\n     * | on_chain_start       |                             |                                          |\n     * +----------------------+-----------------------------+------------------------------------------+\n     * | on_chain_stream      |                             | \"hello world!\"                           |\n     * +----------------------+-----------------------------+------------------------------------------+\n     * | on_chain_end         | [Document(...)]             | \"hello world!, goodbye world!\"           |\n     * +----------------------+-----------------------------+------------------------------------------+\n     * | on_tool_start        | {\"x\": 1, \"y\": \"2\"}          |                                          |\n     * +----------------------+-----------------------------+------------------------------------------+\n     * | on_tool_end          |                             | {\"x\": 1, \"y\": \"2\"}                       |\n     * +----------------------+-----------------------------+------------------------------------------+\n     * | on_retriever_start   | {\"query\": \"hello\"}          |                                          |\n     * +----------------------+-----------------------------+------------------------------------------+\n     * | on_retriever_end     | {\"query\": \"hello\"}          | [Document(...), ..]                      |\n     * +----------------------+-----------------------------+------------------------------------------+\n     * | on_prompt_start      | {\"question\": \"hello\"}       |                                          |\n     * +----------------------+-----------------------------+------------------------------------------+\n     * | on_prompt_end        | {\"question\": \"hello\"}       | ChatPromptValue(messages: BaseMessage[]) |\n     * +----------------------+-----------------------------+------------------------------------------+\n     * ```\n     *\n     * The \"on_chain_*\" events are the default for Runnables that don't fit one of the above categories.\n     *\n     * In addition to the standard events above, users can also dispatch custom events.\n     *\n     * Custom events will be only be surfaced with in the `v2` version of the API!\n     *\n     * A custom event has following format:\n     *\n     * ```md\n     * +-----------+------+------------------------------------------------------------+\n     * | Attribute | Type | Description                                                |\n     * +===========+======+============================================================+\n     * | name      | str  | A user defined name for the event.                         |\n     * +-----------+------+------------------------------------------------------------+\n     * | data      | Any  | The data associated with the event. This can be anything.  |\n     * +-----------+------+------------------------------------------------------------+\n     * ```\n     *\n     * Here's an example:\n     *\n     * ```ts\n     * import { RunnableLambda } from \"@langchain/core/runnables\";\n     * import { dispatchCustomEvent } from \"@langchain/core/callbacks/dispatch\";\n     * // Use this import for web environments that don't support \"async_hooks\"\n     * // and manually pass config to child runs.\n     * // import { dispatchCustomEvent } from \"@langchain/core/callbacks/dispatch/web\";\n     *\n     * const slowThing = RunnableLambda.from(async (someInput: string) => {\n     *   // Placeholder for some slow operation\n     *   await new Promise((resolve) => setTimeout(resolve, 100));\n     *   await dispatchCustomEvent(\"progress_event\", {\n     *    message: \"Finished step 1 of 2\",\n     *  });\n     *  await new Promise((resolve) => setTimeout(resolve, 100));\n     *  return \"Done\";\n     * });\n     *\n     * const eventStream = await slowThing.streamEvents(\"hello world\", {\n     *   version: \"v2\",\n     * });\n     *\n     * for await (const event of eventStream) {\n     *  if (event.event === \"on_custom_event\") {\n     *    console.log(event);\n     *  }\n     * }\n     * ```\n     */\n    streamEvents(input: RunInput, options: Partial<CallOptions> & {\n        version: \"v1\" | \"v2\";\n    }, streamOptions?: Omit<EventStreamCallbackHandlerInput, \"autoClose\">): IterableReadableStream<StreamEvent>;\n    streamEvents(input: RunInput, options: Partial<CallOptions> & {\n        version: \"v1\" | \"v2\";\n        encoding: \"text/event-stream\";\n    }, streamOptions?: Omit<EventStreamCallbackHandlerInput, \"autoClose\">): IterableReadableStream<Uint8Array>;\n    private _streamEventsV2;\n    private _streamEventsV1;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static isRunnable(thing: any): thing is Runnable;\n    /**\n     * Bind lifecycle listeners to a Runnable, returning a new Runnable.\n     * The Run object contains information about the run, including its id,\n     * type, input, output, error, startTime, endTime, and any tags or metadata\n     * added to the run.\n     *\n     * @param {Object} params - The object containing the callback functions.\n     * @param {(run: Run) => void} params.onStart - Called before the runnable starts running, with the Run object.\n     * @param {(run: Run) => void} params.onEnd - Called after the runnable finishes running, with the Run object.\n     * @param {(run: Run) => void} params.onError - Called if the runnable throws an error, with the Run object.\n     */\n    withListeners({ onStart, onEnd, onError }: {\n        onStart?: (run: Run, config?: RunnableConfig) => void | Promise<void>;\n        onEnd?: (run: Run, config?: RunnableConfig) => void | Promise<void>;\n        onError?: (run: Run, config?: RunnableConfig) => void | Promise<void>;\n    }): Runnable<RunInput, RunOutput, CallOptions>;\n    /**\n     * Convert a runnable to a tool. Return a new instance of `RunnableToolLike`\n     * which contains the runnable, name, description and schema.\n     *\n     * @template {T extends RunInput = RunInput} RunInput - The input type of the runnable. Should be the same as the `RunInput` type of the runnable.\n     *\n     * @param fields\n     * @param {string | undefined} [fields.name] The name of the tool. If not provided, it will default to the name of the runnable.\n     * @param {string | undefined} [fields.description] The description of the tool. Falls back to the description on the Zod schema if not provided, or undefined if neither are provided.\n     * @param {z.ZodType<T>} [fields.schema] The Zod schema for the input of the tool. Infers the Zod type from the input type of the runnable.\n     * @returns {RunnableToolLike<z.ZodType<T>, RunOutput>} An instance of `RunnableToolLike` which is a runnable that can be used as a tool.\n     */\n    asTool<T extends RunInput = RunInput>(fields: {\n        name?: string;\n        description?: string;\n        schema: InteropZodType<T>;\n    }): RunnableToolLike<InteropZodType<T | ToolCall>, RunOutput>;\n}\nexport type RunnableBindingArgs<RunInput, RunOutput, CallOptions extends RunnableConfig = RunnableConfig> = {\n    bound: Runnable<RunInput, RunOutput, CallOptions>;\n    /** @deprecated Use {@link config} instead. */\n    kwargs?: Partial<CallOptions>;\n    config: RunnableConfig;\n    configFactories?: Array<(config: RunnableConfig) => RunnableConfig | Promise<RunnableConfig>>;\n};\n/**\n * Wraps a runnable and applies partial config upon invocation.\n *\n * @example\n * ```typescript\n * import {\n *   type RunnableConfig,\n *   RunnableLambda,\n * } from \"@langchain/core/runnables\";\n *\n * const enhanceProfile = (\n *   profile: Record<string, any>,\n *   config?: RunnableConfig\n * ) => {\n *   if (config?.configurable?.role) {\n *     return { ...profile, role: config.configurable.role };\n *   }\n *   return profile;\n * };\n *\n * const runnable = RunnableLambda.from(enhanceProfile);\n *\n * // Bind configuration to the runnable to set the user's role dynamically\n * const adminRunnable = runnable.withConfig({ configurable: { role: \"Admin\" } });\n * const userRunnable = runnable.withConfig({ configurable: { role: \"User\" } });\n *\n * const result1 = await adminRunnable.invoke({\n *   name: \"Alice\",\n *   email: \"alice@example.com\"\n * });\n *\n * // { name: \"Alice\", email: \"alice@example.com\", role: \"Admin\" }\n *\n * const result2 = await userRunnable.invoke({\n *   name: \"Bob\",\n *   email: \"bob@example.com\"\n * });\n *\n * // { name: \"Bob\", email: \"bob@example.com\", role: \"User\" }\n * ```\n */\nexport declare class RunnableBinding<RunInput, RunOutput, CallOptions extends RunnableConfig = RunnableConfig> extends Runnable<RunInput, RunOutput, CallOptions> {\n    static lc_name(): string;\n    lc_namespace: string[];\n    lc_serializable: boolean;\n    bound: Runnable<RunInput, RunOutput, CallOptions>;\n    config: RunnableConfig;\n    kwargs?: Partial<CallOptions>;\n    configFactories?: Array<(config: RunnableConfig) => RunnableConfig | Promise<RunnableConfig>>;\n    constructor(fields: RunnableBindingArgs<RunInput, RunOutput, CallOptions>);\n    getName(suffix?: string | undefined): string;\n    _mergeConfig(...options: (Partial<CallOptions> | RunnableConfig | undefined)[]): Promise<Partial<CallOptions>>;\n    withConfig(config: Partial<CallOptions>): Runnable<RunInput, RunOutput, CallOptions>;\n    withRetry(fields?: {\n        stopAfterAttempt?: number;\n        onFailedAttempt?: RunnableRetryFailedAttemptHandler;\n    }): RunnableRetry<RunInput, RunOutput, CallOptions>;\n    invoke(input: RunInput, options?: Partial<CallOptions>): Promise<RunOutput>;\n    batch(inputs: RunInput[], options?: Partial<CallOptions> | Partial<CallOptions>[], batchOptions?: RunnableBatchOptions & {\n        returnExceptions?: false;\n    }): Promise<RunOutput[]>;\n    batch(inputs: RunInput[], options?: Partial<CallOptions> | Partial<CallOptions>[], batchOptions?: RunnableBatchOptions & {\n        returnExceptions: true;\n    }): Promise<(RunOutput | Error)[]>;\n    batch(inputs: RunInput[], options?: Partial<CallOptions> | Partial<CallOptions>[], batchOptions?: RunnableBatchOptions): Promise<(RunOutput | Error)[]>;\n    /** @internal */\n    _concatOutputChunks<O>(first: O, second: O): O;\n    _streamIterator(input: RunInput, options?: Partial<CallOptions> | undefined): AsyncGenerator<Awaited<RunOutput>, void, any>;\n    stream(input: RunInput, options?: Partial<CallOptions> | undefined): Promise<IterableReadableStream<RunOutput>>;\n    transform(generator: AsyncGenerator<RunInput>, options?: Partial<CallOptions>): AsyncGenerator<RunOutput>;\n    streamEvents(input: RunInput, options: Partial<CallOptions> & {\n        version: \"v1\" | \"v2\";\n    }, streamOptions?: Omit<LogStreamCallbackHandlerInput, \"autoClose\">): IterableReadableStream<StreamEvent>;\n    streamEvents(input: RunInput, options: Partial<CallOptions> & {\n        version: \"v1\" | \"v2\";\n        encoding: \"text/event-stream\";\n    }, streamOptions?: Omit<LogStreamCallbackHandlerInput, \"autoClose\">): IterableReadableStream<Uint8Array>;\n    static isRunnableBinding(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    thing: any\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ): thing is RunnableBinding<any, any, any>;\n    /**\n     * Bind lifecycle listeners to a Runnable, returning a new Runnable.\n     * The Run object contains information about the run, including its id,\n     * type, input, output, error, startTime, endTime, and any tags or metadata\n     * added to the run.\n     *\n     * @param {Object} params - The object containing the callback functions.\n     * @param {(run: Run) => void} params.onStart - Called before the runnable starts running, with the Run object.\n     * @param {(run: Run) => void} params.onEnd - Called after the runnable finishes running, with the Run object.\n     * @param {(run: Run) => void} params.onError - Called if the runnable throws an error, with the Run object.\n     */\n    withListeners({ onStart, onEnd, onError }: {\n        onStart?: (run: Run, config?: RunnableConfig) => void | Promise<void>;\n        onEnd?: (run: Run, config?: RunnableConfig) => void | Promise<void>;\n        onError?: (run: Run, config?: RunnableConfig) => void | Promise<void>;\n    }): Runnable<RunInput, RunOutput, CallOptions>;\n}\n/**\n * A runnable that delegates calls to another runnable\n * with each element of the input sequence.\n * @example\n * ```typescript\n * import { RunnableEach, RunnableLambda } from \"@langchain/core/runnables\";\n *\n * const toUpperCase = (input: string): string => input.toUpperCase();\n * const addGreeting = (input: string): string => `Hello, ${input}!`;\n *\n * const upperCaseLambda = RunnableLambda.from(toUpperCase);\n * const greetingLambda = RunnableLambda.from(addGreeting);\n *\n * const chain = new RunnableEach({\n *   bound: upperCaseLambda.pipe(greetingLambda),\n * });\n *\n * const result = await chain.invoke([\"alice\", \"bob\", \"carol\"])\n *\n * // [\"Hello, ALICE!\", \"Hello, BOB!\", \"Hello, CAROL!\"]\n * ```\n */\nexport declare class RunnableEach<RunInputItem, RunOutputItem, CallOptions extends RunnableConfig> extends Runnable<RunInputItem[], RunOutputItem[], CallOptions> {\n    static lc_name(): string;\n    lc_serializable: boolean;\n    lc_namespace: string[];\n    bound: Runnable<RunInputItem, RunOutputItem, CallOptions>;\n    constructor(fields: {\n        bound: Runnable<RunInputItem, RunOutputItem, CallOptions>;\n    });\n    /**\n     * Invokes the runnable with the specified input and configuration.\n     * @param input The input to invoke the runnable with.\n     * @param config The configuration to invoke the runnable with.\n     * @returns A promise that resolves to the output of the runnable.\n     */\n    invoke(inputs: RunInputItem[], config?: Partial<CallOptions>): Promise<RunOutputItem[]>;\n    /**\n     * A helper method that is used to invoke the runnable with the specified input and configuration.\n     * @param input The input to invoke the runnable with.\n     * @param config The configuration to invoke the runnable with.\n     * @returns A promise that resolves to the output of the runnable.\n     */\n    protected _invoke(inputs: RunInputItem[], config?: Partial<CallOptions>, runManager?: CallbackManagerForChainRun): Promise<RunOutputItem[]>;\n    /**\n     * Bind lifecycle listeners to a Runnable, returning a new Runnable.\n     * The Run object contains information about the run, including its id,\n     * type, input, output, error, startTime, endTime, and any tags or metadata\n     * added to the run.\n     *\n     * @param {Object} params - The object containing the callback functions.\n     * @param {(run: Run) => void} params.onStart - Called before the runnable starts running, with the Run object.\n     * @param {(run: Run) => void} params.onEnd - Called after the runnable finishes running, with the Run object.\n     * @param {(run: Run) => void} params.onError - Called if the runnable throws an error, with the Run object.\n     */\n    withListeners({ onStart, onEnd, onError }: {\n        onStart?: (run: Run, config?: RunnableConfig) => void | Promise<void>;\n        onEnd?: (run: Run, config?: RunnableConfig) => void | Promise<void>;\n        onError?: (run: Run, config?: RunnableConfig) => void | Promise<void>;\n    }): Runnable<any, any, CallOptions>;\n}\n/**\n * Base class for runnables that can be retried a\n * specified number of times.\n * @example\n * ```typescript\n * import {\n *   RunnableLambda,\n *   RunnableRetry,\n * } from \"@langchain/core/runnables\";\n *\n * // Simulate an API call that fails\n * const simulateApiCall = (input: string): string => {\n *   console.log(`Attempting API call with input: ${input}`);\n *   throw new Error(\"API call failed due to network issue\");\n * };\n *\n * const apiCallLambda = RunnableLambda.from(simulateApiCall);\n *\n * // Apply retry logic using the .withRetry() method\n * const apiCallWithRetry = apiCallLambda.withRetry({ stopAfterAttempt: 3 });\n *\n * // Alternatively, create a RunnableRetry instance manually\n * const manualRetry = new RunnableRetry({\n *   bound: apiCallLambda,\n *   maxAttemptNumber: 3,\n *   config: {},\n * });\n *\n * // Example invocation using the .withRetry() method\n * const res = await apiCallWithRetry\n *   .invoke(\"Request 1\")\n *   .catch((error) => {\n *     console.error(\"Failed after multiple retries:\", error.message);\n *   });\n *\n * // Example invocation using the manual retry instance\n * const res2 = await manualRetry\n *   .invoke(\"Request 2\")\n *   .catch((error) => {\n *     console.error(\"Failed after multiple retries:\", error.message);\n *   });\n * ```\n */\nexport declare class RunnableRetry<\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRunInput = any, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRunOutput = any, CallOptions extends RunnableConfig = RunnableConfig> extends RunnableBinding<RunInput, RunOutput, CallOptions> {\n    static lc_name(): string;\n    lc_namespace: string[];\n    protected maxAttemptNumber: number;\n    onFailedAttempt: RunnableRetryFailedAttemptHandler;\n    constructor(fields: RunnableBindingArgs<RunInput, RunOutput, CallOptions> & {\n        maxAttemptNumber?: number;\n        onFailedAttempt?: RunnableRetryFailedAttemptHandler;\n    });\n    _patchConfigForRetry(attempt: number, config?: Partial<CallOptions>, runManager?: CallbackManagerForChainRun): Partial<CallOptions>;\n    protected _invoke(input: RunInput, config?: CallOptions, runManager?: CallbackManagerForChainRun): Promise<RunOutput>;\n    /**\n     * Method that invokes the runnable with the specified input, run manager,\n     * and config. It handles the retry logic by catching any errors and\n     * recursively invoking itself with the updated config for the next retry\n     * attempt.\n     * @param input The input for the runnable.\n     * @param runManager The run manager for the runnable.\n     * @param config The config for the runnable.\n     * @returns A promise that resolves to the output of the runnable.\n     */\n    invoke(input: RunInput, config?: CallOptions): Promise<RunOutput>;\n    _batch<ReturnExceptions extends boolean = false>(inputs: RunInput[], configs?: RunnableConfig[], runManagers?: (CallbackManagerForChainRun | undefined)[], batchOptions?: RunnableBatchOptions): Promise<ReturnExceptions extends false ? RunOutput[] : (RunOutput | Error)[]>;\n    batch(inputs: RunInput[], options?: Partial<CallOptions> | Partial<CallOptions>[], batchOptions?: RunnableBatchOptions & {\n        returnExceptions?: false;\n    }): Promise<RunOutput[]>;\n    batch(inputs: RunInput[], options?: Partial<CallOptions> | Partial<CallOptions>[], batchOptions?: RunnableBatchOptions & {\n        returnExceptions: true;\n    }): Promise<(RunOutput | Error)[]>;\n    batch(inputs: RunInput[], options?: Partial<CallOptions> | Partial<CallOptions>[], batchOptions?: RunnableBatchOptions): Promise<(RunOutput | Error)[]>;\n}\nexport type RunnableSequenceFields<RunInput, RunOutput> = {\n    first: Runnable<RunInput>;\n    middle?: Runnable[];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    last: Runnable<any, RunOutput>;\n    name?: string;\n    omitSequenceTags?: boolean;\n};\n/**\n * A sequence of runnables, where the output of each is the input of the next.\n * @example\n * ```typescript\n * const promptTemplate = PromptTemplate.fromTemplate(\n *   \"Tell me a joke about {topic}\",\n * );\n * const chain = RunnableSequence.from([promptTemplate, new ChatOpenAI({ model: \"gpt-4o-mini\" })]);\n * const result = await chain.invoke({ topic: \"bears\" });\n * ```\n */\nexport declare class RunnableSequence<\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRunInput = any, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRunOutput = any> extends Runnable<RunInput, RunOutput> {\n    static lc_name(): string;\n    protected first: Runnable<RunInput>;\n    protected middle: Runnable[];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    protected last: Runnable<any, RunOutput>;\n    omitSequenceTags: boolean;\n    lc_serializable: boolean;\n    lc_namespace: string[];\n    constructor(fields: RunnableSequenceFields<RunInput, RunOutput>);\n    get steps(): Runnable<any, any, RunnableConfig<Record<string, any>>>[];\n    invoke(input: RunInput, options?: RunnableConfig): Promise<RunOutput>;\n    batch(inputs: RunInput[], options?: Partial<RunnableConfig> | Partial<RunnableConfig>[], batchOptions?: RunnableBatchOptions & {\n        returnExceptions?: false;\n    }): Promise<RunOutput[]>;\n    batch(inputs: RunInput[], options?: Partial<RunnableConfig> | Partial<RunnableConfig>[], batchOptions?: RunnableBatchOptions & {\n        returnExceptions: true;\n    }): Promise<(RunOutput | Error)[]>;\n    batch(inputs: RunInput[], options?: Partial<RunnableConfig> | Partial<RunnableConfig>[], batchOptions?: RunnableBatchOptions): Promise<(RunOutput | Error)[]>;\n    /** @internal */\n    _concatOutputChunks<O>(first: O, second: O): O;\n    _streamIterator(input: RunInput, options?: RunnableConfig): AsyncGenerator<RunOutput>;\n    getGraph(config?: RunnableConfig): Graph;\n    pipe<NewRunOutput>(coerceable: RunnableLike<RunOutput, NewRunOutput>): RunnableSequence<RunInput, Exclude<NewRunOutput, Error>>;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static isRunnableSequence(thing: any): thing is RunnableSequence;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static from<RunInput = any, RunOutput = any>([first, ...runnables]: [\n        RunnableLike<RunInput>,\n        ...RunnableLike[],\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        RunnableLike<any, RunOutput>\n    ], nameOrFields?: string | Omit<RunnableSequenceFields<RunInput, RunOutput>, \"first\" | \"middle\" | \"last\">): RunnableSequence<RunInput, Exclude<RunOutput, Error>>;\n}\n/**\n * A runnable that runs a mapping of runnables in parallel,\n * and returns a mapping of their outputs.\n * @example\n * ```typescript\n * const mapChain = RunnableMap.from({\n *   joke: PromptTemplate.fromTemplate(\"Tell me a joke about {topic}\").pipe(\n *     new ChatAnthropic({}),\n *   ),\n *   poem: PromptTemplate.fromTemplate(\"write a 2-line poem about {topic}\").pipe(\n *     new ChatAnthropic({}),\n *   ),\n * });\n * const result = await mapChain.invoke({ topic: \"bear\" });\n * ```\n */\nexport declare class RunnableMap<\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRunInput = any, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRunOutput extends Record<string, any> = Record<string, any>> extends Runnable<RunInput, RunOutput> {\n    static lc_name(): string;\n    lc_namespace: string[];\n    lc_serializable: boolean;\n    protected steps: Record<string, Runnable<RunInput>>;\n    getStepsKeys(): string[];\n    constructor(fields: {\n        steps: RunnableMapLike<RunInput, RunOutput>;\n    });\n    static from<RunInput, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    RunOutput extends Record<string, any> = Record<string, any>>(steps: RunnableMapLike<RunInput, RunOutput>): RunnableMap<RunInput, RunOutput>;\n    invoke(input: RunInput, options?: Partial<RunnableConfig>): Promise<RunOutput>;\n    _transform(generator: AsyncGenerator<RunInput>, runManager?: CallbackManagerForChainRun, options?: Partial<RunnableConfig>): AsyncGenerator<RunOutput>;\n    transform(generator: AsyncGenerator<RunInput>, options?: Partial<RunnableConfig>): AsyncGenerator<RunOutput>;\n    stream(input: RunInput, options?: Partial<RunnableConfig>): Promise<IterableReadableStream<RunOutput>>;\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype AnyTraceableFunction = TraceableFunction<(...any: any[]) => any>;\n/**\n * A runnable that wraps a traced LangSmith function.\n */\nexport declare class RunnableTraceable<RunInput, RunOutput> extends Runnable<RunInput, RunOutput> {\n    lc_serializable: boolean;\n    lc_namespace: string[];\n    protected func: AnyTraceableFunction;\n    constructor(fields: {\n        func: AnyTraceableFunction;\n    });\n    invoke(input: RunInput, options?: Partial<RunnableConfig>): Promise<RunOutput>;\n    _streamIterator(input: RunInput, options?: Partial<RunnableConfig>): AsyncGenerator<RunOutput>;\n    static from(func: AnyTraceableFunction): RunnableTraceable<unknown, unknown>;\n}\n/**\n * A runnable that wraps an arbitrary function that takes a single argument.\n * @example\n * ```typescript\n * import { RunnableLambda } from \"@langchain/core/runnables\";\n *\n * const add = (input: { x: number; y: number }) => input.x + input.y;\n *\n * const multiply = (input: { value: number; multiplier: number }) =>\n *   input.value * input.multiplier;\n *\n * // Create runnables for the functions\n * const addLambda = RunnableLambda.from(add);\n * const multiplyLambda = RunnableLambda.from(multiply);\n *\n * // Chain the lambdas for a mathematical operation\n * const chainedLambda = addLambda.pipe((result) =>\n *   multiplyLambda.invoke({ value: result, multiplier: 2 })\n * );\n *\n * // Example invocation of the chainedLambda\n * const result = await chainedLambda.invoke({ x: 2, y: 3 });\n *\n * // Will log \"10\" (since (2 + 3) * 2 = 10)\n * ```\n */\nexport declare class RunnableLambda<RunInput, RunOutput, CallOptions extends RunnableConfig = RunnableConfig> extends Runnable<RunInput, RunOutput, CallOptions> {\n    static lc_name(): string;\n    lc_namespace: string[];\n    protected func: RunnableFunc<RunInput, RunOutput | Runnable<RunInput, RunOutput, CallOptions>, CallOptions>;\n    constructor(fields: {\n        func: RunnableFunc<RunInput, RunOutput | Runnable<RunInput, RunOutput, CallOptions>, CallOptions> | TraceableFunction<RunnableFunc<RunInput, RunOutput | Runnable<RunInput, RunOutput, CallOptions>, CallOptions>>;\n    });\n    static from<RunInput, RunOutput, CallOptions extends RunnableConfig = RunnableConfig>(func: RunnableFunc<RunInput, RunOutput | Runnable<RunInput, RunOutput, CallOptions>, CallOptions>): RunnableLambda<RunInput, RunOutput, CallOptions>;\n    static from<RunInput, RunOutput, CallOptions extends RunnableConfig = RunnableConfig>(func: TraceableFunction<RunnableFunc<RunInput, RunOutput | Runnable<RunInput, RunOutput, CallOptions>, CallOptions>>): RunnableLambda<RunInput, RunOutput, CallOptions>;\n    _invoke(input: RunInput, config?: Partial<CallOptions>, runManager?: CallbackManagerForChainRun): Promise<RunOutput>;\n    invoke(input: RunInput, options?: Partial<CallOptions>): Promise<RunOutput>;\n    _transform(generator: AsyncGenerator<RunInput>, runManager?: CallbackManagerForChainRun, config?: Partial<CallOptions>): AsyncGenerator<RunOutput>;\n    transform(generator: AsyncGenerator<RunInput>, options?: Partial<CallOptions>): AsyncGenerator<RunOutput>;\n    stream(input: RunInput, options?: Partial<CallOptions>): Promise<IterableReadableStream<RunOutput>>;\n}\n/**\n * A runnable that runs a mapping of runnables in parallel,\n * and returns a mapping of their outputs.\n * @example\n * ```typescript\n * import {\n *   RunnableLambda,\n *   RunnableParallel,\n * } from \"@langchain/core/runnables\";\n *\n * const addYears = (age: number): number => age + 5;\n * const yearsToFifty = (age: number): number => 50 - age;\n * const yearsToHundred = (age: number): number => 100 - age;\n *\n * const addYearsLambda = RunnableLambda.from(addYears);\n * const milestoneFiftyLambda = RunnableLambda.from(yearsToFifty);\n * const milestoneHundredLambda = RunnableLambda.from(yearsToHundred);\n *\n * // Pipe will coerce objects into RunnableParallel by default, but we\n * // explicitly instantiate one here to demonstrate\n * const sequence = addYearsLambda.pipe(\n *   RunnableParallel.from({\n *     years_to_fifty: milestoneFiftyLambda,\n *     years_to_hundred: milestoneHundredLambda,\n *   })\n * );\n *\n * // Invoke the sequence with a single age input\n * const res = await sequence.invoke(25);\n *\n * // { years_to_fifty: 20, years_to_hundred: 70 }\n * ```\n */\nexport declare class RunnableParallel<RunInput> extends RunnableMap<RunInput> {\n}\n/**\n * A Runnable that can fallback to other Runnables if it fails.\n * External APIs (e.g., APIs for a language model) may at times experience\n * degraded performance or even downtime.\n *\n * In these cases, it can be useful to have a fallback Runnable that can be\n * used in place of the original Runnable (e.g., fallback to another LLM provider).\n *\n * Fallbacks can be defined at the level of a single Runnable, or at the level\n * of a chain of Runnables. Fallbacks are tried in order until one succeeds or\n * all fail.\n *\n * While you can instantiate a `RunnableWithFallbacks` directly, it is usually\n * more convenient to use the `withFallbacks` method on an existing Runnable.\n *\n * When streaming, fallbacks will only be called on failures during the initial\n * stream creation. Errors that occur after a stream starts will not fallback\n * to the next Runnable.\n *\n * @example\n * ```typescript\n * import {\n *   RunnableLambda,\n *   RunnableWithFallbacks,\n * } from \"@langchain/core/runnables\";\n *\n * const primaryOperation = (input: string): string => {\n *   if (input !== \"safe\") {\n *     throw new Error(\"Primary operation failed due to unsafe input\");\n *   }\n *   return `Processed: ${input}`;\n * };\n *\n * // Define a fallback operation that processes the input differently\n * const fallbackOperation = (input: string): string =>\n *   `Fallback processed: ${input}`;\n *\n * const primaryRunnable = RunnableLambda.from(primaryOperation);\n * const fallbackRunnable = RunnableLambda.from(fallbackOperation);\n *\n * // Apply the fallback logic using the .withFallbacks() method\n * const runnableWithFallback = primaryRunnable.withFallbacks([fallbackRunnable]);\n *\n * // Alternatively, create a RunnableWithFallbacks instance manually\n * const manualFallbackChain = new RunnableWithFallbacks({\n *   runnable: primaryRunnable,\n *   fallbacks: [fallbackRunnable],\n * });\n *\n * // Example invocation using .withFallbacks()\n * const res = await runnableWithFallback\n *   .invoke(\"unsafe input\")\n *   .catch((error) => {\n *     console.error(\"Failed after all attempts:\", error.message);\n *   });\n *\n * // \"Fallback processed: unsafe input\"\n *\n * // Example invocation using manual instantiation\n * const res = await manualFallbackChain\n *   .invoke(\"safe\")\n *   .catch((error) => {\n *     console.error(\"Failed after all attempts:\", error.message);\n *   });\n *\n * // \"Processed: safe\"\n * ```\n */\nexport declare class RunnableWithFallbacks<RunInput, RunOutput> extends Runnable<RunInput, RunOutput> {\n    static lc_name(): string;\n    lc_namespace: string[];\n    lc_serializable: boolean;\n    runnable: Runnable<RunInput, RunOutput>;\n    fallbacks: Runnable<RunInput, RunOutput>[];\n    constructor(fields: {\n        runnable: Runnable<RunInput, RunOutput>;\n        fallbacks: Runnable<RunInput, RunOutput>[];\n    });\n    runnables(): Generator<Runnable<RunInput, RunOutput, RunnableConfig<Record<string, any>>>, void, unknown>;\n    invoke(input: RunInput, options?: Partial<RunnableConfig>): Promise<RunOutput>;\n    _streamIterator(input: RunInput, options?: Partial<RunnableConfig> | undefined): AsyncGenerator<RunOutput>;\n    batch(inputs: RunInput[], options?: Partial<RunnableConfig> | Partial<RunnableConfig>[], batchOptions?: RunnableBatchOptions & {\n        returnExceptions?: false;\n    }): Promise<RunOutput[]>;\n    batch(inputs: RunInput[], options?: Partial<RunnableConfig> | Partial<RunnableConfig>[], batchOptions?: RunnableBatchOptions & {\n        returnExceptions: true;\n    }): Promise<(RunOutput | Error)[]>;\n    batch(inputs: RunInput[], options?: Partial<RunnableConfig> | Partial<RunnableConfig>[], batchOptions?: RunnableBatchOptions): Promise<(RunOutput | Error)[]>;\n}\n// TODO: Figure out why the compiler needs help eliminating Error as a RunOutput type\nexport declare function _coerceToRunnable<RunInput, RunOutput, CallOptions extends RunnableConfig = RunnableConfig>(coerceable: RunnableLike<RunInput, RunOutput, CallOptions>): Runnable<RunInput, Exclude<RunOutput, Error>, CallOptions>;\nexport interface RunnableAssignFields<RunInput> {\n    mapper: RunnableMap<RunInput>;\n}\n/**\n * A runnable that assigns key-value pairs to inputs of type `Record<string, unknown>`.\n * @example\n * ```typescript\n * import {\n *   RunnableAssign,\n *   RunnableLambda,\n *   RunnableParallel,\n * } from \"@langchain/core/runnables\";\n *\n * const calculateAge = (x: { birthYear: number }): { age: number } => {\n *   const currentYear = new Date().getFullYear();\n *   return { age: currentYear - x.birthYear };\n * };\n *\n * const createGreeting = (x: { name: string }): { greeting: string } => {\n *   return { greeting: `Hello, ${x.name}!` };\n * };\n *\n * const mapper = RunnableParallel.from({\n *   age_step: RunnableLambda.from(calculateAge),\n *   greeting_step: RunnableLambda.from(createGreeting),\n * });\n *\n * const runnableAssign = new RunnableAssign({ mapper });\n *\n * const res = await runnableAssign.invoke({ name: \"Alice\", birthYear: 1990 });\n *\n * // { name: \"Alice\", birthYear: 1990, age_step: { age: 34 }, greeting_step: { greeting: \"Hello, Alice!\" } }\n * ```\n */\nexport declare class RunnableAssign<\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRunInput extends Record<string, any> = Record<string, any>, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRunOutput extends Record<string, any> = Record<string, any>, CallOptions extends RunnableConfig = RunnableConfig> extends Runnable<RunInput, RunOutput> implements RunnableAssignFields<RunInput> {\n    static lc_name(): string;\n    lc_namespace: string[];\n    lc_serializable: boolean;\n    mapper: RunnableMap<RunInput>;\n    constructor(fields: RunnableMap<RunInput> | RunnableAssignFields<RunInput>);\n    invoke(input: RunInput, options?: Partial<CallOptions>): Promise<RunOutput>;\n    _transform(generator: AsyncGenerator<RunInput>, runManager?: CallbackManagerForChainRun, options?: Partial<RunnableConfig>): AsyncGenerator<RunOutput>;\n    transform(generator: AsyncGenerator<RunInput>, options?: Partial<RunnableConfig>): AsyncGenerator<RunOutput>;\n    stream(input: RunInput, options?: Partial<RunnableConfig>): Promise<IterableReadableStream<RunOutput>>;\n}\nexport interface RunnablePickFields {\n    keys: string | string[];\n}\n/**\n * A runnable that assigns key-value pairs to inputs of type `Record<string, unknown>`.\n * Useful for streaming, can be automatically created and chained by calling `runnable.pick();`.\n * @example\n * ```typescript\n * import { RunnablePick } from \"@langchain/core/runnables\";\n *\n * const inputData = {\n *   name: \"John\",\n *   age: 30,\n *   city: \"New York\",\n *   country: \"USA\",\n *   email: \"john.doe@example.com\",\n *   phone: \"+1234567890\",\n * };\n *\n * const basicInfoRunnable = new RunnablePick([\"name\", \"city\"]);\n *\n * // Example invocation\n * const res = await basicInfoRunnable.invoke(inputData);\n *\n * // { name: 'John', city: 'New York' }\n * ```\n */\nexport declare class RunnablePick<\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRunInput extends Record<string, any> = Record<string, any>, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRunOutput extends Record<string, any> | any = Record<string, any> | any, CallOptions extends RunnableConfig = RunnableConfig> extends Runnable<RunInput, RunOutput> implements RunnablePickFields {\n    static lc_name(): string;\n    lc_namespace: string[];\n    lc_serializable: boolean;\n    keys: string | string[];\n    constructor(fields: string | string[] | RunnablePickFields);\n    _pick(input: RunInput): Promise<RunOutput>;\n    invoke(input: RunInput, options?: Partial<CallOptions>): Promise<RunOutput>;\n    _transform(generator: AsyncGenerator<RunInput>): AsyncGenerator<RunOutput>;\n    transform(generator: AsyncGenerator<RunInput>, options?: Partial<RunnableConfig>): AsyncGenerator<RunOutput>;\n    stream(input: RunInput, options?: Partial<RunnableConfig>): Promise<IterableReadableStream<RunOutput>>;\n}\nexport interface RunnableToolLikeArgs<RunInput extends InteropZodType = InteropZodType, RunOutput = unknown> extends Omit<RunnableBindingArgs<InferInteropZodOutput<RunInput>, RunOutput>, \"config\"> {\n    name: string;\n    description?: string;\n    schema: RunInput;\n    config?: RunnableConfig;\n}\nexport declare class RunnableToolLike<RunInput extends InteropZodType = InteropZodType, RunOutput = unknown> extends RunnableBinding<InferInteropZodOutput<RunInput>, RunOutput> {\n    name: string;\n    description?: string;\n    schema: RunInput;\n    constructor(fields: RunnableToolLikeArgs<RunInput, RunOutput>);\n    static lc_name(): string;\n}\n/**\n * Given a runnable and a Zod schema, convert the runnable to a tool.\n *\n * @template RunInput The input type for the runnable.\n * @template RunOutput The output type for the runnable.\n *\n * @param {Runnable<RunInput, RunOutput>} runnable The runnable to convert to a tool.\n * @param fields\n * @param {string | undefined} [fields.name] The name of the tool. If not provided, it will default to the name of the runnable.\n * @param {string | undefined} [fields.description] The description of the tool. Falls back to the description on the Zod schema if not provided, or undefined if neither are provided.\n * @param {InteropZodType<RunInput>} [fields.schema] The Zod schema for the input of the tool. Infers the Zod type from the input type of the runnable.\n * @returns {RunnableToolLike<InteropZodType<RunInput>, RunOutput>} An instance of `RunnableToolLike` which is a runnable that can be used as a tool.\n */\nexport declare function convertRunnableToTool<RunInput, RunOutput>(runnable: Runnable<RunInput, RunOutput>, fields: {\n    name?: string;\n    description?: string;\n    schema: InteropZodType<RunInput>;\n}): RunnableToolLike<InteropZodType<RunInput | ToolCall>, RunOutput>;\n"],"mappings":"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"}