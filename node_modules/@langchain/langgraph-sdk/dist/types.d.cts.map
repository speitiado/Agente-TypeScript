{"version":3,"file":"types.d.cts","names":["LangChainTracer","Checkpoint","Config","Metadata","StreamMode","MultitaskStrategy","OnConflictBehavior","OnCompletionBehavior","DisconnectMode","Durability","StreamEvent","Send","Command","Record","RunsInvokePayload","Omit","AbortController","RunsStreamPayload","TStreamMode","TSubgraphs","RunsCreatePayload","Array","CronsCreatePayload","RunsWaitPayload"],"sources":["../src/types.d.ts"],"sourcesContent":["import { LangChainTracer } from \"@langchain/core/tracers/tracer_langchain\";\nimport { Checkpoint, Config, Metadata } from \"./schema.js\";\nimport { StreamMode } from \"./types.stream.js\";\nexport type MultitaskStrategy = \"reject\" | \"interrupt\" | \"rollback\" | \"enqueue\";\nexport type OnConflictBehavior = \"raise\" | \"do_nothing\";\nexport type OnCompletionBehavior = \"complete\" | \"continue\";\nexport type DisconnectMode = \"cancel\" | \"continue\";\nexport type Durability = \"exit\" | \"async\" | \"sync\";\nexport type StreamEvent = \"events\" | \"metadata\" | \"debug\" | \"updates\" | \"values\" | \"messages/partial\" | \"messages/metadata\" | \"messages/complete\" | \"messages\" | (string & {}); // eslint-disable-line @typescript-eslint/ban-types\nexport interface Send {\n    node: string;\n    input: unknown | null;\n}\nexport interface Command {\n    /**\n     * An object to update the thread state with.\n     */\n    update?: Record<string, unknown> | [string, unknown][] | null;\n    /**\n     * The value to return from an `interrupt` function call.\n     */\n    resume?: unknown;\n    /**\n     * Determine the next node to navigate to. Can be one of the following:\n     * - Name(s) of the node names to navigate to next.\n     * - `Send` command(s) to execute node(s) with provided input.\n     */\n    goto?: Send | Send[] | string | string[];\n}\nexport interface RunsInvokePayload {\n    /**\n     * Input to the run. Pass `null` to resume from the current state of the thread.\n     */\n    input?: Record<string, unknown> | null;\n    /**\n     * Metadata for the run.\n     */\n    metadata?: Metadata;\n    /**\n     * Additional configuration for the run.\n     */\n    config?: Config;\n    /**\n     * Static context to add to the assistant.\n     * @remarks Added in LangGraph.js 0.4\n     */\n    context?: unknown;\n    /**\n     * Checkpoint ID for when creating a new run.\n     */\n    checkpointId?: string;\n    /**\n     * Checkpoint for when creating a new run.\n     */\n    checkpoint?: Omit<Checkpoint, \"thread_id\">;\n    /**\n     * Whether to checkpoint during the run (or only at the end/interruption).\n     * @deprecated Use `durability` instead.\n     */\n    checkpointDuring?: boolean;\n    /**\n     * Whether to checkpoint during the run (or only at the end/interruption).\n     * - `\"async\"`: Save checkpoint asynchronously while the next step executes (default).\n     * - `\"sync\"`: Save checkpoint synchronously before the next step starts.\n     * - `\"exit\"`: Save checkpoint only when the graph exits.\n     * @default \"async\"\n     */\n    durability?: Durability;\n    /**\n     * Interrupt execution before entering these nodes.\n     */\n    interruptBefore?: \"*\" | string[];\n    /**\n     * Interrupt execution after leaving these nodes.\n     */\n    interruptAfter?: \"*\" | string[];\n    /**\n     * Strategy to handle concurrent runs on the same thread. Only relevant if\n     * there is a pending/inflight run on the same thread. One of:\n     * - \"reject\": Reject the new run.\n     * - \"interrupt\": Interrupt the current run, keeping steps completed until now,\n         and start a new one.\n     * - \"rollback\": Cancel and delete the existing run, rolling back the thread to\n        the state before it had started, then start the new run.\n     * - \"enqueue\": Queue up the new run to start after the current run finishes.\n     */\n    multitaskStrategy?: MultitaskStrategy;\n    /**\n     * Abort controller signal to cancel the run.\n     */\n    signal?: AbortController[\"signal\"];\n    /**\n     * Behavior to handle run completion. Only relevant if\n     * there is a pending/inflight run on the same thread. One of:\n     * - \"complete\": Complete the run.\n     * - \"continue\": Continue the run.\n     */\n    onCompletion?: OnCompletionBehavior;\n    /**\n     * Webhook to call when the run is complete.\n     */\n    webhook?: string;\n    /**\n     * Behavior to handle disconnection. Only relevant if\n     * there is a pending/inflight run on the same thread. One of:\n     * - \"cancel\": Cancel the run.\n     * - \"continue\": Continue the run.\n     */\n    onDisconnect?: DisconnectMode;\n    /**\n     * The number of seconds to wait before starting the run.\n     * Use to schedule future runs.\n     */\n    afterSeconds?: number;\n    /**\n     * Behavior if the specified run doesn't exist. Defaults to \"reject\".\n     */\n    ifNotExists?: \"create\" | \"reject\";\n    /**\n     * One or more commands to invoke the graph with.\n     */\n    command?: Command;\n    /**\n     * Callback when a run is created.\n     */\n    onRunCreated?: (params: {\n        run_id: string;\n        thread_id?: string;\n    }) => void;\n    /**\n     * @internal\n     * For LangSmith tracing purposes only. Not part of the public API.\n     */\n    _langsmithTracer?: LangChainTracer;\n}\nexport interface RunsStreamPayload<TStreamMode extends StreamMode | StreamMode[] = [], TSubgraphs extends boolean = false> extends RunsInvokePayload {\n    /**\n     * One of `\"values\"`, `\"messages\"`, `\"messages-tuple\"`, `\"updates\"`, `\"events\"`, `\"debug\"`, `\"custom\"`.\n     */\n    streamMode?: TStreamMode;\n    /**\n     * Stream output from subgraphs. By default, streams only the top graph.\n     */\n    streamSubgraphs?: TSubgraphs;\n    /**\n     * Whether the stream is considered resumable.\n     * If true, the stream can be resumed and replayed in its entirety even after disconnection.\n     */\n    streamResumable?: boolean;\n    /**\n     * Pass one or more feedbackKeys if you want to request short-lived signed URLs\n     * for submitting feedback to LangSmith with this key for this run.\n     */\n    feedbackKeys?: string[];\n}\nexport interface RunsCreatePayload extends RunsInvokePayload {\n    /**\n     * One of `\"values\"`, `\"messages\"`, `\"messages-tuple\"`, `\"updates\"`, `\"events\"`, `\"debug\"`, `\"custom\"`.\n     */\n    streamMode?: StreamMode | Array<StreamMode>;\n    /**\n     * Stream output from subgraphs. By default, streams only the top graph.\n     */\n    streamSubgraphs?: boolean;\n    /**\n     * Whether the stream is considered resumable.\n     * If true, the stream can be resumed and replayed in its entirety even after disconnection.\n     */\n    streamResumable?: boolean;\n}\nexport interface CronsCreatePayload extends RunsCreatePayload {\n    /**\n     * Schedule for running the Cron Job\n     */\n    schedule: string;\n}\nexport interface RunsWaitPayload extends RunsStreamPayload {\n    /**\n     * Raise errors returned by the run. Default is `true`.\n     */\n    raiseError?: boolean;\n}\n"],"mappings":";;;;;KAGYK,iBAAAA;KACAC,kBAAAA;AADAD,KAEAE,oBAAAA,GAFiB,UAAA,GAAA,UAAA;AACjBD,KAEAE,cAAAA,GAFkB,QAAA,GAAA,UAAA;AAClBD,KAEAE,UAAAA,GAFAF,MAAoB,GAAA,OAAA,GAAA,MAAA;AACpBC,KAEAE,WAAAA,GAFc,QAAA,GAAA,UAAA,GAAA,OAAA,GAAA,SAAA,GAAA,QAAA,GAAA,kBAAA,GAAA,mBAAA,GAAA,mBAAA,GAAA,UAAA,GAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACdD,UAEKE,IAAAA,CAFK;EACVD,IAAAA,EAAAA,MAAAA;EACKC,KAAAA,EAAI,OAAA,GAAA,IAAA;AAIrB;AAAwB,UAAPC,OAAAA,CAAO;;;;WAIXC;EAYIC;;;QAQFX,CAAAA,EAAAA,OAAAA;;;;;;MAqDFa,CAAAA,EA/DFL,IA+DEK,GA/DKL,IA+DLK,EAAAA,GAAAA,MAAAA,GAAAA,MAAAA,EAAAA;;AAkBMR,UA/EFM,iBAAAA,CA+EEN;;;;EA2BFS,KAAAA,CAAAA,EAtGLJ,MAsGKI,CAAAA,MAAiB,EAAA,OAAA,CAAA,GAAA,IAAA;EAAA;;;UAIjBC,CAAAA,EAtGFf,QAsGEe;;;;EAgBAE,MAAAA,CAAAA,EAlHJlB,MAkHIkB;EAAiB;;;;SAASN,CAAAA,EAAAA,OAAAA;;AAe3C;AAMA;;;;;eA1HiBC,KAAKd;;;;;;;;;;;;;eAaLQ;;;;;;;;;;;;;;;;;;;sBAmBOJ;;;;WAIXW;;;;;;;iBAOMT;;;;;;;;;;;iBAWAC;;;;;;;;;;;;;YAaLI;;;;;;;;;;;;qBAYSZ;;UAENiB,sCAAsCb,aAAaA,+DAA+DU;;;;eAIlHI;;;;oBAIKC;;;;;;;;;;;;UAYLC,iBAAAA,SAA0BN;;;;eAI1BV,aAAaiB,MAAMjB;;;;;;;;;;;UAWnBkB,kBAAAA,SAA2BF;;;;;;UAM3BG,eAAAA,SAAwBN"}