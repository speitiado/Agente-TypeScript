{"version":3,"file":"stream.custom.d.ts","names":["BagTemplate","GetUpdateType","GetConfigurableType","UseStreamCustomOptions","UseStreamCustom","UseStreamTransport","Command","FetchStreamTransportOptions","HeadersInit","fetch","RequestInit","Promise","FetchStreamTransport","Record","StateType","Bag","AbortSignal","AsyncGenerator","useStreamCustom"],"sources":["../../src/react/stream.custom.d.ts"],"sourcesContent":["import type { BagTemplate, GetUpdateType, GetConfigurableType, UseStreamCustomOptions, UseStreamCustom, UseStreamTransport } from \"./types.js\";\nimport { Command } from \"../types.js\";\ninterface FetchStreamTransportOptions {\n    /**\n     * The URL of the API to use.\n     */\n    apiUrl: string;\n    /**\n     * Default headers to send with requests.\n     */\n    defaultHeaders?: HeadersInit;\n    /**\n     * Specify a custom fetch implementation.\n     */\n    fetch?: typeof fetch | ((...args: any[]) => any); // eslint-disable-line @typescript-eslint/no-explicit-any\n    /**\n     * Callback that is called before the request is made.\n     */\n    onRequest?: (url: string, init: RequestInit) => Promise<RequestInit> | RequestInit;\n}\nexport declare class FetchStreamTransport<StateType extends Record<string, unknown> = Record<string, unknown>, Bag extends BagTemplate = BagTemplate> implements UseStreamTransport<StateType, Bag> {\n    private readonly options;\n    constructor(options: FetchStreamTransportOptions);\n    stream(payload: {\n        input: GetUpdateType<Bag, StateType> | null | undefined;\n        context: GetConfigurableType<Bag> | undefined;\n        command: Command | undefined;\n        signal: AbortSignal;\n    }): Promise<AsyncGenerator<{\n        id?: string;\n        event: string;\n        data: unknown;\n    }>>;\n}\nexport declare function useStreamCustom<StateType extends Record<string, unknown> = Record<string, unknown>, Bag extends {\n    ConfigurableType?: Record<string, unknown>;\n    InterruptType?: unknown;\n    CustomEventType?: unknown;\n    UpdateType?: unknown;\n} = BagTemplate>(options: UseStreamCustomOptions<StateType, Bag>): UseStreamCustom<StateType, Bag>;\nexport {};\n"],"mappings":";;;;UAEUO,2BAAAA;;AAD4B;;QASjBC,EAAAA,MAAAA;;;;gBAQ+BG,CAAAA,EAR/BH,WAQ+BG;;;AAEpD;EAAyC,KAAA,CAAA,EAAA,OANtBF,KAMsB,GAAA,CAAA,CAAA,GAAA,IAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,CAAA,CAAA,CAAA;;;;WAAgGT,CAAAA,EAAAA,CAAAA,GAAAA,EAAAA,MAAAA,EAAAA,IAAAA,EAFrGU,WAEqGV,EAAAA,GAFrFW,OAEqFX,CAF7EU,WAE6EV,CAAAA,GAF9DU,WAE8DV;;AAAsDe,cAA1KH,oBAA0KG,CAAAA,kBAAnIF,MAAmIE,CAAAA,MAAAA,EAAAA,OAAAA,CAAAA,GAAzGF,MAAyGE,CAAAA,MAAAA,EAAAA,OAAAA,CAAAA,EAAAA,YAApEf,WAAoEe,GAAtDf,WAAsDe,CAAAA,YAA9BV,kBAA8BU,CAAXD,SAAWC,EAAAA,GAAAA,CAAAA,CAAAA;mBAEtKR,OAAAA;aAEIQ,CAAAA,OAAAA,EAFJR,2BAEIQ;QAAKD,CAAAA,OAAAA,EAAAA;IAAnBb,KAAAA,EAAAA,aAAAA,CAAcc,GAAdd,EAAmBa,SAAnBb,CAAAA,GAAAA,IAAAA,GAAAA,SAAAA;IACsBc,OAAAA,EAApBb,mBAAoBa,CAAAA,GAAAA,CAAAA,GAAAA,SAAAA;IAApBb,OAAAA,EACAI,OADAJ,GAAAA,SAAAA;IACAI,MAAAA,EACDU,WADCV;MAETK,OADQK,CACAC,cADAD,CAAAA;IACAC,EAAAA,CAAAA,EAAAA,MAAAA;IAARN,KAAAA,EAAAA,MAAAA;IARyJN,IAAAA,EAAAA,OAAAA"}