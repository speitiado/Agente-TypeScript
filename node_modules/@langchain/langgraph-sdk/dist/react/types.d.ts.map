{"version":3,"file":"types.d.ts","names":["Client","ClientConfig","ThreadState","Interrupt","Config","Checkpoint","Metadata","Command","MultitaskStrategy","OnCompletionBehavior","DisconnectMode","Durability","Message","UpdatesStreamEvent","CustomStreamEvent","MetadataStreamEvent","EventsStreamEvent","DebugStreamEvent","CheckpointsStreamEvent","TasksStreamEvent","StreamMode","Sequence","MessageMetadata","Record","StateType","BagTemplate","GetUpdateType","Bag","Partial","GetConfigurableType","GetInterruptType","GetCustomEventType","RunCallbackMeta","UseStreamThread","Promise","UseStreamOptions","RunMetadataStorage","UseStream","SubmitOptions","ConfigWithConfigurable","ConfigurableType","ContextType","Omit","Array","UseStreamTransport","AbortSignal","AsyncGenerator","UseStreamCustomOptions","Pick","UseStreamCustom","CustomSubmitOptions"],"sources":["../../src/react/types.d.ts"],"sourcesContent":["/* __LC_ALLOW_ENTRYPOINT_SIDE_EFFECTS__ */\nimport type { Client, ClientConfig } from \"../client.js\";\nimport type { ThreadState, Interrupt, Config, Checkpoint, Metadata } from \"../schema.js\";\nimport type { Command, MultitaskStrategy, OnCompletionBehavior, DisconnectMode, Durability } from \"../types.js\";\nimport type { Message } from \"../types.messages.js\";\nimport type { UpdatesStreamEvent, CustomStreamEvent, MetadataStreamEvent, EventsStreamEvent, DebugStreamEvent, CheckpointsStreamEvent, TasksStreamEvent, StreamMode } from \"../types.stream.js\";\nimport type { Sequence } from \"../ui/branching.js\";\nexport type MessageMetadata<StateType extends Record<string, unknown>> = {\n    /**\n     * The ID of the message used.\n     */\n    messageId: string;\n    /**\n     * The first thread state the message was seen in.\n     */\n    firstSeenState: ThreadState<StateType> | undefined;\n    /**\n     * The branch of the message.\n     */\n    branch: string | undefined;\n    /**\n     * The list of branches this message is part of.\n     * This is useful for displaying branching controls.\n     */\n    branchOptions: string[] | undefined;\n    /**\n     * Metadata sent alongside the message during run streaming.\n     * @remarks This metadata only exists temporarily in browser memory during streaming and is not persisted after completion.\n     */\n    streamMetadata: Record<string, unknown> | undefined;\n};\nexport type BagTemplate = {\n    ConfigurableType?: Record<string, unknown>;\n    InterruptType?: unknown;\n    CustomEventType?: unknown;\n    UpdateType?: unknown;\n};\nexport type GetUpdateType<Bag extends BagTemplate, StateType extends Record<string, unknown>> = Bag extends {\n    UpdateType: unknown;\n} ? Bag[\"UpdateType\"] : Partial<StateType>;\nexport type GetConfigurableType<Bag extends BagTemplate> = Bag extends {\n    ConfigurableType: Record<string, unknown>;\n} ? Bag[\"ConfigurableType\"] : Record<string, unknown>;\nexport type GetInterruptType<Bag extends BagTemplate> = Bag extends {\n    InterruptType: unknown;\n} ? Bag[\"InterruptType\"] : unknown;\nexport type GetCustomEventType<Bag extends BagTemplate> = Bag extends {\n    CustomEventType: unknown;\n} ? Bag[\"CustomEventType\"] : unknown;\nexport interface RunCallbackMeta {\n    run_id: string;\n    thread_id: string;\n}\nexport interface UseStreamThread<StateType extends Record<string, unknown>> {\n    data: ThreadState<StateType>[] | null | undefined;\n    error: unknown;\n    isLoading: boolean;\n    mutate: (mutateId?: string) => Promise<ThreadState<StateType>[] | null | undefined>;\n}\nexport interface UseStreamOptions<StateType extends Record<string, unknown> = Record<string, unknown>, Bag extends BagTemplate = BagTemplate> {\n    /**\n     * The ID of the assistant to use.\n     */\n    assistantId: string;\n    /**\n     * Client used to send requests.\n     */\n    client?: Client;\n    /**\n     * The URL of the API to use.\n     */\n    apiUrl?: ClientConfig[\"apiUrl\"];\n    /**\n     * The API key to use.\n     */\n    apiKey?: ClientConfig[\"apiKey\"];\n    /**\n     * Custom call options, such as custom fetch implementation.\n     */\n    callerOptions?: ClientConfig[\"callerOptions\"];\n    /**\n     * Default headers to send with requests.\n     */\n    defaultHeaders?: ClientConfig[\"defaultHeaders\"];\n    /**\n     * Specify the key within the state that contains messages.\n     * Defaults to \"messages\".\n     *\n     * @default \"messages\"\n     */\n    messagesKey?: string;\n    /**\n     * Callback that is called when an error occurs.\n     */\n    onError?: (error: unknown, run: RunCallbackMeta | undefined) => void;\n    /**\n     * Callback that is called when the stream is finished.\n     */\n    onFinish?: (state: ThreadState<StateType>, run: RunCallbackMeta | undefined) => void;\n    /**\n     * Callback that is called when a new stream is created.\n     */\n    onCreated?: (run: RunCallbackMeta) => void;\n    /**\n     * Callback that is called when an update event is received.\n     */\n    onUpdateEvent?: (data: UpdatesStreamEvent<GetUpdateType<Bag, StateType>>[\"data\"], options: {\n        namespace: string[] | undefined;\n        mutate: (update: Partial<StateType> | ((prev: StateType) => Partial<StateType>)) => void;\n    }) => void;\n    /**\n     * Callback that is called when a custom event is received.\n     */\n    onCustomEvent?: (data: CustomStreamEvent<GetCustomEventType<Bag>>[\"data\"], options: {\n        namespace: string[] | undefined;\n        mutate: (update: Partial<StateType> | ((prev: StateType) => Partial<StateType>)) => void;\n    }) => void;\n    /**\n     * Callback that is called when a metadata event is received.\n     */\n    onMetadataEvent?: (data: MetadataStreamEvent[\"data\"]) => void;\n    /**\n     * Callback that is called when a LangChain event is received.\n     * @see https://langchain-ai.github.io/langgraph/cloud/how-tos/stream_events/#stream-graph-in-events-mode for more details.\n     */\n    onLangChainEvent?: (data: EventsStreamEvent[\"data\"]) => void;\n    /**\n     * Callback that is called when a debug event is received.\n     * @internal This API is experimental and subject to change.\n     */\n    onDebugEvent?: (data: DebugStreamEvent[\"data\"], options: {\n        namespace: string[] | undefined;\n    }) => void;\n    /**\n     * Callback that is called when a checkpoints event is received.\n     */\n    onCheckpointEvent?: (data: CheckpointsStreamEvent<StateType>[\"data\"], options: {\n        namespace: string[] | undefined;\n    }) => void;\n    /**\n     * Callback that is called when a tasks event is received.\n     */\n    onTaskEvent?: (data: TasksStreamEvent<StateType, GetUpdateType<Bag, StateType>>[\"data\"], options: {\n        namespace: string[] | undefined;\n    }) => void;\n    /**\n     * Callback that is called when the stream is stopped by the user.\n     * Provides a mutate function to update the stream state immediately\n     * without requiring a server roundtrip.\n     *\n     * @example\n     * ```typescript\n     * onStop: ({ mutate }) => {\n     *   mutate((prev) => ({\n     *     ...prev,\n     *     ui: prev.ui?.map(component =>\n     *       component.props.isLoading\n     *         ? { ...component, props: { ...component.props, stopped: true, isLoading: false }}\n     *         : component\n     *     )\n     *   }));\n     * }\n     * ```\n     */\n    onStop?: (options: {\n        mutate: (update: Partial<StateType> | ((prev: StateType) => Partial<StateType>)) => void;\n    }) => void;\n    /**\n     * The ID of the thread to fetch history and current values from.\n     */\n    threadId?: string | null;\n    /**\n     * Callback that is called when the thread ID is updated (ie when a new thread is created).\n     */\n    onThreadId?: (threadId: string) => void;\n    /** Will reconnect the stream on mount */\n    reconnectOnMount?: boolean | (() => RunMetadataStorage);\n    /**\n     * Initial values to display immediately when loading a thread.\n     * Useful for displaying cached thread data while official history loads.\n     * These values will be replaced when official thread data is fetched.\n     *\n     * Note: UI components from initialValues will render immediately if they're\n     * predefined in LoadExternalComponent's components prop, providing instant\n     * cached UI display without server fetches.\n     */\n    initialValues?: StateType | null;\n    /**\n     * Whether to fetch the history of the thread.\n     * If true, the history will be fetched from the server. Defaults to 10 entries.\n     * If false, only the last state will be fetched from the server.\n     * @default true\n     */\n    fetchStateHistory?: boolean | {\n        limit: number;\n    };\n    /**\n     * Manage the thread state externally.\n     * @experimental\n     */\n    experimental_thread?: UseStreamThread<StateType>;\n}\ninterface RunMetadataStorage {\n    getItem(key: `lg:stream:${string}`): string | null;\n    setItem(key: `lg:stream:${string}`, value: string): void;\n    removeItem(key: `lg:stream:${string}`): void;\n}\nexport interface UseStream<StateType extends Record<string, unknown> = Record<string, unknown>, Bag extends BagTemplate = BagTemplate> {\n    /**\n     * The current values of the thread.\n     */\n    values: StateType;\n    /**\n     * Last seen error from the thread or during streaming.\n     */\n    error: unknown;\n    /**\n     * Whether the stream is currently running.\n     */\n    isLoading: boolean;\n    /**\n     * Whether the thread is currently being loaded.\n     */\n    isThreadLoading: boolean;\n    /**\n     * Stops the stream.\n     */\n    stop: () => Promise<void>;\n    /**\n     * Create and stream a run to the thread.\n     */\n    submit: (values: GetUpdateType<Bag, StateType> | null | undefined, options?: SubmitOptions<StateType, GetConfigurableType<Bag>>) => Promise<void>;\n    /**\n     * The current branch of the thread.\n     */\n    branch: string;\n    /**\n     * Set the branch of the thread.\n     */\n    setBranch: (branch: string) => void;\n    /**\n     * Flattened history of thread states of a thread.\n     */\n    history: ThreadState<StateType>[];\n    /**\n     * Tree of all branches for the thread.\n     * @experimental\n     */\n    experimental_branchTree: Sequence<StateType>;\n    /**\n     * Get the interrupt value for the stream if interrupted.\n     */\n    interrupt: Interrupt<GetInterruptType<Bag>> | undefined;\n    /**\n     * Messages inferred from the thread.\n     * Will automatically update with incoming message chunks.\n     */\n    messages: Message[];\n    /**\n     * Get the metadata for a message, such as first thread state the message\n     * was seen in and branch information.\n     \n     * @param message - The message to get the metadata for.\n     * @param index - The index of the message in the thread.\n     * @returns The metadata for the message.\n     */\n    getMessagesMetadata: (message: Message, index?: number) => MessageMetadata<StateType> | undefined;\n    /**\n     * LangGraph SDK client used to send request and receive responses.\n     */\n    client: Client;\n    /**\n     * The ID of the assistant to use.\n     */\n    assistantId: string;\n    /**\n     * Join an active stream.\n     */\n    joinStream: (runId: string, lastEventId?: string, options?: {\n        streamMode?: StreamMode | StreamMode[];\n    }) => Promise<void>;\n}\ntype ConfigWithConfigurable<ConfigurableType extends Record<string, unknown>> = Config & {\n    configurable?: ConfigurableType;\n};\nexport interface SubmitOptions<StateType extends Record<string, unknown> = Record<string, unknown>, ContextType extends Record<string, unknown> = Record<string, unknown>> {\n    config?: ConfigWithConfigurable<ContextType>;\n    context?: ContextType;\n    checkpoint?: Omit<Checkpoint, \"thread_id\"> | null;\n    command?: Command;\n    interruptBefore?: \"*\" | string[];\n    interruptAfter?: \"*\" | string[];\n    metadata?: Metadata;\n    multitaskStrategy?: MultitaskStrategy;\n    onCompletion?: OnCompletionBehavior;\n    onDisconnect?: DisconnectMode;\n    feedbackKeys?: string[];\n    streamMode?: Array<StreamMode>;\n    optimisticValues?: Partial<StateType> | ((prev: StateType) => Partial<StateType>);\n    /**\n     * Whether or not to stream the nodes of any subgraphs called\n     * by the assistant.\n     * @default false\n     */\n    streamSubgraphs?: boolean;\n    /**\n     * Mark the stream as resumable. All events emitted during the run will be temporarily persisted\n     * in order to be re-emitted if the stream is re-joined.\n     * @default false\n     */\n    streamResumable?: boolean;\n    /**\n     * Whether to checkpoint during the run (or only at the end/interruption).\n     * - `\"async\"`: Save checkpoint asynchronously while the next step executes (default).\n     * - `\"sync\"`: Save checkpoint synchronously before the next step starts.\n     * - `\"exit\"`: Save checkpoint only when the graph exits.\n     * @default \"async\"\n     */\n    durability?: Durability;\n    /**\n     * The ID to use when creating a new thread. When provided, this ID will be used\n     * for thread creation when threadId is `null` or `undefined`.\n     * This enables optimistic UI updates where you know the thread ID\n     * before the thread is actually created.\n     */\n    threadId?: string;\n}\n/**\n * Transport used to stream the thread.\n * Only applicable for custom endpoints using `toLangGraphEventStream` or `toLangGraphEventStreamResponse`.\n */\nexport interface UseStreamTransport<StateType extends Record<string, unknown> = Record<string, unknown>, Bag extends BagTemplate = BagTemplate> {\n    stream: (payload: {\n        input: GetUpdateType<Bag, StateType> | null | undefined;\n        context: GetConfigurableType<Bag> | undefined;\n        command: Command | undefined;\n        config: ConfigWithConfigurable<GetConfigurableType<Bag>> | undefined;\n        signal: AbortSignal;\n    }) => Promise<AsyncGenerator<{\n        id?: string;\n        event: string;\n        data: unknown;\n    }>>;\n}\nexport type UseStreamCustomOptions<StateType extends Record<string, unknown> = Record<string, unknown>, Bag extends BagTemplate = BagTemplate> = Pick<UseStreamOptions<StateType, Bag>, \"messagesKey\" | \"threadId\" | \"onThreadId\" | \"onError\" | \"onCreated\" | \"onUpdateEvent\" | \"onCustomEvent\" | \"onMetadataEvent\" | \"onLangChainEvent\" | \"onDebugEvent\" | \"onCheckpointEvent\" | \"onTaskEvent\" | \"onStop\" | \"initialValues\"> & {\n    transport: UseStreamTransport<StateType, Bag>;\n};\nexport type UseStreamCustom<StateType extends Record<string, unknown> = Record<string, unknown>, Bag extends BagTemplate = BagTemplate> = Pick<UseStream<StateType, Bag>, \"values\" | \"error\" | \"isLoading\" | \"stop\" | \"interrupt\" | \"messages\"> & {\n    submit: (values: GetUpdateType<Bag, StateType> | null | undefined, options?: CustomSubmitOptions<StateType, GetConfigurableType<Bag>>) => Promise<void>;\n};\nexport type CustomSubmitOptions<StateType extends Record<string, unknown> = Record<string, unknown>, ConfigurableType extends Record<string, unknown> = Record<string, unknown>> = Pick<SubmitOptions<StateType, ConfigurableType>, \"optimisticValues\" | \"context\" | \"command\" | \"config\">;\nexport {};\n"],"mappings":"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"}