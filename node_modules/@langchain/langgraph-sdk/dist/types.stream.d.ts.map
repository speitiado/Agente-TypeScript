{"version":3,"file":"types.stream.d.ts","names":["Message","Interrupt","Metadata","Config","ThreadTask","StreamMode","ThreadStreamMode","MessageTupleMetadata","AsSubgraph","TEvent","ValuesStreamEvent","StateType","SubgraphValuesStreamEvent","MessagesTupleStreamEvent","SubgraphMessagesTupleStreamEvent","MetadataStreamEvent","ErrorStreamEvent","SubgraphErrorStreamEvent","UpdatesStreamEvent","UpdateType","SubgraphUpdatesStreamEvent","CustomStreamEvent","T","SubgraphCustomStreamEvent","MessagesMetadataStreamEvent","MessagesCompleteStreamEvent","MessagesPartialStreamEvent","TasksStreamCreateEvent","TasksStreamResultEvent","TasksStreamErrorEvent","TasksStreamEvent","SubgraphTasksStreamEvent","CheckpointsStreamEvent","SubgraphCheckpointsStreamEvent","MessagesStreamEvent","SubgraphMessagesStreamEvent","DebugStreamEvent","SubgraphDebugStreamEvent","EventsStreamEvent","Record","SubgraphEventsStreamEvent","FeedbackStreamEvent","GetStreamModeMap","TStateType","TUpdateType","TCustomType","TStreamMode","GetSubgraphsStreamModeMap","TypedAsyncGenerator","TSubgraphs","AsyncGenerator"],"sources":["../src/types.stream.d.ts"],"sourcesContent":["import type { Message } from \"./types.messages.js\";\nimport type { Interrupt, Metadata, Config, ThreadTask } from \"./schema.js\";\n/**\nimport type { SubgraphCheckpointsStreamEvent } from \"./types.stream.subgraph.js\";\n * Stream modes\n * - \"values\": Stream only the state values.\n * - \"messages\": Stream complete messages.\n * - \"messages-tuple\": Stream (message chunk, metadata) tuples.\n * - \"updates\": Stream updates to the state.\n * - \"events\": Stream events occurring during execution.\n * - \"debug\": Stream detailed debug information.\n * - \"custom\": Stream custom events.\n */\nexport type StreamMode = \"values\" | \"messages\" | \"updates\" | \"events\" | \"debug\" | \"tasks\" | \"checkpoints\" | \"custom\" | \"messages-tuple\";\nexport type ThreadStreamMode = \"run_modes\" | \"lifecycle\" | \"state_update\";\ntype MessageTupleMetadata = {\n    tags: string[];\n    [key: string]: unknown;\n};\ntype AsSubgraph<TEvent extends {\n    id?: string;\n    event: string;\n    data: unknown;\n}> = {\n    id?: TEvent[\"id\"];\n    event: TEvent[\"event\"] | `${TEvent[\"event\"]}|${string}`;\n    data: TEvent[\"data\"];\n};\n/**\n * Stream event with values after completion of each step.\n */\nexport type ValuesStreamEvent<StateType> = {\n    id?: string;\n    event: \"values\";\n    data: StateType;\n};\n/** @internal */\nexport type SubgraphValuesStreamEvent<StateType> = AsSubgraph<ValuesStreamEvent<StateType>>;\n/**\n * Stream event with message chunks coming from LLM invocations inside nodes.\n */\nexport type MessagesTupleStreamEvent = {\n    event: \"messages\";\n    // TODO: add types for message and config, which do not depend on LangChain\n    // while making sure it's easy to keep them in sync.\n    data: [message: Message, config: MessageTupleMetadata];\n};\n/** @internal */\nexport type SubgraphMessagesTupleStreamEvent = AsSubgraph<MessagesTupleStreamEvent>;\n/**\n * Metadata stream event with information about the run and thread\n */\nexport type MetadataStreamEvent = {\n    id?: string;\n    event: \"metadata\";\n    data: {\n        run_id: string;\n        thread_id: string;\n    };\n};\n/**\n * Stream event with error information.\n */\nexport type ErrorStreamEvent = {\n    id?: string;\n    event: \"error\";\n    data: {\n        error: string;\n        message: string;\n    };\n};\n/** @internal */\nexport type SubgraphErrorStreamEvent = AsSubgraph<ErrorStreamEvent>;\n/**\n * Stream event with updates to the state after each step.\n * The streamed outputs include the name of the node that\n * produced the update as well as the update.\n */\nexport type UpdatesStreamEvent<UpdateType> = {\n    id?: string;\n    event: \"updates\";\n    data: {\n        [node: string]: UpdateType;\n    };\n};\n/** @internal */\nexport type SubgraphUpdatesStreamEvent<UpdateType> = AsSubgraph<UpdatesStreamEvent<UpdateType>>;\n/**\n * Streaming custom data from inside the nodes.\n */\nexport type CustomStreamEvent<T> = {\n    event: \"custom\";\n    data: T;\n};\n/** @internal */\nexport type SubgraphCustomStreamEvent<T> = AsSubgraph<CustomStreamEvent<T>>;\ntype MessagesMetadataStreamEvent = {\n    id?: string;\n    event: \"messages/metadata\";\n    data: {\n        [messageId: string]: {\n            metadata: unknown;\n        };\n    };\n};\ntype MessagesCompleteStreamEvent = {\n    id?: string;\n    event: \"messages/complete\";\n    data: Message[];\n};\ntype MessagesPartialStreamEvent = {\n    id?: string;\n    event: \"messages/partial\";\n    data: Message[];\n};\ntype TasksStreamCreateEvent<StateType> = {\n    id?: string;\n    event: \"tasks\";\n    data: {\n        id: string;\n        name: string;\n        interrupts: Interrupt[];\n        input: StateType;\n        triggers: string[];\n    };\n};\ntype TasksStreamResultEvent<UpdateType> = {\n    id?: string;\n    event: \"tasks\";\n    data: {\n        id: string;\n        name: string;\n        interrupts: Interrupt[];\n        result: [string, UpdateType][];\n    };\n};\ntype TasksStreamErrorEvent = {\n    id?: string;\n    event: \"tasks\";\n    data: {\n        id: string;\n        name: string;\n        interrupts: Interrupt[];\n        error: string;\n    };\n};\nexport type TasksStreamEvent<StateType, UpdateType> = TasksStreamCreateEvent<StateType> | TasksStreamResultEvent<UpdateType> | TasksStreamErrorEvent;\ntype SubgraphTasksStreamEvent<StateType, UpdateType> = AsSubgraph<TasksStreamCreateEvent<StateType>> | AsSubgraph<TasksStreamResultEvent<UpdateType>> | AsSubgraph<TasksStreamErrorEvent>;\nexport type CheckpointsStreamEvent<StateType> = {\n    id?: string;\n    event: \"checkpoints\";\n    data: {\n        values: StateType;\n        next: string[];\n        config: Config;\n        metadata: Metadata;\n        tasks: ThreadTask[];\n    };\n};\ntype SubgraphCheckpointsStreamEvent<StateType> = AsSubgraph<CheckpointsStreamEvent<StateType>>;\n/**\n * Message stream event specific to LangGraph Server.\n * @deprecated Use `streamMode: \"messages-tuple\"` instead.\n */\nexport type MessagesStreamEvent = MessagesMetadataStreamEvent | MessagesCompleteStreamEvent | MessagesPartialStreamEvent;\n/** @internal */\nexport type SubgraphMessagesStreamEvent = AsSubgraph<MessagesMetadataStreamEvent> | AsSubgraph<MessagesCompleteStreamEvent> | AsSubgraph<MessagesPartialStreamEvent>;\n/**\n * Stream event with detailed debug information.\n */\nexport type DebugStreamEvent = {\n    id?: string;\n    event: \"debug\";\n    data: unknown;\n};\n/** @internal */\nexport type SubgraphDebugStreamEvent = AsSubgraph<DebugStreamEvent>;\n/**\n * Stream event with events occurring during execution.\n */\nexport type EventsStreamEvent = {\n    id?: string;\n    event: \"events\";\n    data: {\n        event: `on_${\"chat_model\" | \"llm\" | \"chain\" | \"tool\" | \"retriever\" | \"prompt\"}_${\"start\" | \"stream\" | \"end\"}` | (string & {}); // eslint-disable-line @typescript-eslint/ban-types\n        name: string;\n        tags: string[];\n        run_id: string;\n        metadata: Record<string, unknown>;\n        parent_ids: string[];\n        data: unknown;\n    };\n};\n/** @internal */\nexport type SubgraphEventsStreamEvent = AsSubgraph<EventsStreamEvent>;\n/**\n * Stream event with a feedback key to signed URL map. Set `feedbackKeys` in\n * the `RunsStreamPayload` to receive this event.\n */\nexport type FeedbackStreamEvent = {\n    id?: string;\n    event: \"feedback\";\n    data: {\n        [feedbackKey: string]: string;\n    };\n};\ntype GetStreamModeMap<TStreamMode extends StreamMode | StreamMode[], TStateType = unknown, TUpdateType = TStateType, TCustomType = unknown> = {\n    values: ValuesStreamEvent<TStateType>;\n    updates: UpdatesStreamEvent<TUpdateType>;\n    custom: CustomStreamEvent<TCustomType>;\n    debug: DebugStreamEvent;\n    messages: MessagesStreamEvent;\n    \"messages-tuple\": MessagesTupleStreamEvent;\n    tasks: TasksStreamEvent<TStateType, TUpdateType>;\n    checkpoints: CheckpointsStreamEvent<TStateType>;\n    events: EventsStreamEvent;\n}[TStreamMode extends StreamMode[] ? TStreamMode[number] : TStreamMode] | ErrorStreamEvent | MetadataStreamEvent | FeedbackStreamEvent;\ntype GetSubgraphsStreamModeMap<TStreamMode extends StreamMode | StreamMode[], TStateType = unknown, TUpdateType = TStateType, TCustomType = unknown> = {\n    values: SubgraphValuesStreamEvent<TStateType>;\n    updates: SubgraphUpdatesStreamEvent<TUpdateType>;\n    custom: SubgraphCustomStreamEvent<TCustomType>;\n    debug: SubgraphDebugStreamEvent;\n    messages: SubgraphMessagesStreamEvent;\n    \"messages-tuple\": SubgraphMessagesTupleStreamEvent;\n    events: SubgraphEventsStreamEvent;\n    tasks: SubgraphTasksStreamEvent<TStateType, TUpdateType>;\n    checkpoints: SubgraphCheckpointsStreamEvent<TStateType>;\n}[TStreamMode extends StreamMode[] ? TStreamMode[number] : TStreamMode] | SubgraphErrorStreamEvent | MetadataStreamEvent | FeedbackStreamEvent;\nexport type TypedAsyncGenerator<TStreamMode extends StreamMode | StreamMode[] = [], TSubgraphs extends boolean = false, TStateType = unknown, TUpdateType = TStateType, TCustomType = unknown> = AsyncGenerator<TSubgraphs extends true ? GetSubgraphsStreamModeMap<TStreamMode, TStateType, TUpdateType, TCustomType> : GetStreamModeMap<TStreamMode, TStateType, TUpdateType, TCustomType>>;\nexport {};\n"],"mappings":"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"}